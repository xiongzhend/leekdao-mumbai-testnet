{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","views/ComingSoon.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","StyledComingSoon","styled","div","CommingSoon","TranslateString","width","mb","style","marginBottom","size","as","href"],"mappings":"kJAGMA,EAAgB,UASTC,EAAiB,SAACC,EAA0BC,EAAuBC,GAC9E,IAAMC,EAAmBH,EAAaI,MAAK,SAACC,GAC1C,OAAOA,EAAYC,KAAKC,WAAaN,KAEvC,GAAIE,EAAkB,CACpB,IAAMK,EAAmBL,EAAiBG,KAAKG,KAE/C,OADyBD,EAAiBE,SAAS,KAb1B,SAACP,EAA0BD,GACtD,IAAMS,EAAkBb,EAAcc,KAAKT,GAAkB,GAEvDU,EAAuBX,EAASY,MAAM,KAAK,GACjD,OAAOX,EAAiBY,QAAQJ,EAAiBE,GAWtCG,CAAqBR,EAAkBN,GAEzCM,EAET,OAAON,GCNMe,IAdC,WAAO,IACbjB,EAAiBkB,qBAAWC,KAA5BnB,aAER,OAAO,SAACC,EAAuBC,GAC7B,MAAwB,UAApBF,EAAa,GACRE,EAELF,EAAaoB,OAAS,EACjBrB,EAAeC,EAAcC,EAAeC,GAE9CA,K,2SCRX,IAAMmB,EAAmBC,IAAOC,IAAV,KA2BPC,UAnBK,WAClB,IAAMC,EAAkBR,cAExB,OACE,cAAC,IAAD,UACE,eAACI,EAAD,WACE,cAAC,IAAD,CAAUK,MAAM,OAAOC,GAAG,QAC1B,qBAAKC,MAAO,CAAEC,aAAc,QAA5B,SACE,cAAC,IAAD,CAASC,KAAK,MAAd,wCAGF,cAAC,IAAD,CAAQC,GAAG,IAAIC,KAAK,IAAIF,KAAK,KAA7B,SACGL,EAAgB,IAAK","file":"static/js/3.60677a82.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Text, LogoIcon } from 'leek-uikit'\nimport Page from 'components/layout/Page'\nimport useI18n from 'hooks/useI18n'\n\nconst StyledComingSoon = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CommingSoon = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <StyledComingSoon>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <div style={{ marginBottom: '20px' }}>\n          <Heading size=\"xxl\">Coming Soon ðŸ˜Š</Heading>\n        </div>\n\n        <Button as=\"a\" href=\"/\" size=\"sm\">\n          {TranslateString(999, 'Back Home')}\n        </Button>\n      </StyledComingSoon>\n    </Page>\n  )\n}\n\nexport default CommingSoon\n"],"sourceRoot":""}