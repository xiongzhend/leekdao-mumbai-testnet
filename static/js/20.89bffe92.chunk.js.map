{"version":3,"sources":["utils/formatBalance.ts","views/Airdrop/General/Column.tsx","views/Airdrop/api/index.ts","views/Airdrop/General/LoadingContent.tsx","views/Airdrop/General/ErrorMessage.tsx","views/Airdrop/General/SuccessMessage.tsx","views/Airdrop/General/WarningMessage.tsx","views/Airdrop/store/reducer.tsx","views/Airdrop/store/store.tsx","views/Airdrop/Modal/ParticipationModal.tsx","views/Airdrop/AirdropCard/FormCard.tsx","utils/wallet.ts","views/Airdrop/General/AirdropInfoHeader.tsx","views/Airdrop/General/AirdropInfoDetails.tsx","views/Airdrop/General/AirdropProgress.tsx","views/Airdrop/Modal/ConfirmationPendingModal.tsx","views/Airdrop/General/TransactionMessage.tsx","views/Airdrop/Modal/AirdropApproveTransactionModal.tsx","views/Airdrop/Modal/ApproveErrorMessageModal.tsx","views/Airdrop/Modal/VipApproveErrorMessageModal.tsx","views/Airdrop/Modal/VipAirdropApproveTransactionModal.tsx","views/Airdrop/Modal/ClaimAirdropTransactionModal.tsx","views/Airdrop/AirdropCard/InfoCard.tsx","views/Airdrop/Hero.tsx","views/Airdrop/HowToParticipate.tsx","views/Airdrop/Airdrop.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","getMainTokenBalance","multipliedBy","Column","styled","div","ColumnCenter","AutoColumn","gap","justify","url","process","username","password","useGetAirdropList","isVip","useState","airdropList","setAirdropList","customUrl","fastRefresh","useRefresh","useEffect","mounted","a","axios","get","params","data","console","error","response","fetchData","updateAirdropParticipationStatus","patch","auth","rotate","keyframes","Spinner","img","ConfirmedIcon","CustomLightSpinner","size","LoadingContent","src","alt","Icon","ErrorMessage","errorMessage","color","width","fontSize","mt","SuccessMessage","WarningMessage","waringMessage","style","textAlign","defaultState","formData","airdropApproveState","airdropApproveTxHash","airdropApproveError","vipAirdropApproveState","vipAirdropApproveTxHash","vipAirdropApproveError","airdropState","claimAirdropTxHash","POST_FORM_DATA","APPROVE_AIRDROP","APPROVE_VIP_AIRDROP","CLAIM_AIRDROP","UPDATE_ERROR_MESSAGE","RESET_TO_DEFAULT_STATE","store","createStore","state","action","type","newState","JSON","parse","stringify","airdropApproveStore","vipAirdropApproveStore","claimAirdropStore","ParticipationModal","comp","onDismiss","successData","setSuccessData","post","usePostParticipation","getState","warning","title","onClick","FormLayout","form","SubTitle","Heading","attrs","as","theme","colors","secondary","FormCard","RetweetUrlErrorMessageComp","account","useWallet","twitterName","setTwitterName","retweetUrl","setRetweetUrl","telegramName","setTelegramName","discordName","setDiscordName","email","setEmail","isTwitterNameValid","trim","length","isRetweetUrlNotEmpty","isTelegramNameValid","isDiscordNameValid","isRetweetUrlValid","validator","isURL","isEmailValid","isEmail","isVerified","setIsVerified","hover","setHover","useModal","onPresentParticipationModal","alignItems","justifyContent","onSubmit","e","event","preventDefault","dispatch","submitForm","mb","marginBottom","value","readOnly","required","placeholder","isSuccess","name","onChange","currentTarget","isWarning","onMouseMove","onMouseLeave","cursor","mr","href","target","sitekey","fullWidth","disabled","UnlockButton","registerToken","tokenAddress","tokenSymbol","tokenDecimals","tokenImage","window","ethereum","request","method","options","address","symbol","image","tokenAdded","StyledAirdropInfoHeader","Flex","Name","Description","Text","textSubtle","AirdropInfoHeader","airdropId","description","height","StyledAirdropInfoDetails","Item","Display","chainId","AirdropInfoDetails","startBlock","endBlock","airdropAmount","vipAirdropAmount","remainingTokens","totalAmount","tokenName","getBlockInfo","display","numeral","format","StyledProgress","AirdropProgress","progress","primaryStep","ConfirmationPendingContent","TransactionMessage","transactionHash","useContext","ThemeContext","strokeWidth","primary","getTranscationHash","AirdropApproveTransactionModal","ApproveErrorMessageModal","VipApproveErrorMessageModal","VipAirdropApproveTransactionModal","ClaimAirdropTransactionModal","CHAIN_ID","InfoLayout","StyledInfoCard","Card","isOwner","InfoCard","id","airdropConfig","projectSiteUrl","isActive","airdropInfo","setAirdropInfo","contract","useAirdropContract","Promise","all","methods","startBlockNumber","call","finishBlockNumber","remainingAmount","useGetAirdropInfo","airdropNumber","airdropVipNumber","vipAirdropList","isVIP","setIsVIP","slowRefresh","useIsVIP","isWhitelisted","setIsWhitelisted","useIsWhiteListed","onPresentConfirmationModal","onPresentAirdropApproveModal","onPresentAirdropApproveErrorModal","onPresentVipAirdropApproveModal","onPresentVipAirdropApproveErrorModal","onPresentClaimAirdropModal","approveAirdropList","whitelist","send","from","result","vipApproveAirdropList","whitelistVIP","claimAirdrop","getAirdrop","toUpperCase","getChainExplorerUrl","bold","StyledHero","Box","Title","DesktopImage","Image","mediaQueries","lg","Hero","Container","pr","Divider","borderColor","StepContainer","md","StyledStepCard","radii","card","InlineLink","Link","StepCardInner","background","StepCard","step","textTransform","label","subtitle","HowToParticipate","flexDirection","map","maxWidth","marginLeft","ParticipationLayout","BaseLayout","sm","Airdrop"],"mappings":"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","file":"static/js/20.89bffe92.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const getMainTokenBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.multipliedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import styled from 'styled-components'\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\nexport const ColumnCenter = styled(Column)`\n  width: 100%;\n  align-items: center;\n`\n\nexport const AutoColumn = styled.div<{\n    gap?: 'sm' | 'md' | 'lg' | string\n    justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\n}>`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\n  justify-items: ${({ justify }) => justify && justify};\n`\n\nexport default Column","import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport { useAirdropContract } from \"hooks/useContract\"\nimport useRefresh from 'hooks/useRefresh'\n\nconst url = process.env.REACT_APP_API_URL;\nconst username = process.env.REACT_APP_API_USERNAME\nconst password = process.env.REACT_APP_API_PASSWORD\n\ninterface airdropInfo {\n    startBlock?: number\n    endBlock?: number\n    airdropAmount?: number\n    vipAirdropAmount?: number\n    remainingAmount?: number\n}\n\nexport const usePostParticipation = (formData) => {\n    const [successData, setSuccessData] = useState(null);\n    const customUrl = `${url}/airdrop`;\n\n    useEffect(() => {\n        let mounted = true\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.post(customUrl,\n                    formData,\n                    {\n                        auth: {\n                            username,\n                            password\n                        }\n                    }\n                )\n                if (mounted) {\n                    setSuccessData(data)\n                }\n            } catch (error) {\n                console.error('Unable to post participation data:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, formData, setSuccessData])\n\n    return successData\n}\n\n\nexport const useGetAirdropInfo = () => {\n    const [airdropInfo, setAirdropInfo] = useState<airdropInfo>({})\n    const contract = useAirdropContract()\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const [startBlock, endBlock, airdropAmount, vipAirdropAmount, remainingAmount] = await Promise.all([\n                    contract.methods.startBlockNumber().call(),\n                    contract.methods.finishBlockNumber().call(),\n                    contract.methods.airdropAmount().call(),\n                    contract.methods.vipAirdropAmount().call(),\n                    contract.methods.remainingTokens().call(),\n                ])\n\n                if (mounted) {\n                    setAirdropInfo({\n                        startBlock,\n                        endBlock,\n                        airdropAmount,\n                        vipAirdropAmount,\n                        remainingAmount\n                    })\n                }\n            } catch (err) {\n                console.error(\"Unable to fetch airdrop info\", err.response)\n            }\n        }\n        fetchData();\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, fastRefresh])\n    return airdropInfo\n}\n\n\nexport const useGetAirdropList = (isVip: boolean) => {\n    const [airdropList, setAirdropList] = useState(null)\n    const customUrl = `${url}/airdropList`;\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl, {\n                    params: {\n                        isVip\n                    }\n                })\n\n                if (mounted) {\n                    setAirdropList(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch airdrop list:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, isVip, setAirdropList, fastRefresh])\n\n    return airdropList\n}\n\nexport const updateAirdropParticipationStatus = async (isVip) => {\n    const customUrl = `${url}/airdropParticipationStatus`;\n    await axios.patch(customUrl, {\n        isVip\n    }, {\n        auth: {\n            username,\n            password\n        }\n    })\n}\n\nexport const useIsVIP = (account: string | undefined) => {\n    const [isVIP, setIsVIP] = useState(false)\n    const contract = useAirdropContract()\n    const { slowRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                if (account) {\n                    const response = await contract.methods.isVIP(account).call()\n\n                    if (mounted) {\n                        setIsVIP(response)\n                    }\n                }\n\n            } catch (err) {\n                console.error(\"Unable to identify whether is VIP\", err.response)\n            }\n        }\n        fetchData();\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, account, slowRefresh])\n    return isVIP\n}\n\nexport const useIsWhiteListed = (account: string | undefined) => {\n    const [isWhitelisted, setIsWhitelisted] = useState(false)\n    const contract = useAirdropContract()\n    const { slowRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                if (account) {\n                    const response = await contract.methods.isWhitelisted(account).call()\n\n                    if (mounted) {\n                        setIsWhitelisted(response)\n                    }\n                }\n            } catch (err) {\n                console.error(\"Unable to identify whether is whitelisted\", err.response)\n            }\n        }\n        fetchData();\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, account, slowRefresh])\n    return isWhitelisted\n}\n\n\n\n\n\n\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { ColumnCenter } from \"./Column\"\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst Spinner = styled.img`\n  animation: 2s ${rotate} linear infinite;\n  width: 16px;\n  height: 16px;\n\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 40px 0;\n`\n\nconst CustomLightSpinner = styled(Spinner) <{ size: string }>`\n  height: ${({ size }) => size};\n  width: ${({ size }) => size};\n`\n\nconst LoadingContent = () => {\n    return (\n        <ConfirmedIcon>\n            <CustomLightSpinner src=\"./images/blue-loader.svg\" alt=\"loader\" size=\"90px\" />\n        </ConfirmedIcon>\n    )\n}\n\nexport default LoadingContent","import React from \"react\"\nimport { Text, ErrorIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\ntype ErrorMessageProps = {\n    errorMessage: string\n}\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ errorMessage }) => {\n    return (\n        <Icon>\n            <ErrorIcon color=\"failure\" width=\"60px\" />\n            <Text color=\"failure\" fontSize=\"20px\" mt=\"10px\">{errorMessage}</Text>\n        </Icon>\n    )\n}\n\nexport default ErrorMessage","import React from \"react\"\nimport { Text, CheckmarkCircleIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst SuccessMessage: React.FC = () => {\n    return (\n        <Icon>\n            <CheckmarkCircleIcon color=\"success\" width=\"60px\" />\n            <Text color=\"success\" fontSize=\"20px\" mt=\"10px\">Thank you for your participation!</Text>\n        </Icon>\n    )\n}\n\nexport default SuccessMessage","import React from \"react\"\nimport { Text, WarningIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\ntype WarningMessageProps = {\n    waringMessage: string\n}\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst WarningMessage: React.FC<WarningMessageProps> = ({ waringMessage }) => {\n    return (\n        <Icon>\n            <WarningIcon color=\"warning\" width=\"60px\" />\n            <Text color=\"warning\" fontSize=\"20px\" mt=\"10px\" style={{ width: \"350px\", textAlign: \"center\" }}>{waringMessage}</Text>\n        </Icon>\n    )\n}\n\nexport default WarningMessage","const defaultState = {\n    formData: {},\n}\n\nconst airdropApproveState = {\n    airdropApproveTxHash: \"\",\n    airdropApproveError: \"\"\n}\n\nconst vipAirdropApproveState = {\n    vipAirdropApproveTxHash: \"\",\n    vipAirdropApproveError: \"\"\n}\n\nconst airdropState = {\n    claimAirdropTxHash: \"\"\n}\n\nexport const POST_FORM_DATA = 'POST_FORM_DATA'\nexport const APPROVE_AIRDROP = \"APPROVE_AIRDROP\"\nexport const APPROVE_VIP_AIRDROP = \"APPROVE_VIP_AIRDROP\"\nexport const CLAIM_AIRDROP = \"CLAIM_AIRDROP\"\nexport const UPDATE_ERROR_MESSAGE = \"UPDATE_ERROR_MESSAGE\"\nexport const RESET_TO_DEFAULT_STATE = \"RESET_TO_DEFAULT_STATE\"\n\nexport const reducer = (state = defaultState, action) => {\n    if (action.type === POST_FORM_DATA) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.formData = action.formData\n        return newState\n    }\n    return state\n}\n\nexport const airdropApproveReducer = (state = airdropApproveState, action) => {\n    if (action.type === APPROVE_AIRDROP) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.airdropApproveTxHash = action.airdropApproveTxHash\n        newState.airdropApproveError = \"\"\n        return newState\n    }\n\n    if (action.type === UPDATE_ERROR_MESSAGE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.airdropApproveTxHash = \"\"\n        newState.airdropApproveError = action.airdropApproveError\n        return newState\n    }\n\n    if (action.type === RESET_TO_DEFAULT_STATE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.airdropApproveTxHash = \"\"\n        newState.airdropApproveError = \"\"\n        return newState\n    }\n\n    return state\n}\n\n\nexport const vipAirdropApproveReducer = (state = vipAirdropApproveState, action) => {\n    if (action.type === APPROVE_VIP_AIRDROP) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.vipAirdropApproveTxHash = action.vipAirdropApproveTxHash\n        newState.vipAirdropApproveError = \"\"\n        return newState\n    }\n\n    if (action.type === UPDATE_ERROR_MESSAGE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.vipAirdropApproveTxHash = \"\"\n        newState.vipAirdropApproveError = action.vipAirdropApproveError\n        return newState\n    }\n\n    if (action.type === RESET_TO_DEFAULT_STATE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.vipAirdropApproveTxHash = \"\"\n        newState.vipAirdropApproveError = \"\"\n        return newState\n    }\n\n    return state\n}\n\nexport const claimAirdropReducer = (state = airdropState, action) => {\n    if (action.type === CLAIM_AIRDROP) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.claimAirdropTxHash = action.claimAirdropTxHash\n        return newState\n    }\n\n    if (action.type === RESET_TO_DEFAULT_STATE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.claimAirdropTxHash = \"\"\n        return newState\n    }\n\n    return state\n}","import { createStore } from 'redux'\nimport { reducer, airdropApproveReducer, vipAirdropApproveReducer, claimAirdropReducer } from './reducer'\n\nexport const store = createStore(reducer)\nexport const airdropApproveStore = createStore(airdropApproveReducer)\nexport const vipAirdropApproveStore = createStore(vipAirdropApproveReducer)\nexport const claimAirdropStore = createStore(claimAirdropReducer)\n\n","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport { usePostParticipation } from \"../api\"\nimport LoadingContent from \"../General/LoadingContent\"\nimport ErrorMessage from \"../General/ErrorMessage\"\nimport SuccessMessage from \"../General/SuccessMessage\"\nimport WarningMessage from '../General/WarningMessage'\nimport { store } from \"../store/store\"\n\ntype ParticipationProps = {\n    onDismiss: () => void\n}\n\nconst ParticipationModal = ({ onDismiss }: ParticipationProps) => {\n    const { formData } = store.getState()\n    const data = usePostParticipation(formData);\n\n    let comp;\n    if (data) {\n        if (data.error) {\n            comp = <ErrorMessage errorMessage={data.error} />\n        } else if (data.warning) {\n            comp = <WarningMessage waringMessage={data.warning} />\n        } else {\n            comp = <SuccessMessage />\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Modal title=\"Participation Submission\" onDismiss={onDismiss}>\n            <div>{comp}</div>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ParticipationModal","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { Card, CardHeader, Heading, Flex, Button, useModal, Text, Input, Link, InfoIcon } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport UnlockButton from \"components/UnlockButton\"\nimport validator from 'validator'\nimport ParticipationModal from \"../Modal/ParticipationModal\"\nimport { POST_FORM_DATA } from \"../store/reducer\"\nimport { store } from \"../store/store\"\n\nconst SECRET_TOKEN = process.env.REACT_APP_SECRET_TOKEN\n\nconst FormLayout = styled.form`\n    padding:30px;\n\n    @media (max-width: 768px) {\n        padding:20px\n    }\n`\n\nconst SubTitle = styled(Heading).attrs({ as: 'h4', size: 'md' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  marign: 20px;\n`\n\nconst FormCard = () => {\n    const { account } = useWallet();\n    const [twitterName, setTwitterName] = useState(\"\")\n    const [retweetUrl, setRetweetUrl] = useState(\"\")\n    const [telegramName, setTelegramName] = useState(\"\")\n    const [discordName, setDiscordName] = useState(\"\")\n    const [email, setEmail] = useState(\"example@gmail.com\")\n    const isTwitterNameValid = twitterName.trim().length > 0\n    const isRetweetUrlNotEmpty = retweetUrl.trim().length > 0\n    const isTelegramNameValid = telegramName.trim().length > 0\n    const isDiscordNameValid = discordName.trim().length > 0\n    const isRetweetUrlValid = validator.isURL(retweetUrl)\n    const isEmailValid = validator.isEmail(email)\n    const [isVerified, setIsVerified] = useState(false);\n    const [hover, setHover] = useState(false);\n\n    let RetweetUrlErrorMessageComp;\n\n    if (account) {\n        if (!isRetweetUrlNotEmpty) {\n            RetweetUrlErrorMessageComp = <Text color=\"failure\" fontSize=\"15px\" mt=\"5px\">Sorry! Please input your Retweet URL</Text>\n        } else if (!isRetweetUrlValid) {\n            RetweetUrlErrorMessageComp = <Text color=\"failure\" fontSize=\"15px\" mt=\"5px\">Sorry! Please input a valid Retweet URL</Text>\n        }\n    }\n\n    const submitForm = (event) => {\n        event.preventDefault();\n        const submittedData = {\n            \"walletAddress\": account,\n            \"twitterName\": twitterName,\n            \"retweetUrl\": retweetUrl,\n            \"telegramName\": telegramName,\n            \"discordName\": discordName,\n            \"email\": email,\n            \"isVerified\": isVerified\n        }\n        const action = {\n            type: POST_FORM_DATA,\n            formData: submittedData,\n        }\n        store.dispatch(action)\n        onPresentParticipationModal()\n    }\n\n    const onHover = () => {\n        setHover(true)\n    }\n\n    const onLeave = () => {\n        setHover(false);\n    };\n\n\n    const onChange = (value) => {\n        if (value) {\n            setIsVerified(true)\n        } else {\n            setIsVerified(false)\n        }\n\n    }\n\n    const [onPresentParticipationModal] = useModal(<ParticipationModal onDismiss={() => { return null }} />)\n\n    return (\n        <Card>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>AirDrop Participation Form</Heading>\n                </Flex>\n            </CardHeader>\n\n            <FormLayout onSubmit={(e) => submitForm(e)}>\n                <Text mb=\"10px\">* Required</Text>\n                <div style={{ marginBottom: \"20px\" }}>\n                    <SubTitle mb=\"10px\">Section 1: BlockChain</SubTitle>\n                    <Text mb=\"5px\">* What is your Wallet Address?</Text>\n                    <Input type=\"text\" value={account || \"\"} readOnly required placeholder=\"Your wallet address...\" isSuccess={account && account.length > 0} name=\"wallet_address\" />\n                </div>\n\n                <div style={{ marginBottom: \"20px\" }}>\n                    <SubTitle mb=\"10px\">Section 2: AirDrop Tasks</SubTitle>\n                    <div style={{ marginBottom: \"10px\" }}>\n                        <Text mb=\"5px\">* What is your Twitter Name?</Text>\n                        <Input type=\"text\" placeholder=\"Your Twitter Name...\" value={twitterName} onChange={(e) => setTwitterName(e.currentTarget.value)} required isSuccess={account && isTwitterNameValid} isWarning={account && !isTwitterNameValid} name=\"twitter_name\" />\n                        {\n                            account && !isTwitterNameValid ? <Text color=\"failure\" fontSize=\"15px\" mt=\"5px\">Sorry! Please input your Twitter Username</Text> : \"\"\n                        }\n                    </div>\n\n                    <div style={{ marginBottom: \"10px\" }}>\n                        <Text mb=\"5px\">* If your retweet our AirDrop Tweets, please enter the Retweet URL below.</Text>\n                        <Input placeholder=\"Your Retweeted URL...\" required value={retweetUrl} onChange={(e) => setRetweetUrl(e.currentTarget.value)} isSuccess={account && isRetweetUrlNotEmpty && isRetweetUrlValid} isWarning={account && (!isRetweetUrlNotEmpty || !isRetweetUrlValid)} name=\"retweet_url\" />\n                        {RetweetUrlErrorMessageComp}\n                    </div>\n\n                    <div style={{ marginBottom: \"10px\" }}>\n                        <Text mb=\"5px\">* What is your Telegram UserName in the group?</Text>\n                        <Input type=\"text\" placeholder=\"Your Telegram Name...\" value={telegramName} onChange={(e) => setTelegramName(e.currentTarget.value)} required isSuccess={account && isTelegramNameValid} isWarning={account && !isTelegramNameValid} name=\"telegram_name\" />\n                        {\n                            account && !isTelegramNameValid ? <Text color=\"failure\" fontSize=\"15px\" mt=\"5px\">Sorry! Please input your Telegram Username in the group</Text> : \"\"\n                        }\n                    </div>\n\n                    <div style={{ marginBottom: \"10px\" }}>\n                        <Text mb=\"5px\">* What is your Discord Name in the group?</Text>\n                        <Input type=\"text\" placeholder=\"Your Discord Name...\" value={discordName} onChange={(e) => setDiscordName(e.currentTarget.value)} required isSuccess={account && isDiscordNameValid} isWarning={account && !isDiscordNameValid} name=\"discord_name\" />\n                        {\n                            account && !isDiscordNameValid ? <Text color=\"failure\" fontSize=\"15px\" mt=\"5px\">Sorry! Please input your Discord Username in the group</Text> : \"\"\n                        }\n                    </div>\n\n                    <div style={{ marginBottom: \"10px\" }}>\n                        <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"10px\">\n                            <Text>If you are an early contributor, please enter your email address below.</Text>\n                            <InfoIcon onMouseMove={onHover} onMouseLeave={onLeave} style={{ cursor: \"pointer\" }} />\n                        </Flex>\n\n\n                        {\n                            hover && <Flex alignItems=\"start\" justifyContent=\"start\">\n                                <Text mb=\"5px\" mr=\"5px\">Note: Early contributors are paid members from</Text>\n                                <Link href=\"https://www.bitcoinleek.com\" target=\"_blank\">bitcoinleek.com</Link>\n                            </Flex>\n                        }\n\n                        <Input type=\"text\" placeholder=\"Your Email Address ...\" value={email} onChange={(e) => setEmail(e.currentTarget.value)} isSuccess={account && isEmailValid} isWarning={account && !isEmailValid} name=\"early_contributor\" />\n                        {\n                            account && !isEmailValid ? <Text color=\"failure\" fontSize=\"15px\" mt=\"5px\">Sorry! Please input a valid email address</Text> : \"\"\n                        }\n                    </div>\n                </div>\n\n                <ReCAPTCHA\n                    sitekey={SECRET_TOKEN}\n                    onChange={onChange}\n                />,\n\n                {\n                    account ? <Button type=\"submit\" fullWidth disabled={!(isTwitterNameValid && isTelegramNameValid && isDiscordNameValid && isRetweetUrlValid && isVerified)}> Participate</Button> : <UnlockButton fullWidth />\n                }\n\n            </FormLayout>\n        </Card>\n    )\n\n}\n\nexport default FormCard","const registerToken = async (\n    tokenAddress: string,\n    tokenSymbol: string,\n    tokenDecimals: number,\n    tokenImage?: string,\n) => {\n    const tokenAdded = await window.ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n            type: 'ERC20',\n            options: {\n                address: tokenAddress,\n                symbol: tokenSymbol,\n                decimals: tokenDecimals,\n                image: tokenImage,\n            },\n        },\n    })\n\n    return tokenAdded\n}\n\nexport default registerToken","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, Flex } from 'leek-uikit'\n\ninterface AirdropInfoHeaderProps {\n  airdropId: string\n  name: string\n  description: string\n}\n\nconst StyledAirdropInfoHeader = styled(Flex)`\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Name = styled(Heading).attrs({ as: 'h3', size: 'lg' })`\n  margin-bottom: 4px;\n  text-align: left;\n  margin-left: 20px;\n`\n\nconst Description = styled(Text)`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  text-align: left;\n  margin-left: 20px;\n`\n\n\nconst AirdropInfoHeader: React.FC<AirdropInfoHeaderProps> = ({ airdropId, name, description }) => {\n  return (\n    <StyledAirdropInfoHeader mb=\"24px\" alignItems=\"center\">\n      <img src={`./images/airdrop/token/${airdropId}.png`} alt={airdropId} width=\"50px\" height=\"50px\" />\n      <div>\n        <Name>{name}</Name>\n        <Description>{description}</Description>\n      </div>\n    </StyledAirdropInfoHeader>\n  )\n}\n\nexport default AirdropInfoHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Link } from 'leek-uikit'\nimport { getBlockInfo } from 'utils/chainExplorer'\nimport numeral from 'numeral'\n\ninterface AirdropInfoDetailsProps {\n    startBlock: number\n    endBlock: number\n    airdropAmount: number\n    vipAirdropAmount: number\n    remainingTokens: number\n    tokenName: string\n    totalAmount: number\n}\n\n\nconst StyledAirdropInfoDetails = styled.div`\n  margin-bottom: 24px;\n`\n\nconst Item = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.secondary};\n  display: flex;\n`\n\nconst Display = styled(Text)`\n  flex: 1;\n`\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst AirdropInfoDetails: React.FC<AirdropInfoDetailsProps> = ({\n    startBlock,\n    endBlock,\n    airdropAmount,\n    vipAirdropAmount,\n    remainingTokens,\n    totalAmount,\n    tokenName\n}) => {\n\n    return (\n        <>\n            <StyledAirdropInfoDetails>\n                <Item>\n                    <Display>Start Block</Display>\n                    <Text>\n                        <Link\n                            href={getBlockInfo(chainId, startBlock)}\n                            target=\"blank\"\n                            style={{ display: 'inline' }}\n                        >\n                            # {startBlock}\n                        </Link>\n                    </Text>\n                </Item>\n\n                <Item>\n                    <Display>End Block</Display>\n                    <Text>\n                        <Link\n                            href={getBlockInfo(chainId, endBlock)}\n                            target=\"blank\"\n                            style={{ display: 'inline' }}\n                        >\n                            # {endBlock}\n                        </Link>\n                    </Text>\n                </Item>\n\n                <Item>\n                    <Display>AirDrop Amount/Person</Display>\n                    <Text>\n                        {numeral(airdropAmount).format('0,0')} {tokenName}\n                    </Text>\n                </Item>\n\n                <Item>\n                    <Display>AirDrop Amount/VIP Person</Display>\n                    <Text>\n                        {numeral(vipAirdropAmount).format('0,0')} {tokenName}\n                    </Text>\n                </Item>\n\n                <Item>\n                    <Display>Total Airdrop Amount</Display>\n                    <Text>\n                        {numeral(totalAmount).format('0,0')} {tokenName}\n                    </Text>\n                </Item>\n\n                <Item>\n                    <Display>Remaining Amount</Display>\n                    <Text>\n                        {numeral(remainingTokens).format('0,0')} {tokenName}\n                    </Text>\n                </Item>\n            </StyledAirdropInfoDetails>\n        </>\n    )\n}\n\nexport default AirdropInfoDetails\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Progress } from 'leek-uikit'\n\ninterface IfoCardProgressProps {\n    progress: number\n}\n\nconst StyledProgress = styled.div`\n  margin-bottom: 16px;\n`\n\nconst AirdropProgress: React.FC<IfoCardProgressProps> = ({ progress }) => {\n    return (\n        <StyledProgress>\n            <Progress primaryStep={progress} />\n        </StyledProgress>\n    )\n}\n\nexport default AirdropProgress","import React from 'react'\nimport { Modal } from 'leek-uikit'\nimport LoadingContent from '../General/LoadingContent'\n\ntype ConfirmationPendingContentProps = { onDismiss: () => void }\n\nconst ConfirmationPendingContent = ({ onDismiss }: ConfirmationPendingContentProps) => {\n    return (\n        <Modal title=\"Waiting for confirmation\" onDismiss={onDismiss}>\n            <LoadingContent />\n        </Modal>\n    )\n}\n\nexport default ConfirmationPendingContent","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport { LinkExternal } from 'leek-uikit'\nimport { ArrowUpCircle } from 'react-feather'\nimport { getTranscationHash } from 'utils/chainExplorer'\nimport { AutoColumn, ColumnCenter } from './Column'\n\ntype TransactionMessageProps = {\n    transactionHash?: string\n}\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 40px 0;\n`\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst TransactionMessage: React.FC<TransactionMessageProps> = ({ transactionHash }) => {\n    const theme = useContext(ThemeContext)\n\n    return (\n        <div>\n            <ConfirmedIcon>\n                <ArrowUpCircle strokeWidth={0.5} size={97} color={theme.colors.primary} />\n            </ConfirmedIcon>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <LinkExternal href={getTranscationHash(chainId, transactionHash)}>View on PolygonScan</LinkExternal>\n            </AutoColumn>\n        </div>\n\n    )\n}\n\nexport default TransactionMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { airdropApproveStore } from \"../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst AirdropApproveTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { airdropApproveTxHash } = airdropApproveStore.getState()\n\n    return (\n        <Modal title=\"Transaction Submitted\" onDismiss={onDismiss}>\n            <TransactionMessage transactionHash={airdropApproveTxHash} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default AirdropApproveTransactionModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport ErrorMessage from '../General/ErrorMessage'\nimport { airdropApproveStore } from \"../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst ApproveErrorMessageModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { airdropApproveError } = airdropApproveStore.getState()\n\n    return (\n        <Modal title=\"Error Message\" onDismiss={onDismiss}>\n            <ErrorMessage errorMessage={airdropApproveError} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ApproveErrorMessageModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport ErrorMessage from '../General/ErrorMessage'\nimport { vipAirdropApproveStore } from \"../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst VipApproveErrorMessageModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { vipAirdropApproveError } = vipAirdropApproveStore.getState()\n\n    return (\n        <Modal title=\"Error Message\" onDismiss={onDismiss}>\n            <ErrorMessage errorMessage={vipAirdropApproveError} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default VipApproveErrorMessageModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { vipAirdropApproveStore } from \"../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst VipAirdropApproveTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { vipAirdropApproveTxHash } = vipAirdropApproveStore.getState()\n\n    return (\n        <Modal title=\"Transaction Submitted\" onDismiss={onDismiss}>\n            <TransactionMessage transactionHash={vipAirdropApproveTxHash} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default VipAirdropApproveTransactionModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { claimAirdropStore } from \"../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst ClaimAirdropTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { claimAirdropTxHash } = claimAirdropStore.getState()\n\n    return (\n        <Modal title=\"Transaction Submitted\" onDismiss={onDismiss}>\n            <TransactionMessage transactionHash={claimAirdropTxHash} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ClaimAirdropTransactionModal","import React from \"react\"\nimport styled from \"styled-components\"\nimport BigNumber from \"bignumber.js\"\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Card, CardHeader, Heading, Flex, Button, useModal, Text, LinkExternal, Box } from 'leek-uikit'\nimport { getChainExplorerUrl } from \"utils/chainExplorer\"\nimport UnlockButton from \"components/UnlockButton\"\nimport { useAirdropContract } from \"hooks/useContract\"\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { airdropConfig } from \"config/constants\"\nimport registerToken from \"utils/wallet\"\nimport AirdropInfoHeader from \"../General/AirdropInfoHeader\"\nimport AirdropInfoDetails from \"../General/AirdropInfoDetails\"\nimport AirdropProgress from \"../General/AirdropProgress\"\nimport ConfirmationPendingContent from \"../Modal/ConfirmationPendingModal\"\nimport AirdropApproveTransactionModal from \"../Modal/AirdropApproveTransactionModal\"\nimport ApproveErrorMessageModal from \"../Modal/ApproveErrorMessageModal\"\nimport VipApproveErrorMessageModal from \"../Modal/VipApproveErrorMessageModal\"\nimport VipAirdropApproveTransactionModal from \"../Modal/VipAirdropApproveTransactionModal\"\nimport ClaimAirdropTransactionModal from \"../Modal/ClaimAirdropTransactionModal\"\nimport { airdropApproveStore, vipAirdropApproveStore, claimAirdropStore } from \"../store/store\"\nimport { APPROVE_AIRDROP, APPROVE_VIP_AIRDROP, CLAIM_AIRDROP, UPDATE_ERROR_MESSAGE, RESET_TO_DEFAULT_STATE } from \"../store/reducer\"\nimport { useGetAirdropInfo, useGetAirdropList, updateAirdropParticipationStatus, useIsVIP, useIsWhiteListed } from \"../api\"\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\nconst CONTRACT_OWNER = process.env.REACT_APP_LOTTERY_OWNER\n\nconst InfoLayout = styled.div`\n    padding:30px;\n\n    @media (max-width: 768px) {\n        padding:20px\n    }\n`\n\nconst StyledInfoCard = styled(Card) <{ isOwner: boolean }>`\n  background-repeat: no-repeat;\n  background-size: contain;\n  max-height: ${({ isOwner }) => isOwner ? '580px' : '510px'}}\n  width: 100%;\n`\n\nconst InfoCard = () => {\n    const { id, name, description, tokenAddress, tokenDecimals, projectSiteUrl, totalAmount, isActive } = airdropConfig\n    const { account } = useWallet()\n    const address = tokenAddress[CHAIN_ID]\n    const isOwner = CONTRACT_OWNER === account\n    const { startBlock, endBlock, airdropAmount, vipAirdropAmount, remainingAmount } = useGetAirdropInfo()\n    const airdropNumber = getBalanceNumber(new BigNumber(airdropAmount))\n    const airdropVipNumber = getBalanceNumber(new BigNumber(vipAirdropAmount))\n    const remainingTokens = getBalanceNumber(new BigNumber(remainingAmount))\n    const progress = isActive ? (totalAmount - remainingTokens) / totalAmount * 100 : 0\n    const airdropList = useGetAirdropList(false)\n    const vipAirdropList = useGetAirdropList(true)\n    const contract = useAirdropContract()\n    const isVIP = useIsVIP(account);\n    const isWhitelisted = useIsWhiteListed(account)\n\n    const [onPresentConfirmationModal] = useModal(<ConfirmationPendingContent onDismiss={() => { return null }} />)\n    const [onPresentAirdropApproveModal] = useModal(<AirdropApproveTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentAirdropApproveErrorModal] = useModal(<ApproveErrorMessageModal onDismiss={() => { return null }} />)\n    const [onPresentVipAirdropApproveModal] = useModal(<VipAirdropApproveTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentVipAirdropApproveErrorModal] = useModal(<VipApproveErrorMessageModal onDismiss={() => { return null }} />)\n    const [onPresentClaimAirdropModal] = useModal(<ClaimAirdropTransactionModal onDismiss={() => { return null }} />)\n\n    const approveAirdropList = async () => {\n        onPresentConfirmationModal();\n        airdropApproveStore.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        if (airdropList.error) {\n            const action = {\n                type: UPDATE_ERROR_MESSAGE,\n                airdropApproveError: airdropList.error\n            }\n            airdropApproveStore.dispatch(action)\n            onPresentAirdropApproveErrorModal()\n        } else {\n            const result = await contract.methods.whitelist(airdropList).send({ from: account })\n            const action = {\n                type: APPROVE_AIRDROP,\n                airdropApproveTxHash: result.transactionHash\n            }\n            airdropApproveStore.dispatch(action)\n            onPresentAirdropApproveModal()\n            await updateAirdropParticipationStatus(false)\n        }\n    }\n\n    const vipApproveAirdropList = async () => {\n        onPresentConfirmationModal();\n        vipAirdropApproveStore.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        if (vipAirdropList.error) {\n            const action = {\n                type: UPDATE_ERROR_MESSAGE,\n                vipAirdropApproveError: vipAirdropList.error\n            }\n            vipAirdropApproveStore.dispatch(action)\n            onPresentVipAirdropApproveErrorModal()\n        } else {\n            const result = await contract.methods.whitelistVIP(vipAirdropList).send({ from: account })\n            const action = {\n                type: APPROVE_VIP_AIRDROP,\n                vipAirdropApproveTxHash: result.transactionHash\n            }\n            vipAirdropApproveStore.dispatch(action)\n            onPresentVipAirdropApproveModal()\n            await updateAirdropParticipationStatus(true)\n        }\n    }\n\n    const claimAirdrop = async () => {\n        onPresentConfirmationModal();\n        claimAirdropStore.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        if (isWhitelisted || isVIP) {\n            const result = await contract.methods.getAirdrop().send({ from: account })\n            const action = {\n                type: CLAIM_AIRDROP,\n                claimAirdropTxHash: result.transactionHash\n            }\n            claimAirdropStore.dispatch(action)\n            onPresentClaimAirdropModal()\n        }\n    }\n\n    return (\n        <StyledInfoCard isOwner={isOwner}>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>AirDrop Info</Heading>\n                </Flex>\n            </CardHeader>\n\n            <InfoLayout>\n                <AirdropInfoHeader airdropId={id} name={name} description={description} />\n                <AirdropProgress progress={progress} />\n                <AirdropInfoDetails startBlock={startBlock} endBlock={endBlock} airdropAmount={airdropNumber} vipAirdropAmount={airdropVipNumber} totalAmount={totalAmount} remainingTokens={remainingTokens} tokenName={name.toUpperCase()} />\n\n                <hr />\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <div>\n                        <LinkExternal mb=\"5px\" style={{ cursor: \"pointer\" }} href={getChainExplorerUrl(CHAIN_ID, address)}>View Token Contract</LinkExternal>\n                        <LinkExternal mb=\"5px\" style={{ cursor: \"pointer\" }} href={projectSiteUrl}>View Project Site</LinkExternal>\n                        {account && (\n                            <Flex justifyContent=\"flex-start\" alignItems=\"center\" mb=\"10px\" style={{ cursor: \"pointer\" }}>\n                                <Box\n                                    onClick={() => registerToken(address, name, tokenDecimals)}\n                                >\n                                    <Text color=\"primary\" bold fontSize=\"16px\" mr=\"5px\">\n                                        Add to Metamask\n                                    </Text>\n                                </Box>\n                                <img src=\"./images/metamask.svg\" alt=\"metamask\" width=\"20px\" />\n                            </Flex>\n                        )}\n                    </div>\n\n                    <div>\n                        {\n                            account ? <Button disabled={!isVIP && !isWhitelisted} onClick={claimAirdrop} fullWidth>Claim</Button> : <UnlockButton />\n                        }\n                        {\n                            account && !isVIP && !isWhitelisted && <Text color=\"failure\">* Please fill in the form first</Text>\n                        }\n                    </div>\n\n                </Flex>\n\n                {\n                    isOwner ?\n                        <div>\n                            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                                <Button onClick={approveAirdropList}>Approve</Button>\n                                <Button onClick={vipApproveAirdropList}>Approve VIP</Button>\n                            </Flex>\n                        </div> : \"\"\n                }\n\n\n            </InfoLayout>\n        </StyledInfoCard>\n    )\n\n}\n\nexport default InfoCard","import React from 'react'\nimport { Box, Flex, Heading, Image } from 'leek-uikit'\nimport styled from 'styled-components'\nimport Container from 'components/layout/Container'\n\nconst StyledHero = styled(Box)`\n background-image: linear-gradient(180deg, #c0cefa 20%, #c0fae3 100%);\n  padding-bottom: 32px;\n  padding-top: 32px;\n`\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\nconst DesktopImage = styled(Image)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n  }\n`\n\nconst Hero = () => {\n    return (\n        <StyledHero>\n            <Container>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Box pr=\"32px\">\n                        <Title>\n                            LeekDAO AirDrop\n                        </Title>\n                        <Heading mb=\"16px\">\n                            Join the LEEK Token AirDrop to Embrace the Future\n                        </Heading>\n                    </Box>\n                    <DesktopImage src=\"./images/airdrop/airdrop.png\" width={200} height={200} />\n                </Flex>\n            </Container>\n        </StyledHero >\n    )\n}\n\nexport default Hero","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, Heading, Link } from 'leek-uikit'\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 40px 0;\n  width: 100%;\n`\n\nconst StepContainer = styled(Flex)`\n  gap: 24px;\n  width: 100%;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst StyledStepCard = styled(Box)`\n  display: flex;\n  align-self: baseline;\n  position: relative;\n  background: ${({ theme }) => theme.colors.borderColor};\n  padding: 1px 1px 3px 1px;\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nconst InlineLink = styled(Link)`\n  display: inline;\n`\n\nconst StepCardInner = styled(Box)`\n  width: 100%;\n  padding: 24px;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nconst Title = styled(Heading).attrs({ as: 'h2', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\ntype Step = { title: string; subtitle: string; label: string }\n\nconst StepCard: React.FC<{ step: Step }> = ({ step }) => {\n    return (\n        <StyledStepCard width=\"100%\">\n            <StepCardInner height={['200px', '180px', null, '200px']}>\n                <Text mb=\"16px\" fontSize=\"15px\" bold textTransform=\"uppercase\" style={{ textAlign: \"right\" }}>\n                    {step.label}\n                </Text>\n                <Heading mb=\"16px\" fontSize=\"20px\" color=\"secondary\">\n                    {step.title}\n                </Heading>\n                <Text color=\"textSubtle\">{step.subtitle}</Text>\n            </StepCardInner>\n        </StyledStepCard>\n    )\n}\n\nconst HowToParticipate: React.FC = () => {\n    const steps: Step[] = [\n        {\n            label: \"Step 1\",\n            title: \"Fill in the Form\",\n            subtitle: 'Only the person whose DeGenScore is over 30 can have access to the airdrop.',\n        },\n        {\n            label: \"Step 2\",\n            title: \"Wait for the AirDrop\",\n            subtitle: 'The lucky draw will be open in person and regularly.',\n        },\n        {\n            label: \"Step 3\",\n            title: \"Check for Prizes\",\n            subtitle: \"Each round winner(s) will be displayed in public.\",\n        },\n    ]\n    return (\n        <Box width=\"100%\" style={{ marginBottom: \"30px\" }}>\n            <Flex mt=\"30px\" mb=\"40px\" alignItems=\"center\" flexDirection=\"column\">\n                <Title mb=\"24px\" fontSize=\"30px\" color=\"secondary\">\n                    How to Participate Our AirDrop?\n                </Title>\n            </Flex>\n            <StepContainer>\n                {steps.map((step) => (\n                    <StepCard key={step.label} step={step} />\n                ))}\n            </StepContainer>\n            <Divider />\n            <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection={['column', 'column', 'row']}>\n                <Flex maxWidth=\"100px\" mr=\"8px\" mb=\"16px\">\n                    <img src=\"./images/lottery/question.png\" alt=\"question\" />\n                </Flex>\n                <Flex maxWidth=\"300px\" flexDirection=\"column\">\n                    <Heading mb=\"16px\">\n                        Still got questions?\n                    </Heading>\n                    <Text>\n                        Check our in-depth guide on\n                        <InlineLink href=\"https://docs.leekdao.xyz\" marginLeft=\"5px\" target=\"_blank\">\n                            how to participate the LeekDAO Airdrop!\n                        </InlineLink>\n                    </Text>\n                </Flex>\n            </Flex>\n        </Box>\n    )\n}\n\nexport default HowToParticipate","import React from \"react\";\nimport styled from \"styled-components\";\nimport Container from \"components/layout/Container\";\nimport { BaseLayout, Flex, Heading } from \"leek-uikit\";\nimport FormCard from \"./AirdropCard/FormCard\";\nimport InfoCard from \"./AirdropCard/InfoCard\";\nimport Hero from \"./Hero\"\nimport HowToParticipate from \"./HowToParticipate\"\n\nconst ParticipationLayout = styled(BaseLayout)`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n  margin: 0 auto;\n  padding-left: 50px;\n  padding-right: 50px;\n  padding-top:50px;\n  padding-bottom:50px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media (max-width: 768px) {\n   padding:30px\n  }\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n\n\n\nconst Airdrop = () => {\n    return (\n        <div>\n            <Hero />\n            <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                <Heading size=\"xl\" color=\"secondary\" mt=\"40px\">\n                    Participate our AirDrop Right now!\n                </Heading>\n            </Flex>\n            <ParticipationLayout>\n                <FormCard />\n                <InfoCard />\n            </ParticipationLayout>\n\n            <Container>\n                <Divider />\n                <HowToParticipate />\n            </Container>\n        </div>\n    )\n}\n\nexport default Airdrop"],"sourceRoot":""}