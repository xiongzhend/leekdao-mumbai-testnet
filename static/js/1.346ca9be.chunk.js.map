{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","hooks/useWeb3.ts","hooks/useContract.ts","config/constants/ifo.ts","config/constants/index.ts","components/UnlockButton.tsx","utils/chainExplorer.ts","components/Input/Input.tsx","config/index.ts"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","urlProvider","NODE_URL","getNodeUrl","startsWith","Web3","providers","HttpProvider","timeout","WebsocketProvider","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useIfoContract","ifo","useVestingContract","vesting","useCake","getCakeAddress","erc20","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","ifos","tokenAddress","80001","137","idoAddress","isActive","name","mainToken","subTitle","startTime","endTime","salesAmount","projectSiteUrl","tokenDecimals","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","UnlockButton","props","comp","TranslateString","connect","reset","error","useWalletModal","onPresentConnectModal","onPresentWrongNetworkModal","onClick","variant","getChainExplorerUrl","chainId","ETHERSCAN_PREFIXES","getTranscationHash","hash","getBlockInfo","block","StyledInputWrapper","styled","div","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","BigNumber","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR"],"mappings":"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","file":"static/js/1.346ca9be.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getNodeUrl from 'utils/getRpcUrl'\n\nconst NODE_URL = getNodeUrl()\n\nlet urlProvider: any\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, { timeout: 10000 } as HttpProviderOptions)\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL)\n}\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || urlProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || urlProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport vesting from 'config/abi/vesting.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useVestingContract = (address: string) => {\n  const vestingAbi = (vesting as unknown) as AbiItem\n  return useContract(vestingAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import { Ifo } from './types'\n\nconst ifos: Ifo[] = [\n  {\n    id: 'leek',\n    tokenAddress: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    idoAddress: {\n      80001: '0x8AaE8746bCFaAC6AC2927C1C9099943B4de5d7f3',\n      137: '0x0E9B41A5D64de6B4BF6e086417E813Df21707748',\n    },\n    isActive: false,\n    name: 'LEEK',\n    mainToken: 'MATIC',\n    subTitle: 'A community driven crypto and knowledge sharing DAO powered by $LEEK Social Token',\n    startTime: 1625625327,\n    endTime: 1626625327,\n    salesAmount: 500000,\n    projectSiteUrl: '#',\n    tokenDecimals: 18,\n  },\n]\n\nexport default ifos\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import React from 'react'\nimport { Button, useWalletModal } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset, error } = useWallet()\n  const { onPresentConnectModal, onPresentWrongNetworkModal } = useWalletModal(connect, reset, error)\n  let comp\n  if (error) {\n    comp = (\n      <Button onClick={onPresentWrongNetworkModal} {...props} variant=\"danger\">\n        Wrong Network\n      </Button>\n    )\n  } else {\n    comp = (\n      <Button onClick={onPresentConnectModal} {...props}>\n        {TranslateString(292, 'Unlock Wallet')}\n      </Button>\n    )\n  }\n\n  return <div>{comp}</div>\n}\n\nexport default UnlockButton\n","import { ETHERSCAN_PREFIXES } from 'config'\n\nexport const getChainExplorerUrl = (chainId: string, address: string) => {\n    return `${ETHERSCAN_PREFIXES[chainId]}/address/${address}`\n}\n\nexport const getTranscationHash = (chainId: string, hash: string) => {\n    return `${ETHERSCAN_PREFIXES[chainId]}/tx/${hash}`\n}\n\nexport const getBlockInfo = (chainId: string, block: number) => {\n    return `${ETHERSCAN_PREFIXES[chainId]}/block/${block}`\n}","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(15768000)\nexport const BSC_BLOCK_TIME = 2\n\nexport const CAKE_POOL_PID = 1\nexport const ETHERSCAN_PREFIXES = {\n  137: 'https://polygonscan.com',\n  80001: 'https://mumbai.polygonscan.com'\n}\n\n"],"sourceRoot":""}