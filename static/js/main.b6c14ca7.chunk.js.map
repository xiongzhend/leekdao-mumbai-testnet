{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","state/actions.ts","components/layout/Container.tsx","contexts/Localisation/translationsContext.ts","components/layout/Page.tsx","config/constants/types.ts","utils/multicall.ts","config/constants/contracts.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/UrlConfig.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","leekPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","price","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","val","BNB","CAKE","plus","nodes","process","getNodeUrl","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","Container","styled","theme","mediaQueries","sm","defaultTranslationState","translations","setTranslations","TranslationsContext","Page","lg","PoolCategory","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","cake","137","80001","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","usdt","vesting","airdrop","getCakeAddress","addresses","chainId","getVestingAddress","getAirdropAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","pools","nonBnbPools","poolsConfig","filter","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingLeek","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","sliceNumber","risk","lpSymbol","contracts","USDT","slice","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","console","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","UrlConfig","config","label","icon","href","items","exchange","Menu","props","leekPrice","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","Lottery","Airdrop","Ifos","Proposals","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","strict","path","exact","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","ReactDOM","render","StrictMode","document","getElementById","urlProvider","NODE_URL","startsWith","Web3","providers","HttpProvider","timeout","WebsocketProvider","getContract","contractOptions"],"mappings":"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","file":"static/js/main.b6c14ca7.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n\n\n      }\n\n      const [info, totalAllocPoint, leekPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'leekPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        leekPerBlock: new BigNumber(leekPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingLeek',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // USDC-MATIC LP\n  const farm = useFarmFromPid(pid)\n  const price = new BigNumber(1)\n  return farm.tokenPriceVsQuote ? (new BigNumber(farm.tokenPriceVsQuote)).times(price) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0 // LEEK-USDC LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[0]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  idoAddress: Address\n  tokenAddress: Address\n  mainToken: string\n  name: string\n  subTitle?: string\n  description?: string\n  startTime: number\n  endTime: number\n  salesAmount: number\n  projectSiteUrl: string\n  tokenDecimals: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'MATIC',\n  'CAKE' = 'LEEK',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'USDC',\n  'TWT' = 'TWT',\n  'USDT' = 'USDT',\n  'ETH' = 'ETH'\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  80001?: string\n  137?: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n\nexport interface Airdrop {\n  id: string\n  isActive: boolean\n  tokenAddress: Address\n  name: string\n  description: string\n  projectSiteUrl: string\n  tokenDecimals: number\n  totalAmount: number\n}","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","export default {\n  cake: {\n    137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n  },\n  masterChef: {\n    137: '0xbACA38eCfE97Cc4D69a5Fc97456B5E034cA1CCA0',\n    80001: '0x141cca2cc6447Cd05c24D89b89F2351CA1B8D070',\n  },\n  wbnb: {\n    137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    80001: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n  },\n  lottery: {\n    137: '0xf5816E4607fFD115A9841901a0AA83439d16ca45',\n    80001: '0x6D4EB0268177151C3b24e83D46B61487d0397Dd9',\n  },\n  lotteryNFT: {\n    137: '',\n    80001: '',\n  },\n  mulltiCall: {\n    137: '0x7b00f6e0bc0F90d938de02Eb9174735FfCe17E56',\n    80001: '0xf9d5cea631006DDaF5D18640351D43CebF1eF97d',\n  },\n  busd: {\n    137: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n    80001: '0x5e2C319e51c7481CBE281A62be983c727dE577De',\n  },\n  eth: {\n    137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    80001: '',\n  },\n  usdt: {\n    137: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n    80001: '',\n  },\n  vesting: {\n    137: '0x287554F2f0ef03811e1cDc3067b4C4Ae96f726A8',\n    80001: '0x7968E3B3029E4d4c8fAc2D85EfaeA476a362AB75',\n  },\n  airdrop: {\n    137: \"\",\n    80001: \"0xe2CBdD7f4c866b8bcc5f96457056B0c61c92DF2a\"\n  }\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\n\nexport const getVestingAddress = () => {\n  return addresses.vesting[chainId]\n}\n\nexport const getAirdropAddress = () => {\n  return addresses.airdrop[chainId]\n}\n\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingLeek('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\nlet sliceNumber;\nif (chainId === \"80001\") {\n  sliceNumber = 3;\n} else {\n  sliceNumber = 7;\n}\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'LEEK-MATIC LP',\n    lpAddresses: {\n      80001: '0x0c532aec168ec6b00c5cdf64d074563db46aa85c',\n      137: '0x422F43A620E795E139183947851Fd914a11dD023',\n    },\n    tokenSymbol: 'LEEK',\n    tokenAddresses: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'LEEK-USDC LP',\n    lpAddresses: {\n      80001: '0x8cfd7f8fa7c824b8619fa2d0af5a01315537192c',\n      137: '0x6f447ba529007943E05fc678FB04A777816C81c0',\n    },\n    tokenSymbol: 'LEEK',\n    tokenAddresses: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: chainId === \"80001\" ? 'MATIC-USDC LP' : 'MATIC-USDC SLP',\n    lpAddresses: {\n      80001: '0xa35f833d37a6d44c15ebea2c7eceb0808e1ffdc3',\n      137: '0xcd353F79d9FADe311fC3119B841e1f456b54e858',\n    },\n    tokenSymbol: 'MATIC',\n    tokenAddresses: {\n      80001: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 3,\n    risk: 3,\n    lpSymbol: 'MATIC-USDT SLP',\n    lpAddresses: {\n      80001: '',\n      137: '0x55FF76BFFC3Cdd9D5FdbBC2ece4528ECcE45047e',\n    },\n    tokenSymbol: 'MATIC',\n    tokenAddresses: {\n      80001: '',\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.USDT,\n    quoteTokenAdresses: contracts.usdt,\n  },\n  {\n    pid: 4,\n    risk: 3,\n    lpSymbol: 'WETH-MATIC SLP',\n    lpAddresses: {\n      80001: '',\n      137: '0xc4e595acDD7d12feC385E5dA5D43160e8A0bAC0E',\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      80001: '',\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 5,\n    risk: 3,\n    lpSymbol: 'WETH-USDC SLP',\n    lpAddresses: {\n      80001: '',\n      137: '0x34965ba0ac2451A34a0471F04CCa3F990b8dea27',\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      80001: '',\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n].slice(0, sliceNumber)\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from 'leek-uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from 'leek-uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","const UrlConfig = {\n  \"137\": {\n    \"exchange\": \"https://exchange.leekdao.xyz/#/swap\",\n    \"pool\": \"https://exchange.leekdao.xyz/#/pool\",\n  },\n  \"80001\": {\n    \"exchange\": \"https://cryptoleek-team.github.io/leekdaoswap-mumbai-testnet/#/swap\",\n    \"pool\": \"https://cryptoleek-team.github.io/leekdaoswap-mumbai-testnet/#/pool\",\n  }\n}\n\nexport default UrlConfig","import { MenuEntry } from 'leek-uikit'\nimport UrlConfig from './UrlConfig'\n\nconst chainId: string = process.env.REACT_APP_CHAIN_ID || '80001'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: UrlConfig[chainId].exchange\n      },\n      {\n        label: 'Liquidity',\n        href: UrlConfig[chainId].pool\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'IDO',\n    icon: 'IfoIcon',\n    href: '/ido',\n  },\n  {\n    label: 'Vote',\n    icon: 'GroupsIcon',\n    href: '/vote',\n  },\n  {\n    label: 'Lucky Draw',\n    icon: 'TicketIcon',\n    href: '/lottery',\n  },\n  {\n    label: 'AirDrop',\n    icon: 'VaultsIcon',\n    href: '/airdrop',\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/cryptoleek-team',\n      },\n      {\n        label: 'Docs',\n        href: 'https://docs.leekdao.xyz/',\n      },\n      {\n        label: 'CryptoLeek Website',\n        href: 'https://www.bitcoinleek.com/',\n      },\n      {\n        label: 'LeekDAO Website',\n        href: 'https://leekdao.xyz/',\n      },\n    ],\n  },\n  // {\n  //   label: 'Partnerships/IFO',\n  //   icon: 'GooseIcon',\n  //   href: 'https://docs.google.com/forms/d/e/1FAIpQLSe7ycrw8Dq4C5Vjc9WNlRtTxEhFDB1Ny6jlAByZ2Y6qBo7SKg/viewform?usp=sf_link',\n  // },\n  // {\n  //   label: 'Audit by Hacken',\n  //   icon: 'AuditIcon',\n  //   href: 'https://www.goosedefi.com/files/hackenAudit.pdf',\n  // },\n  // {\n  //   label: 'Audit by CertiK',\n  //   icon: 'AuditIcon',\n  //   href: 'https://certik.org/projects/goose-finance',\n  // },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Menu as UikitMenu } from 'leek-uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset, error } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n  let leekPrice\n\n  if (cakePriceUsd.toNumber() === 0) {\n    leekPrice = new BigNumber(0)\n  } else {\n    leekPrice = cakePriceUsd.toNumber()\n  }\n\n  return (\n    <div>\n      <UikitMenu\n        account={account}\n        login={connect}\n        logout={reset}\n        isDark={isDark}\n        toggleTheme={toggleTheme}\n        currentLang={selectedLanguage && selectedLanguage.code}\n        langs={allLanguages}\n        setLang={setSelectedLanguage}\n        cakePriceUsd={leekPrice}\n        links={config}\n        priceLink=\"#\"\n        error={error}\n        {...props}\n      />\n\n    </div>\n\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from 'leek-uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from 'leek-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst Lottery = lazy(() => import('./views/Lottery'))\nconst Airdrop = lazy(() => import('./views/Airdrop'))\nconst Ifos = lazy(() => import('./views/Ifos'))\nconst Proposals = lazy(() => import('./views/Voting'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Exchange = lazy(() => import('./views/ComingSoon'))\n// const Liquidity = lazy(() => import('./views/ComingSoon'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route strict path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route strict path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/ido\">\n              <Ifos />\n            </Route>\n            <Route path=\"/vote\">\n              <Proposals />\n            </Route>\n            <Route path=\"/lottery\">\n              <Lottery />\n            </Route>\n            <Route path=\"/airdrop\">\n              <Airdrop />\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from 'leek-uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getNodeUrl from 'utils/getRpcUrl'\n\nconst NODE_URL = getNodeUrl()\n\nlet urlProvider: any\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, { timeout: 10000 } as HttpProviderOptions)\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL)\n}\n\nconst constUrlProvider = urlProvider\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(urlProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, constUrlProvider }\n"],"sourceRoot":""}