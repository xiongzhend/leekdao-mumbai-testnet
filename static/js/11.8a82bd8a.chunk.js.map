{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","hooks/useHarvest.ts","utils/erc20.ts","components/Tags.tsx","components/Input/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","utils/getLPUrl.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","getMainTokenBalance","multipliedBy","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","getContract","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","call","NoFeeTag","variant","outline","startIcon","CoreTag","props","width","color","mr","CommunityTag","VoteNowTag","SoonTag","ClosedTag","FlexLayout","styled","div","Wrapper","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","chainId","secondPart","getUrl","liquidityUrlPathParts","addresses","cake","process","wmatic","wbnb","token1","split","token2","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","useI18n","lpTokenUrl","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","height","flexDirection","useStake","onStake","console","info","useUnstake","onUnstake","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onChange","onSelectMax","depositFeeBP","toLocaleString","Input","endAdornment","placeholder","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","useModal","onPresentDeposit","onPresentWithdraw","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","useApprove","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","leekPerBlock","poolWeight","BLOCKS_PER_YEAR","comparedTo","Page","textAlign","target","getBlockInfo","exact"],"mappings":"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","file":"static/js/11.8a82bd8a.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const getMainTokenBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.multipliedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, VoteIcon, TimerIcon, BlockIcon } from 'leek-uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />}{...props}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = (props) => (\n  <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />}{...props}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nconst VoteNowTag = () => {\n  return (\n    <Tag variant=\"success\" startIcon={<VoteIcon />} >\n      Vote Now\n    </Tag>\n  )\n}\n\nconst SoonTag = () => {\n  return (\n    <Tag variant=\"binance\" startIcon={<TimerIcon />}>\n      Soon\n    </Tag>\n  )\n}\n\nconst ClosedTag = () => {\n  return (\n    <Tag variant=\"textDisabled\" startIcon={<BlockIcon />}>\n      Closed\n    </Tag >\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag, VoteNowTag, SoonTag, ClosedTag }\n","export { default } from './Input'\nexport type { InputProps } from './Input'\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'leek-uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst getUrl = (tokenAddresses, liquidityUrlPathParts) => {\n  const isLeekToken = addresses.cake[chainId] === tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const wmatic = addresses.wbnb[chainId]\n\n  let token1 = liquidityUrlPathParts.split(\"/\")[0]\n  let token2 = liquidityUrlPathParts.split(\"/\")[1]\n\n  if (token1 === wmatic) {\n    token1 = \"ETH\";\n  } else if (token2 === wmatic) {\n    token2 = \"ETH\";\n  }\n\n  if (chainId === \"80001\") {\n    return `https://cryptoleek-team.github.io/leekdaoswap-mumbai-testnet/#/add/${token1}/${token2}`\n  }\n\n  return isLeekToken ? `https://exchange.leekdao.xyz/#/add/${token1}/${token2}` : `https://app.sushi.com/add/${token1}/${token2}`\n}\n\nexport default getUrl","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from 'leek-uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport getUrl from 'utils/getLPUrl'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n\n  const lpTokenUrl = getUrl(tokenAddresses, liquidityUrlPathParts)\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `https://exchange.leekdao.xyz/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}` :\n              lpTokenUrl\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on PolygonScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from 'leek-uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`./images/farms/${farmImage}.png`} alt={tokenSymbol} width={75} height={75} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from 'leek-uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from 'leek-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          LEEK\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\nimport getUrl from \"utils/getLPUrl\"\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'LEEK per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={getUrl(tokenAddresses, liquidityUrlPathParts)}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from 'leek-uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from 'leek-uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'LEEK'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'LEEK' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://polygonscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://polygonscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading, Link, Flex } from 'leek-uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { getBlockInfo } from 'utils/chainExplorer'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.leekPerBlock || 1000000000000000000)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0.3) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'center' }}>\n        {tokenMode\n          ? TranslateString(10002, 'Stake tokens to earn LEEK')\n          : TranslateString(320, 'Stake LP tokens to earn LEEK')}\n      </Heading>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        {\n          chainId === \"137\" ? <Link target=\"blank\" href={getBlockInfo(chainId, 17086800)} >\n            <Heading as=\"h2\" color=\"secondary\" mb=\"10px\" style={{ textAlign: 'center' }}>\n              🔥🔥 The LP Farming will start at Block #17086800\n            </Heading>\n          </Link> : <Link target=\"blank\" href={getBlockInfo(chainId, 16652200)} >\n            <Heading as=\"h2\" color=\"secondary\" mb=\"10px\" style={{ textAlign: 'center' }}>\n              🔥🔥 The LP Farming will start at Block #16652200\n            </Heading>\n          </Link>\n        }\n\n      </Flex>\n      <Heading as=\"h2\" color=\"\" mb=\"10px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback LEEK')}\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"./images/leek/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}