{"version":3,"sources":["components/Input/index.ts","views/Lottery/Hero.tsx","views/Lottery/components/General/AddressInput.tsx","views/Lottery/components/General/Column.tsx","views/Lottery/store/reducer.tsx","views/Lottery/store/store.tsx","views/Lottery/api/index.ts","views/Lottery/components/General/LoadingContent.tsx","views/Lottery/components/General/ScoreDetails.tsx","views/Lottery/components/General/ErrorMessage.tsx","views/Lottery/components/Modal/DeGenScoreModal.tsx","views/Lottery/components/General/SuccessMessage.tsx","views/Lottery/components/Modal/ParticipationModal.tsx","views/Lottery/components/LotteryCard/LotteryCard.tsx","views/Lottery/components/General/Row.tsx","utils/truncateWalletAddress.ts","views/Lottery/components/General/ParticipantsListRow.tsx","views/Lottery/components/LotteryCard/ParticipationListCard.tsx","views/Lottery/components/General/TransactionMessage.tsx","views/Lottery/components/Modal/SetAddressTransactionModal.tsx","views/Lottery/components/Modal/LuckyDrawTransactionModal.tsx","views/Lottery/components/Modal/ConfirmationPendingModal.tsx","views/Lottery/components/Modal/WinnerNumberInputModal.tsx","views/Lottery/components/LotteryCard/LotteryResultCard.tsx","views/Lottery/components/HowToPlay.tsx","views/Lottery/components/General/HistoryTabMenu.tsx","views/Lottery/components/General/WinnersListRow.tsx","views/Lottery/components/LotteryCard/AllHistoryResultCard.tsx","views/Lottery/Lottery.tsx"],"names":["StyledHero","styled","Box","Title","Heading","attrs","as","size","theme","colors","primary","DesktopImage","Image","mediaQueries","lg","Hero","Container","alignItems","justifyContent","pr","mb","src","width","height","StyledSpacer","div","props","spacing","StyledTokenAdornmentWrapper","AddressInput","onSelectDefault","onChange","value","isAddressNull","address","style","marginBottom","Input","endAdornment","onClick","disabled","placeholder","Column","ColumnCenter","AutoColumn","gap","justify","defaultState","luckyDrawTx","error","addressTx","loadingState","isLoading","GET_LUCKY_DRAW_TRANSACTION_HASH","GET_ADDRESS_TRANSACTION_HASH","RESET_TO_DEFAULT_STATE","SET_LOADING_STATE_TRUE","SET_LOADING_STATE_FALSE","store","createStore","state","action","type","newState","JSON","parse","stringify","url","process","username","password","useSetParticipantsToContract","a","customUrl","useRefresh","slowRefresh","useEffect","dispatch","axios","post","auth","data","transactionHash","console","response","fetchData","useGetCurrentRound","contract","useLottery","useState","round","setRound","fastRefresh","methods","currentRound","call","rotate","keyframes","Spinner","img","ConfirmedIcon","CustomLightSpinner","LoadingContent","alt","SubTitle","LevelIcon","LevelIconDetails","ScoreDetails","level","score","toLowerCase","color","bold","fontSize","mt","toUpperCase","mr","Icon","ErrorMessage","errorMessage","DeGenScoreModal","comp","onDismiss","deGenScore","setDeGenScore","get","params","useGetScore","title","SuccessMessage","ParticipationModal","successData","setSuccessData","usePostParticipation","StyledLotteryCard","Card","secondary","LotteryCard","setAddress","account","useWallet","trim","length","isAddressValid","startsWith","useModal","onPresentDeGenScoreModal","onPresentParticipationModal","e","currentTarget","variant","UnlockButton","fullWidth","AddressColumn","ChoiceColumn","VotingPowerColumn","Row","Grid","borderColor","sm","truncateWalletAddress","startLength","endLength","substring","ParticipantsListRow","href","getChainExplorerUrl","ParticipationListCard","participationList","setParticipationList","useGetParticipationList","showAll","setShowAll","displayList","slice","py","map","item","wallet_address","wallet_score","wallet_level","textTransform","px","endIcon","TransactionMessage","useContext","ThemeContext","strokeWidth","getTranscationHash","SetAddressTransactionModal","getState","LuckyDrawTransactionModal","ConfirmationPendingContent","WinnerNumberInputModal","number","setNumber","onPresentLuckyDrawTransactionModal","onPresentConfrimationModal","isNumberValid","submitRequest","luckyDraw","send","from","result","parseInt","min","StyledResultCard","ResultContainer","LotteryResultCard","winners","setWinners","getWinners","roundWinners","useGetWinners","isOwner","onPresentSetAddressTransactionModal","onPresentWinnerNumberInputModal","isAddressSentToContract1","isAddressSentToContract2","padding","textAlign","lineHeight","Divider","StepContainer","Flex","md","StyledStepCard","radii","card","InlineLink","Link","StepCardInner","background","StepCard","step","label","subtitle","HowToPlay","flexDirection","maxWidth","marginLeft","HistoryTabMenu","setActiveIndex","activeIndex","WinnersListRow","AllHistoryResultCard","winnersList","setWinnersList","i","then","forEach","push","useFetchWinnersAndRound","sort","itemA","itemB","LotteryRoundContainer","CurrentLayout","BaseLayout","HistoryLayout","Lottery","historyTabMenuIndex","setHistoryTabMenuIndex","index"],"mappings":"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","file":"static/js/17.3b655ab6.chunk.js","sourcesContent":["export { default } from './Input'\nexport type { InputProps } from './Input'\n","import React from 'react'\nimport { Box, Flex, Heading, Image } from 'leek-uikit'\nimport styled from 'styled-components'\nimport Container from 'components/layout/Container'\n\nconst StyledHero = styled(Box)`\n background-image: linear-gradient(180deg, #c0f6fa 0%, #d9f8fa 100%);\n  padding-bottom: 32px;\n  padding-top: 32px;\n`\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\nconst DesktopImage = styled(Image)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n  }\n`\n\nconst Hero = () => {\n  return (\n    <StyledHero>\n      <Container>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Box pr=\"32px\">\n            <Title>\n              LeekDAO Lucky Draw\n            </Title>\n            <Heading mb=\"16px\">\n              Sometimes the Good Things in Life Do Come Easy\n            </Heading>\n          </Box>\n          <DesktopImage src=\"./images/lottery/luckyDraw.png\" width={250} height={250} />\n        </Flex>\n      </Container>\n    </StyledHero >\n  )\n}\n\nexport default Hero","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from 'leek-uikit'\nimport Input, { InputProps } from 'components/Input'\n\ninterface Props extends InputProps {\n    address?: string\n    onSelectDefault?: () => void\n}\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst AddressInput: React.FC<Props> = ({ onSelectDefault, onChange, value, address }) => {\n    const isAddressNull = address === null\n\n    return (\n        <div style={{ marginBottom: \"10px\" }}>\n            <Input\n                endAdornment={\n                    <StyledTokenAdornmentWrapper>\n                        <StyledSpacer />\n                        <div>\n                            <Button size=\"sm\" onClick={onSelectDefault} disabled={isAddressNull}>\n                                Default\n                            </Button>\n                        </div>\n                    </StyledTokenAdornmentWrapper>\n                }\n                placeholder=\"Enter your address here...\"\n                value={value}\n                onChange={onChange}\n            />\n        </div>\n    )\n}\n\nexport default AddressInput\n","import styled from 'styled-components'\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\nexport const ColumnCenter = styled(Column)`\n  width: 100%;\n  align-items: center;\n`\n\nexport const AutoColumn = styled.div<{\n    gap?: 'sm' | 'md' | 'lg' | string\n    justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\n}>`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\n  justify-items: ${({ justify }) => justify && justify};\n`\n\nexport default Column","const defaultState = {\n    luckyDrawTx: \"\",\n    error: \"\",\n    addressTx: \"\",\n}\n\nconst loadingState = {\n    isLoading: false\n}\n\nexport const GET_LUCKY_DRAW_TRANSACTION_HASH = 'GET_LUCKY_DRAW_TRANSACTION_HASH'\nexport const GET_ADDRESS_TRANSACTION_HASH = \"GET_ADDRESS_TRANSACTION_HASH\"\nexport const RESET_TO_DEFAULT_STATE = \"RESET_TO_DEFAULT_STATE\"\nexport const SET_LOADING_STATE_TRUE = \"SET_LOADING_STATE_TRUE\"\nexport const SET_LOADING_STATE_FALSE = \"SET_LOADING_STATE_FALSE\"\n\nexport const reducer = (state = defaultState, action) => {\n    if (action.type === GET_LUCKY_DRAW_TRANSACTION_HASH) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = action.luckyDrawTx\n        newState.addressTx = \"\"\n        newState.error = \"\"\n        return newState\n    }\n\n    if (action.type === GET_ADDRESS_TRANSACTION_HASH) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = \"\"\n        newState.addressTx = action.addressTx\n        newState.error = action.error\n        return newState\n    }\n\n    if (action.type === RESET_TO_DEFAULT_STATE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = \"\"\n        newState.addressTx = \"\"\n        newState.error = \"\"\n        return newState\n    }\n\n    return state\n}\n\nexport const loadingReducer = (state = loadingState, action) => {\n    if (action.type === SET_LOADING_STATE_TRUE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.isLoading = true\n        return newState\n    }\n\n    if (action.type === SET_LOADING_STATE_FALSE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.isLoading = false\n        return newState\n    }\n\n    return state;\n}\n\n","import { createStore } from 'redux'\nimport { reducer, loadingReducer } from './reducer'\n\nexport const store = createStore(reducer)\nexport const loadingStore = createStore(loadingReducer)","import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport useRefresh from 'hooks/useRefresh'\nimport { useLottery } from 'hooks/useContract'\nimport { store } from '../store/store'\nimport { GET_ADDRESS_TRANSACTION_HASH, RESET_TO_DEFAULT_STATE } from '../store/reducer'\n\nconst url = process.env.REACT_APP_API_URL;\nconst username = process.env.REACT_APP_API_USERNAME\nconst password = process.env.REACT_APP_API_PASSWORD\n\nexport interface ApiStatResponse {\n    score?: string\n    level?: string\n    error?: string\n}\n\nexport const useGetScore = (address) => {\n    const [deGenScore, setDeGenScore] = useState<ApiStatResponse | null>(null)\n    const customUrl = `${url}/luckyDraw`;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl, {\n                    params: {\n                        address\n                    }\n                })\n\n                setDeGenScore(data)\n            } catch (error) {\n                console.error('Unable to fetch data:', error.response)\n            }\n        }\n        fetchData()\n    }, [customUrl, address, setDeGenScore])\n\n    return deGenScore\n}\n\nexport const usePostParticipation = (address) => {\n    const [successData, setSuccessData] = useState(null);\n    const customUrl = `${url}/luckyDraw`;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.post(customUrl, {\n                    address,\n                },\n                    {\n                        auth: {\n                            username,\n                            password\n                        }\n                    }\n                )\n\n                setSuccessData(data)\n            } catch (error) {\n                console.error('Unable to fetch data:', error.response)\n            }\n        }\n        fetchData()\n    }, [customUrl, address, setSuccessData])\n\n    return successData\n}\n\nexport const useGetParticipationList = () => {\n    const [participationList, setParticipationList] = useState([])\n    const customUrl = `${url}/participationList`;\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl)\n                setParticipationList(data)\n            } catch (error) {\n                console.error('Unable to fetch data:', error.response)\n            }\n        }\n        fetchData()\n    }, [customUrl, setParticipationList, fastRefresh])\n    return participationList\n}\n\n\nexport const useSetParticipantsToContract = async () => {\n    const customUrl = `${url}/setAddress`;\n    const { slowRefresh } = useRefresh()\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                store.dispatch({ type: RESET_TO_DEFAULT_STATE })\n                const { data } = await axios.post(customUrl, {},\n                    {\n                        auth: {\n                            username,\n                            password\n                        }\n                    }\n                )\n                const action = {\n                    type: GET_ADDRESS_TRANSACTION_HASH,\n                    addressTx: data.transactionHash,\n                    error: data.error,\n                }\n                store.dispatch(action)\n\n            } catch (error) {\n                console.error('Unable to fetch data:', error.response)\n            }\n        }\n        fetchData()\n    }, [customUrl, slowRefresh])\n}\n\nexport const useGetWinners = () => {\n    const contract = useLottery();\n    const [winners, setWinners] = useState([]);\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const currentRound = await contract.methods.currentRound().call()\n                const roundWinners = await contract.methods.getWinners(currentRound - 1).call()\n\n                setWinners(roundWinners)\n            } catch (error) {\n                console.error('Unable to fetch data:', error.response)\n            }\n        }\n        fetchData()\n    }, [contract.methods, fastRefresh])\n    return winners\n}\n\n\nexport const useGetCurrentRound = () => {\n    const contract = useLottery();\n    const [round, setRound] = useState(1);\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const currentRound = await contract.methods.currentRound().call()\n\n                setRound(currentRound);\n            } catch (error) {\n                console.error('Unable to fetch data:', error.response)\n            }\n        }\n        fetchData()\n    }, [contract.methods, fastRefresh])\n    return round\n}\n\nexport const useFetchWinnersAndRound = (round) => {\n    const contract = useLottery();\n    const [winnersList, setWinnersList] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const winners = [];\n                for (let i = round; i > 0; i--) {\n                    contract.methods.getWinners(i - 1).call().then((data) => {\n                        data.forEach(item => {\n                            winners.push({\n                                \"address\": item,\n                                \"round\": i - 1\n                            })\n                        })\n                    })\n                }\n\n                setWinnersList(winners)\n\n            } catch (error) {\n                console.error('Unable to fetch winners data:', error.response)\n            }\n        }\n        fetchData()\n    }, [contract.methods, round])\n    return winnersList\n}\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { ColumnCenter } from \"./Column\"\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst Spinner = styled.img`\n  animation: 2s ${rotate} linear infinite;\n  width: 16px;\n  height: 16px;\n\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 40px 0;\n`\n\nconst CustomLightSpinner = styled(Spinner) <{ size: string }>`\n  height: ${({ size }) => size};\n  width: ${({ size }) => size};\n`\n\nconst LoadingContent = () => {\n  return (\n    <ConfirmedIcon>\n      <CustomLightSpinner src=\"./images/blue-loader.svg\" alt=\"loader\" size=\"90px\" />\n    </ConfirmedIcon>\n  )\n}\n\nexport default LoadingContent","import React from \"react\"\nimport { Heading, Flex, Text } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\nimport { ApiStatResponse } from \"../../api\"\n\nconst SubTitle = styled(Heading).attrs({ as: 'h4', size: 'md' })`\n  color: ${({ theme }) => theme.colors.primary};\n  marign: 20px;\n`\n\nconst LevelIcon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst LevelIconDetails = styled.img <{ width: string, height: string }>`\n  width: ${({ width }) => width};\n  height: ${({ height }) => height};\n`\n\nconst ScoreDetails: React.FC<ApiStatResponse> = ({ level, score }) => {\n  return (\n    <div>\n      <SubTitle>Your Score Level is:</SubTitle>\n      <LevelIcon>\n        <LevelIconDetails src={`./images/lottery/${level.toLowerCase()}.png`} alt=\"level\" width=\"100px\" height=\"70px\" />\n        <Text color=\"secondary\" bold fontSize=\"20px\" mt=\"5px\"> {level.toUpperCase()}</Text>\n      </LevelIcon>\n      <Flex alignItems=\"center\">\n        <SubTitle mr=\"20px\">Your Score is:</SubTitle>\n        <Text color=\"secondary\" bold fontSize=\"30px\"> {score}</Text>\n      </Flex>\n      <Flex alignItems=\"center\">\n        <SubTitle mr=\"20px\">Results:</SubTitle>\n        <Text color={level.toLowerCase() === \"bronze\" ? \"failure\" : \"success\"} bold fontSize=\"30px\">{level.toLowerCase() === \"bronze\" ? \"Unqualified\" : \"Qualified\"}</Text>\n      </Flex>\n    </div>\n  )\n}\n\nexport default ScoreDetails","import React from \"react\"\nimport { Text, ErrorIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\ntype ErrorMessageProps = {\n    errorMessage: string\n}\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ errorMessage }) => {\n    return (\n        <Icon>\n            <ErrorIcon color=\"failure\" width=\"60px\" />\n            <Text color=\"failure\" fontSize=\"20px\" mt=\"10px\">{errorMessage}</Text>\n        </Icon>\n    )\n}\n\nexport default ErrorMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport { useGetScore } from \"../../api\"\nimport LoadingContent from \"../General/LoadingContent\"\nimport ScoreDetails from \"../General/ScoreDetails\"\nimport ErrorMessage from \"../General/ErrorMessage\"\n\ntype DeGenScoreProps = {\n    address: string\n    onDismiss: () => void\n}\n\nconst DeGenScoreModal = ({ onDismiss, address }: DeGenScoreProps) => {\n    const data = useGetScore(address);\n    let comp;\n    if (data) {\n        if (data.error) {\n            comp = <ErrorMessage errorMessage={data.error} />\n        } else {\n            comp = <ScoreDetails score={data.score} level={data.level} />\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Modal title=\"DeGen Socre\" onDismiss={onDismiss}>\n            <div>{comp}</div>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default DeGenScoreModal","import React from \"react\"\nimport { Text, CheckmarkCircleIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst SuccessMessage: React.FC = () => {\n    return (\n        <Icon>\n            <CheckmarkCircleIcon color=\"success\" width=\"60px\" />\n            <Text color=\"success\" fontSize=\"20px\" mt=\"10px\">Thank you for your participation!</Text>\n        </Icon>\n    )\n}\n\nexport default SuccessMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport { usePostParticipation } from \"../../api\"\nimport LoadingContent from \"../General/LoadingContent\"\nimport ErrorMessage from \"../General/ErrorMessage\"\nimport SuccessMessage from \"../General/SuccessMessage\"\n\ntype ParticipationProps = {\n    address: string\n    onDismiss: () => void\n}\n\nconst ParticipationModal = ({ onDismiss, address }: ParticipationProps) => {\n    const data = usePostParticipation(address);\n\n    let comp;\n    if (data) {\n        if (data.error) {\n            comp = <ErrorMessage errorMessage={data.error} />\n        } else {\n            comp = <SuccessMessage />\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Modal title=\"Participation Submission\" onDismiss={onDismiss}>\n            <div>{comp}</div>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ParticipationModal","import React, { useState } from \"react\"\nimport { Card, Heading, Flex, Button, useModal, Text } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport styled from \"styled-components\"\nimport UnlockButton from \"components/UnlockButton\";\nimport AddressInput from \"../General/AddressInput\";\nimport DeGenScoreModal from \"../Modal/DeGenScoreModal\";\nimport ParticipationModal from \"../Modal/ParticipationModal\"\n\nconst StyledLotteryCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-size: contain;\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  width: 100%;\n  margin-top:30px;\n  margin-bottom:30px;\n`\n\nconst Title = styled(Heading).attrs({ as: 'h2', size: 'lg' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\nconst LotteryCard = () => {\n    const [address, setAddress] = useState(\"\");\n    const { account } = useWallet();\n    const isAddressNull = address.trim().length === 0\n    const isAddressValid = address.trim().length === 42 && address.startsWith(\"0x\")\n\n    const [onPresentDeGenScoreModal] = useModal(\n        <DeGenScoreModal onDismiss={() => { return null }} address={address} />,\n    )\n    const [onPresentParticipationModal] = useModal(\n        <ParticipationModal onDismiss={() => { return null }} address={address} />,\n    )\n\n    return (\n        <StyledLotteryCard>\n            <Title>Participate Form</Title>\n            <AddressInput\n                address={account}\n                value={address}\n                onChange={(e) => setAddress(e.currentTarget.value)}\n                onSelectDefault={() => setAddress(account)}\n            />\n            {!isAddressValid && !isAddressNull ? <Text color=\"failure\" mb=\"10px\">* Address Invalid. Please Provide a valid address</Text> : \"\"}\n            {\n                account ? <Flex justifyContent=\"space-between\">\n                    <Button variant=\"primary\" mr=\"8px\" disabled={!isAddressValid} onClick={onPresentDeGenScoreModal}>\n                        DeGen Score\n                    </Button>\n\n                    <Button variant=\"secondary\" mr=\"8px\" disabled={!isAddressValid} onClick={onPresentParticipationModal}>\n                        Participate\n                    </Button>\n                </Flex> :\n                    <UnlockButton fullWidth />\n            }\n        </StyledLotteryCard >\n    )\n\n}\n\nexport default LotteryCard\n\n","import styled from 'styled-components'\nimport { Grid, Box } from 'leek-uikit'\n\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\n  grid-area: address;\n`\n\nexport const ChoiceColumn = styled(Box)`\n  grid-area: choice;\n  overflow: hidden;\n`\n\nexport const VotingPowerColumn = styled(Box)`\n  justify-self: end;\n  grid-area: vote;\n`\n\nconst Row = styled(Grid)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.borderColor};\n  grid-gap: 8px;\n  grid-template-areas: 'address choice vote';\n  grid-template-columns: 2fr 1fr 1fr;\n  padding: 8px 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    padding: 16px 24px;\n  }\n`\n\nexport default Row","/**\n * Truncates a wallet's address\n */\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\n    return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateWalletAddress","import React from 'react'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { Flex, LinkExternal, Text } from 'leek-uikit'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\n\ninterface ListProps {\n    address: string,\n    level: string,\n    score: string\n}\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst ParticipantsListRow: React.FC<ListProps> = ({ address, level, score }) => {\n    return (\n        <Row>\n            <AddressColumn>\n                <Flex alignItems=\"center\">\n                    <LinkExternal href={getChainExplorerUrl(chainId, address)}>{truncateWalletAddress(address)}</LinkExternal>\n                </Flex>\n            </AddressColumn>\n            <ChoiceColumn>\n                <Text>{level}</Text>\n            </ChoiceColumn>\n            <VotingPowerColumn>\n                <Flex alignItems=\"center\" justifyContent=\"end\">\n                    {score}\n                </Flex>\n            </VotingPowerColumn>\n        </Row>\n    )\n}\n\nexport default ParticipantsListRow","import React, { useState } from 'react'\nimport {\n    Card,\n    CardHeader,\n    ChevronDownIcon,\n    Flex,\n    Heading,\n    Button,\n    ChevronUpIcon,\n    Text,\n} from 'leek-uikit'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../General/Row'\nimport { useGetParticipationList, useGetCurrentRound } from '../../api'\nimport ParticipantsListRow from \"../General/ParticipantsListRow\"\n\nconst LIST_PER_VIEW = 5\n\nconst ParticipationListCard: React.FC = () => {\n    const participationList = useGetParticipationList()\n    const [showAll, setShowAll] = useState(false)\n    const displayList = showAll ? participationList : participationList.slice(0, LIST_PER_VIEW)\n    const round = useGetCurrentRound();\n\n    const handleClick = () => {\n        setShowAll(!showAll)\n    }\n\n    let comp;\n    if (participationList.length === 0) {\n        comp = <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n            <Heading as=\"h5\">No Participants found</Heading>\n        </Flex>\n\n    } else {\n        comp = displayList.map((item) => (\n            <ParticipantsListRow key={item.wallet_address} address={item.wallet_address} score={item.wallet_score} level={item.wallet_level} />\n        ))\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Participation List ({participationList.length})</Heading>\n                    {\n                        round > 0 ? <Text>Current Round: #{round}</Text> : \"\"\n                    }\n                </Flex>\n            </CardHeader>\n\n            <Row>\n                <AddressColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Participator\n                    </Text>\n                </AddressColumn>\n                <ChoiceColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Level\n                    </Text>\n                </ChoiceColumn>\n                <VotingPowerColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        score\n                    </Text>\n                </VotingPowerColumn>\n            </Row>\n            {comp}\n            {\n                displayList.length > 0 && (<Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n                    <Button\n                        onClick={handleClick}\n                        variant=\"text\"\n                        endIcon={\n                            showAll ? (\n                                <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                            ) : (\n                                <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                            )\n                        }\n                    >\n                        {showAll ? \"Hide\" : \"See All\"}\n                    </Button>\n                </Flex>)\n            }\n        </Card>\n    )\n}\n\nexport default ParticipationListCard\n\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport { LinkExternal } from 'leek-uikit'\nimport { ArrowUpCircle } from 'react-feather'\nimport { getTranscationHash } from 'utils/chainExplorer'\nimport { AutoColumn, ColumnCenter } from './Column'\n\ntype TransactionMessageProps = {\n    transactionHash?: string\n}\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 40px 0;\n`\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst TransactionMessage: React.FC<TransactionMessageProps> = ({ transactionHash }) => {\n    const theme = useContext(ThemeContext)\n\n    return (\n        <div>\n            <ConfirmedIcon>\n                <ArrowUpCircle strokeWidth={0.5} size={97} color={theme.colors.primary} />\n            </ConfirmedIcon>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <LinkExternal href={getTranscationHash(chainId, transactionHash)}>View on PolygonScan</LinkExternal>\n            </AutoColumn>\n        </div>\n\n    )\n}\n\nexport default TransactionMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport ErrorMessage from \"../General/ErrorMessage\"\nimport LoadingContent from '../General/LoadingContent'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { useSetParticipantsToContract } from '../../api'\nimport { store } from \"../../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst SetAddressTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    useSetParticipantsToContract()\n    const state = store.getState();\n    let comp;\n\n    if (state.error && state.error.length > 0) {\n        comp = <ErrorMessage errorMessage={state.error} />\n    } else if (state.addressTx && state.addressTx.length > 0) {\n        comp = <TransactionMessage transactionHash={state.addressTx} />\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Modal title=\"Transaction Submission\" onDismiss={onDismiss}>\n            {comp}\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default SetAddressTransactionModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { store } from \"../../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst LuckyDrawTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { luckyDrawTx } = store.getState();\n\n    return (\n        <Modal title=\"Transaction Submitted\" onDismiss={onDismiss}>\n            <TransactionMessage transactionHash={luckyDrawTx} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default LuckyDrawTransactionModal","import React from 'react'\nimport { Modal } from 'leek-uikit'\nimport LoadingContent from '../General/LoadingContent'\n\ntype ConfirmationPendingContentProps = { onDismiss: () => void }\n\nconst ConfirmationPendingContent = ({ onDismiss }: ConfirmationPendingContentProps) => {\n    return (\n        <Modal title=\"Waiting for confirmation\" onDismiss={onDismiss}>\n            <LoadingContent />\n        </Modal>\n    )\n}\n\nexport default ConfirmationPendingContent","import React, { useState } from 'react'\nimport { Button, Modal, Flex, Input, Heading, useModal } from 'leek-uikit'\nimport { useLottery } from 'hooks/useContract'\nimport LuckyDrawTransactionModal from \"./LuckyDrawTransactionModal\"\nimport ConfirmationPendingContent from './ConfirmationPendingModal'\nimport { store } from \"../../store/store\"\nimport { GET_LUCKY_DRAW_TRANSACTION_HASH, RESET_TO_DEFAULT_STATE } from '../../store/reducer'\n\ntype WinnerNumberInputProps = {\n    onDismiss: () => void\n    account: string\n}\n\nconst WinnerNumberInputModal = ({ onDismiss, account }: WinnerNumberInputProps) => {\n    const [number, setNumber] = useState(0)\n    const [onPresentLuckyDrawTransactionModal] = useModal(<LuckyDrawTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentConfrimationModal] = useModal(<ConfirmationPendingContent onDismiss={() => { return null }} />)\n    const contract = useLottery();\n    const isNumberValid = number > 0\n\n\n    const submitRequest = async () => {\n        onPresentConfrimationModal();\n        store.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        const result = await contract.methods.luckyDraw(number).send({ from: account })\n        if (result) {\n            const action = {\n                type: GET_LUCKY_DRAW_TRANSACTION_HASH,\n                luckyDrawTx: result.transactionHash,\n            }\n            store.dispatch(action);\n            onPresentLuckyDrawTransactionModal();\n        }\n        return null;\n\n    }\n    return (\n        <Modal title=\"Set Winners Number\" onDismiss={onDismiss}>\n            <div>\n                <Heading color=\"primary\" size=\"md\" mb=\"10px\">Winners Number of this Round:</Heading>\n                <div>\n                    <Input\n                        placeholder=\"Enter Winners Number...\"\n                        type=\"number\"\n                        value={number}\n                        onChange={(e) => setNumber(parseInt(e.currentTarget.value))}\n                        min=\"0\" />\n                </div>\n            </div>\n\n\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                <Button onClick={submitRequest} mt=\"20px\" disabled={!isNumberValid}>\n                    Submit\n                </Button>\n                <Button variant=\"secondary\" onClick={onDismiss} mt=\"20px\" >\n                    Close\n                </Button>\n            </Flex>\n        </Modal>\n    )\n}\n\nexport default WinnerNumberInputModal","import React from 'react'\nimport {\n    Card,\n    CardHeader,\n    Flex,\n    Heading,\n    LinkExternal,\n    Button,\n    useModal,\n    Text,\n} from 'leek-uikit'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport styled from \"styled-components\"\nimport SetAddressTransactionModal from '../Modal/SetAddressTransactionModal'\nimport WinnerNumberInputModal from '../Modal/WinnerNumberInputModal'\nimport { ColumnCenter } from \"../General/Column\"\nimport { useGetCurrentRound, useGetWinners } from '../../api'\nimport { store } from \"../../store/store\"\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst StyledResultCard = styled(Card) <{ size: number }>`\n  background-repeat: no-repeat;\n  background-size: contain;\n  max-height: ${({ size }) => size}px;\n  width: 100%;\n`\n\nconst ResultContainer = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst LOTTERY_OWNER = process.env.REACT_APP_LOTTERY_OWNER\n\nconst LotteryResultCard: React.FC = () => {\n    const winners = useGetWinners()\n    const round = useGetCurrentRound();\n    const { account } = useWallet();\n    const isOwner = LOTTERY_OWNER === account\n    const [onPresentSetAddressTransactionModal] = useModal(<SetAddressTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentWinnerNumberInputModal] = useModal(<WinnerNumberInputModal onDismiss={() => { return null }} account={account} />)\n    const state = store.getState();\n    const isAddressSentToContract1 = state.error === \"No new participants attended\"\n    const isAddressSentToContract2 = state.addressTx && state.addressTx.length > 0\n\n\n    let comp;\n\n    if (winners && winners.length > 0) {\n        comp = <div>\n            <Heading color=\"primary\">Congratulations! {winners.length === 1 ? \"Winner is:\" : \"Winners are\"}</Heading>\n            <ResultContainer>\n                {\n                    winners.map((item) => (\n                        <LinkExternal key={item} href={getChainExplorerUrl(chainId, item)} fontSize=\"18px\"> 🏆 {truncateWalletAddress(item)}</LinkExternal>\n                    ))\n                }\n\n            </ResultContainer>\n        </div>\n    } else {\n        comp = <Flex alignItems=\"center\" justifyContent=\"center\" padding=\"20px\">\n            <Heading as=\"h5\" style={{ textAlign: \"center\", lineHeight: \"1.5\" }}>No winners Found. Let us expect who will be the winner.</Heading>\n        </Flex>\n\n    }\n\n    return (\n        <StyledResultCard size={250 + winners.length * 25}>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Last Round Winner(s)</Heading>\n                    {\n                        round > 0 ? <Text>Round: #{round - 1}</Text> : \"\"\n                    }\n\n                </Flex>\n            </CardHeader>\n\n            <div style={{ padding: \"20px\" }}>\n                {comp}\n                {\n                    isOwner && (\n\n                        <div>\n                            <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"20px\">\n                                <Button onClick={onPresentSetAddressTransactionModal} disabled={isAddressSentToContract1 || isAddressSentToContract2}>Approve</Button>\n                                <Button onClick={onPresentWinnerNumberInputModal} disabled={!isAddressSentToContract1 && !isAddressSentToContract2}>Lucky Draw</Button>\n                            </Flex>\n                        </div>\n                    )\n                }\n            </div>\n\n        </StyledResultCard>\n    )\n}\n\nexport default LotteryResultCard","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, Heading, Link } from 'leek-uikit'\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 40px 0;\n  width: 100%;\n`\n\nconst StepContainer = styled(Flex)`\n  gap: 24px;\n  width: 100%;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst StyledStepCard = styled(Box)`\n  display: flex;\n  align-self: baseline;\n  position: relative;\n  background: ${({ theme }) => theme.colors.borderColor};\n  padding: 1px 1px 3px 1px;\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nconst InlineLink = styled(Link)`\n  display: inline;\n`\n\nconst StepCardInner = styled(Box)`\n  width: 100%;\n  padding: 24px;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nconst Title = styled(Heading).attrs({ as: 'h2', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\ntype Step = { title: string; subtitle: string; label: string }\n\nconst StepCard: React.FC<{ step: Step }> = ({ step }) => {\n    return (\n        <StyledStepCard width=\"100%\">\n            <StepCardInner height={['200px', '180px', null, '200px']}>\n                <Text mb=\"16px\" fontSize=\"15px\" bold textTransform=\"uppercase\" style={{ textAlign: \"right\" }}>\n                    {step.label}\n                </Text>\n                <Heading mb=\"16px\" fontSize=\"20px\" color=\"secondary\">\n                    {step.title}\n                </Heading>\n                <Text color=\"textSubtle\">{step.subtitle}</Text>\n            </StepCardInner>\n        </StyledStepCard>\n    )\n}\n\nconst HowToPlay: React.FC = () => {\n    const steps: Step[] = [\n        {\n            label: \"Step 1\",\n            title: \"Fill in the Form\",\n            subtitle: 'Only the person whose DeGenScore is over 30 can have access to this game.',\n        },\n        {\n            label: \"Step 2\",\n            title: \"Wait for the Draw\",\n            subtitle: 'The lucky draw will be open in person and regularly.',\n        },\n        {\n            label: \"Step 3\",\n            title: \"Check for Prizes\",\n            subtitle: \"Each round winner(s) will be displayed in public.\",\n        },\n    ]\n    return (\n        <Box width=\"100%\" style={{ marginBottom: \"30px\" }}>\n            <Flex mt=\"30px\" mb=\"40px\" alignItems=\"center\" flexDirection=\"column\">\n                <Title mb=\"24px\" fontSize=\"30px\" color=\"secondary\">\n                    How to Play\n                </Title>\n                <Text>It is a very simple game! But you will receive satisified returns</Text>\n            </Flex>\n            <StepContainer>\n                {steps.map((step) => (\n                    <StepCard key={step.label} step={step} />\n                ))}\n            </StepContainer>\n            <Divider />\n            <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection={['column', 'column', 'row']}>\n                <Flex maxWidth=\"100px\" mr=\"8px\" mb=\"16px\">\n                    <img src=\"/images/lottery/question.png\" alt=\"question\" />\n                </Flex>\n                <Flex maxWidth=\"300px\" flexDirection=\"column\">\n                    <Heading mb=\"16px\">\n                        Still got questions?\n                    </Heading>\n                    <Text>\n                        Check our in-depth guide on\n                        <InlineLink href=\"https://docs.leekdao.xyz\" marginLeft=\"5px\">\n                            how to play the LeekDAO Lucky Draw!\n                        </InlineLink>\n                    </Text>\n                </Flex>\n            </Flex>\n        </Box>\n    )\n}\n\nexport default HowToPlay","import React from 'react'\nimport { ButtonMenu, ButtonMenuItem } from 'leek-uikit'\n\nconst HistoryTabMenu = ({ setActiveIndex, activeIndex }) => {\n    return (\n        <ButtonMenu activeIndex={activeIndex} onClick={setActiveIndex} size=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>Round Info</ButtonMenuItem>\n            <ButtonMenuItem>History Winners</ButtonMenuItem>\n        </ButtonMenu>\n    )\n}\n\nexport default HistoryTabMenu","import React from 'react'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { Flex, LinkExternal, Text } from 'leek-uikit'\nimport Row, { AddressColumn, VotingPowerColumn } from './Row'\n\ninterface ListProps {\n    address: string,\n    round: number\n}\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst WinnersListRow: React.FC<ListProps> = ({ address, round }) => {\n    return (\n        <Row>\n            <AddressColumn>\n                <Flex alignItems=\"center\">\n                    <LinkExternal href={getChainExplorerUrl(chainId, address)}>{truncateWalletAddress(address)}</LinkExternal>\n                </Flex>\n            </AddressColumn>\n            <VotingPowerColumn>\n                <Flex alignItems=\"center\" justifyContent=\"end\">\n                    <Text>Round: #{round}</Text>\n                </Flex>\n            </VotingPowerColumn>\n        </Row>\n    )\n}\n\nexport default WinnersListRow","import React, { useState } from 'react'\nimport {\n    Card,\n    CardHeader,\n    ChevronDownIcon,\n    Flex,\n    Heading,\n    Button,\n    ChevronUpIcon,\n    Text,\n} from 'leek-uikit'\nimport Row, { AddressColumn, VotingPowerColumn } from '../General/Row'\nimport WinnersListRow from \"../General/WinnersListRow\"\nimport { useGetCurrentRound, useFetchWinnersAndRound } from '../../api'\n\nconst LIST_PER_VIEW = 5\n\nconst AllHistoryResultCard: React.FC = () => {\n    const round = useGetCurrentRound()\n    const winnersList = useFetchWinnersAndRound(round).sort((itemA, itemB) => itemB.round - itemA.round);\n    const [showAll, setShowAll] = useState(false)\n    const displayList = showAll ? winnersList : winnersList.slice(0, LIST_PER_VIEW)\n\n    const handleClick = () => {\n        setShowAll(!showAll)\n    }\n    let comp;\n\n    if (displayList.length === 0) {\n        comp = <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n            <Heading as=\"h5\">No Winners found</Heading>\n        </Flex>\n    } else {\n        comp = displayList.map((item) => (\n            <WinnersListRow key={item.address} address={item.address} round={item.round} />\n        ))\n    }\n    return (\n        <Card>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Lucky Draw Winners History Results</Heading>\n                </Flex>\n            </CardHeader>\n\n            <Row>\n                <AddressColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Lucky Draw Winner Address\n                    </Text>\n                </AddressColumn>\n                <VotingPowerColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Round No\n                    </Text>\n                </VotingPowerColumn>\n            </Row>\n            {comp}\n            {\n                displayList.length > 0 && (<Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n                    <Button\n                        onClick={handleClick}\n                        variant=\"text\"\n                        endIcon={\n                            showAll ? (\n                                <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                            ) : (\n                                <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                            )\n                        }\n                    >\n                        {showAll ? \"Hide\" : \"See All\"}\n                    </Button>\n                </Flex>)\n            }\n        </Card>\n    )\n}\n\nexport default AllHistoryResultCard","import React, { useState } from \"react\";\nimport { BaseLayout, Box, Flex, Heading } from \"leek-uikit\";\nimport Container from \"components/layout/Container\";\nimport styled from \"styled-components\";\nimport Hero from \"./Hero\";\nimport LotteryCard from \"./components/LotteryCard/LotteryCard\";\nimport ParticipationListCard from \"./components/LotteryCard/ParticipationListCard\"\nimport LotteryResultCard from \"./components/LotteryCard/LotteryResultCard\"\nimport HowToPlay from \"./components/HowToPlay\"\nimport HistoryTabMenu from \"./components/General/HistoryTabMenu\";\nimport AllHistoryResultCard from \"./components/LotteryCard/AllHistoryResultCard\"\n\nconst LotteryRoundContainer = styled.div`\n background-image:linear-gradient(180deg, #CBD7EF 0%, #9A9FD0 100%);\n`\n\nconst CurrentLayout = styled(BaseLayout)`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n  margin: 0 auto;\n  padding-left: 150px;\n  padding-right: 150px;\n  padding-top:50px;\n  padding-bottom:50px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1.3fr 1fr;\n  }\n\n  @media (max-width: 768px) {\n   padding:30px\n  }\n`\n\nconst HistoryLayout = styled(Container)`\n  margin: 0 auto;\n  padding-left: 150px;\n  padding-right: 150px;\n  padding-top:50px;\n  padding-bottom:50px;\n\n  @media (max-width: 768px) {\n   padding:30px\n  }\n`\n\nconst Lottery = () => {\n    const [historyTabMenuIndex, setHistoryTabMenuIndex] = useState(0)\n    return (\n        <div>\n            <Hero />\n            <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                <Heading size=\"xl\" color=\"secondary\" mt=\"40px\">\n                    Participate Lucky Draw Right now!\n                </Heading>\n            </Flex>\n            <LotteryCard />\n            <LotteryRoundContainer>\n                <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                    <Heading mt=\"24px\" size=\"xl\">\n                        Lucky Draw Results\n                    </Heading>\n                    <Box mt=\"30px\">\n                        <HistoryTabMenu\n                            activeIndex={historyTabMenuIndex}\n                            setActiveIndex={(index) => setHistoryTabMenuIndex(index)} />\n                    </Box>\n                </Flex>\n\n                {historyTabMenuIndex === 0 ? <CurrentLayout>\n                    <ParticipationListCard />\n                    <LotteryResultCard />\n                </CurrentLayout> :\n                    <HistoryLayout>\n                        <AllHistoryResultCard />\n                    </HistoryLayout>\n                }\n\n            </LotteryRoundContainer>\n\n            <Container>\n                <HowToPlay />\n            </Container>\n        </div>\n    )\n}\n\nexport default Lottery"],"sourceRoot":""}