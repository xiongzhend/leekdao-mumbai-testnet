{"version":3,"sources":["utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/contracts.ts","config/constants/farms.ts","utils/web3.ts","utils/multicall.ts","state/farms/fetchFarms.ts","state/farms/index.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","state/hooks.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx"],"names":["nodes","process","getNodeUrl","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","a","prev","clearInterval","Provider","value","useRefresh","useContext","fastRefresh","slowRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","div","theme","mediaQueries","sm","Page","lg","QuoteToken","PoolCategory","getCakeAddress","addresses","cake","chainId","getMasterChefAddress","masterChef","getVestingAddress","vesting","getMulticallAddress","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","pools","137","80001","busd","farms","pid","risk","lpSymbol","lpAddresses","tokenSymbol","tokenAddresses","quoteTokenSymbol","BUSD","quoteTokenAdresses","contracts","BNB","urlProvider","NODE_URL","startsWith","Web3","providers","HttpProvider","timeout","WebsocketProvider","getWeb3","multicall","abi","calls","web3","multi","eth","Contract","MultiCallAbi","itf","Interface","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","methods","aggregate","returnData","res","i","decodeFunctionResult","fetchFarms","Promise","all","farmsConfig","farmConfig","lpAdress","CHAIN_ID","isTokenOnly","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","pow","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","leekPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","farm","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","poolsConfig","filter","p","stakingTokenName","sousId","masterChefABI","PoolsSlice","setPoolsPublicData","livePoolsData","pool","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","ZERO","useFetchPublicData","dispatch","useDispatch","useFarmFromPid","useSelector","usePriceCakeBusd","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","length","catch","e","console","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","leekPrice","useWallet","account","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","Ifos","Proposals","NotFound","Exchange","Liquidity","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","strict","path","exact","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a6807ce.chunk.js","sourcesContent":["import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  // const randomIndex = random(0, nodes.length - 1)\n  return nodes[0]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  idoAddress: Address\n  tokenAddress: Address\n  mainToken: string\n  name: string\n  subTitle?: string\n  description?: string\n  startTime: number\n  endTime: number\n  salesAmount: number\n  projectSiteUrl: string\n  tokenDecimals: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'MATIC',\n  'CAKE' = 'SUSHI',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'USDT',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  80001?: string\n  137?: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\n\nexport const getVestingAddress = () => {\n  return addresses.vesting[chainId]\n}\n\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","export default {\n  cake: {\n    137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n  },\n  masterChef: {\n    137: '0x8eA6bEE665c2cC4AA0098F2Cc2Da46Dc1601A8d7',\n    80001: '0x345640DA8e87e8aEdf1a0Cd9623cbc771D962081',\n  },\n  wbnb: {\n    137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    80001: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n  },\n  lottery: {\n    137: '',\n    80001: '',\n  },\n  lotteryNFT: {\n    137: '',\n    80001: '',\n  },\n  mulltiCall: {\n    137: '0x7b00f6e0bc0F90d938de02Eb9174735FfCe17E56',\n    80001: '0xf9d5cea631006DDaF5D18640351D43CebF1eF97d',\n  },\n  busd: {\n    137: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n    80001: '0x3a93603cEe693674826DF627E1f3fe37b9F8B0c4',\n  },\n  vesting: {\n    137: '0x287554F2f0ef03811e1cDc3067b4C4Ae96f726A8',\n    80001: '0x7968E3B3029E4d4c8fAc2D85EfaeA476a362AB75',\n  },\n}\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'LEEK-USDT LP',\n    lpAddresses: {\n      80001: '0xe8f118eb4aeb823cb292336f541ed4c75adfa71e',\n      137: '0xaaAdb74F10BADe6f54fABd181efe13DB6c6d1A22',\n    },\n    tokenSymbol: 'LEEK',\n    tokenAddresses: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0xB82f7f11188ACbc90D6ABd621CD2C338c3C75eA2',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'LEEK-MATIC LP',\n    lpAddresses: {\n      80001: '0x0c532aec168ec6b00c5cdf64d074563db46aa85c',\n      137: '0x113AcAd027141bB6252Bb2Baeb66C8DFbA16E8Af',\n    },\n    tokenSymbol: 'LEEK',\n    tokenAddresses: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0xB82f7f11188ACbc90D6ABd621CD2C338c3C75eA2',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'MATIC-USDT LP',\n    lpAddresses: {\n      80001: '0xa75a44a1d06c11e7cd0764fc4905a4a09982353b',\n      137: '0x085Fe343aaF4B049B54dc68AB47c2121c70763E9',\n    },\n    tokenSymbol: 'MATIC',\n    tokenAddresses: {\n      80001: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n]\n\nexport default farms\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getNodeUrl from 'utils/getRpcUrl'\n\nconst NODE_URL = getNodeUrl()\n\nlet urlProvider: any\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, { timeout: 10000 } as HttpProviderOptions)\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL)\n}\n\nconst constUrlProvider = urlProvider\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(urlProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, constUrlProvider }\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  // console.log(\">>>>>>>>>>>>>>>>\",multi);\n  const itf = new Interface(abi)\n  // console.log(\"============\",itf)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n      }\n\n      const [info, totalAllocPoint, leekPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'leekPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        leekPerBlock: new BigNumber(leekPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingLeek('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0 // EGG-BUSD LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from 'leek-uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from 'leek-uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from 'leek-uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: '/swap',\n      },\n      {\n        label: 'Liquidity',\n        href: '/pool',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'IDO',\n    icon: 'IfoIcon',\n    href: '/ido',\n  },\n  {\n    label: 'Vote',\n    icon: 'GroupsIcon',\n    href: '/vote',\n  },\n  // {\n  //   label: 'Nests',\n  //   icon: 'PoolIcon',\n  //   href: '/nests',\n  // },\n  // {\n  //   label: 'Pools',\n  //   icon: 'PoolIcon',\n  //   href: '/pools',\n  // },\n  // {\n  //   label: 'Lottery',\n  //   icon: 'TicketIcon',\n  //   href: '/lottery',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  // {\n  //   label: 'Info',\n  //   icon: 'InfoIcon',\n  //   items: [\n  //     {\n  //       label: 'PancakeSwap',\n  //       href: 'https://pancakeswap.info/token/0xF952Fc3ca7325Cc27D15885d37117676d25BfdA6',\n  //     },\n  //     {\n  //       label: 'CoinGecko',\n  //       href: 'https://www.coingecko.com/en/coins/goose-finance',\n  //     },\n  //     {\n  //       label: 'CoinMarketCap',\n  //       href: 'https://coinmarketcap.com/currencies/goose-finance/',\n  //     },\n  //     {\n  //       label: 'AstroTools',\n  //       href: 'https://app.astrotools.io/pancake-pair-explorer/0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\n  //     },\n  //   ],\n  // },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/cryptoleek-team',\n      },\n      {\n        label: 'Docs',\n        href: 'https://docs.leekdao.xyz/',\n      },\n      {\n        label: 'CryptoLeek Website',\n        href: 'https://www.bitcoinleek.com/',\n      },\n      {\n        label: 'LeekDAO Website',\n        href: '#',\n      },\n    ],\n  },\n  // {\n  //   label: 'Partnerships/IFO',\n  //   icon: 'GooseIcon',\n  //   href: 'https://docs.google.com/forms/d/e/1FAIpQLSe7ycrw8Dq4C5Vjc9WNlRtTxEhFDB1Ny6jlAByZ2Y6qBo7SKg/viewform?usp=sf_link',\n  // },\n  // {\n  //   label: 'Audit by Hacken',\n  //   icon: 'AuditIcon',\n  //   href: 'https://www.goosedefi.com/files/hackenAudit.pdf',\n  // },\n  // {\n  //   label: 'Audit by CertiK',\n  //   icon: 'AuditIcon',\n  //   href: 'https://certik.org/projects/goose-finance',\n  // },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Menu as UikitMenu } from 'leek-uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset, error } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n  let leekPrice\n\n  if (cakePriceUsd.toNumber() === 0) {\n    leekPrice = new BigNumber(0)\n  } else {\n    leekPrice = cakePriceUsd.toNumber()\n  }\n\n  return (\n    <div>\n      <UikitMenu\n        account={account}\n        login={connect}\n        logout={reset}\n        isDark={isDark}\n        toggleTheme={toggleTheme}\n        currentLang={selectedLanguage && selectedLanguage.code}\n        langs={allLanguages}\n        setLang={setSelectedLanguage}\n        cakePriceUsd={leekPrice}\n        links={config}\n        priceLink=\"#\"\n        error={error}\n        {...props}\n      />\n\n    </div>\n\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from 'leek-uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from 'leek-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/ComingSoon'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\nconst Ifos = lazy(() => import('./views/Ifos'))\nconst Proposals = lazy(() => import('./views/Voting'))\nconst NotFound = lazy(() => import('./views/NotFound'))\nconst Exchange = lazy(() => import('./views/ComingSoon'))\nconst Liquidity = lazy(() => import('./views/ComingSoon'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route strict path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route strict path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/ido\">\n              <Ifos />\n            </Route>\n            <Route path=\"/swap\">\n              <Exchange />\n            </Route>\n            <Route path=\"/pool\">\n              <Liquidity />\n            </Route>\n\n            <Route path=\"/vote\">\n              <Proposals />\n            </Route>\n            {/* <Route path=\"/nests\">\n              <Farms tokenMode/>\n            </Route> */}\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from 'leek-uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}