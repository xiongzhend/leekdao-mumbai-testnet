{"version":3,"sources":["views/Home/components/TwitterCard.tsx","views/Home/components/TokenVesting.tsx","views/Home/Home.tsx"],"names":["StyledTwitterCard","styled","Card","TwitterCard","div","TranslateString","useI18n","size","mb","dataSource","sourceType","screenName","options","height","chrome","width","StyledCakeStats","Row","TokenVesting","useState","cliff","releaseTime","finalTime","nextReleaseTime","linearReleaseInterval","releaseCount","releaseAmount","remainingTokens","state","setState","fastRefresh","useRefresh","account","useWallet","contract","useVestingContract","getVestingAddress","useEffect","a","Promise","all","methods","call","releaseTotalCount","fetchVestingInfo","moment","utc","Number","format","toFixed","toString","numeral","getBalanceNumber","BigNumber","claim","release","send","from","fontSize","href","bold","color","mt","onClick","UnlockButton","fullWidth","Hero","theme","mediaQueries","lg","BannerImg","img","Cards","BaseLayout","sm","Home","Page","as","src","alt","Footer"],"mappings":"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","file":"static/js/16.0dfdebdb.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'leek-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'CryptoLeek',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, { useState, useEffect } from 'react'\nimport { Card, CardBody, Heading, Text, Link, Button } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport UnlockButton from 'components/UnlockButton'\n\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport numeral from 'numeral'\nimport { getVestingAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useVestingContract } from '../../../hooks/useContract'\nimport useRefresh from '../../../hooks/useRefresh'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TokenVesting = () => {\n  const [state, setState] = useState({\n    cliff: 0,\n    releaseTime: 0,\n    finalTime: 0,\n    nextReleaseTime: 0,\n    linearReleaseInterval: 0,\n    releaseCount: 0,\n    releaseAmount: 0,\n    remainingTokens: 0,\n  })\n  const { fastRefresh } = useRefresh()\n  const { account } = useWallet()\n\n  const contract = useVestingContract(getVestingAddress())\n\n  useEffect(() => {\n    const fetchVestingInfo = async () => {\n      const [\n        cliff,\n        releaseTime,\n        finalTime,\n        nextReleaseTime,\n        linearReleaseInterval,\n        releaseCount,\n        releaseAmount,\n        remainingTokens,\n      ] = await Promise.all([\n        contract.methods.cliff().call(),\n        contract.methods.releaseTime().call(),\n        contract.methods.finalTime().call(),\n        contract.methods.nextReleaseTime().call(),\n        contract.methods.linearReleaseInterval().call(),\n        contract.methods.releaseTotalCount().call(),\n        contract.methods.releaseAmount().call(),\n        contract.methods.remainingTokens().call(),\n      ])\n\n      setState({\n        cliff,\n        releaseTime,\n        finalTime,\n        nextReleaseTime,\n        linearReleaseInterval,\n        releaseCount,\n        releaseAmount,\n        remainingTokens,\n      })\n    }\n    fetchVestingInfo()\n  }, [contract, setState, fastRefresh])\n\n  const releaseTime = moment.utc(Number(state.releaseTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const finalTime = moment.utc(Number(state.finalTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const nextReleaseTime = moment.utc(Number(state.nextReleaseTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const linearReleaseInterval = Number(state.linearReleaseInterval / 3600 / 24 / 30).toFixed().toString()\n  const releaseAmount = numeral(getBalanceNumber(new BigNumber(state.releaseAmount))).format('0,0')\n  const remainingTokens = numeral(getBalanceNumber(new BigNumber(state.remainingTokens))).format('0,0')\n\n  const claim = async () => {\n    await contract.methods.release().send({ from: account })\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Leek Vesting Info\n        </Heading>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Start Time</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {releaseTime} UTC\n            </Text>\n          </Link>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release End Time</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {finalTime} UTC\n            </Text>\n          </Link>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Next LEEK Release Date</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {nextReleaseTime} UTC\n            </Text>\n          </Link>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Interval</Text>\n          <Text bold fontSize=\"14px\">\n            {linearReleaseInterval} Month\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Count </Text>\n          <Text bold fontSize=\"14px\">\n            {state.releaseCount}\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Every Time </Text>\n          <Text bold fontSize=\"14px\">\n            {releaseAmount} LEEK\n          </Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">LEEK Locked </Text>\n          <Text bold fontSize=\"14px\">\n            {remainingTokens} LEEK\n          </Text>\n        </Row>\n\n        <Row>\n          {!account ? (\n            <UnlockButton fullWidth mt=\"8px\" />\n          ) : (\n            <Button mt=\"8px\" onClick={claim}>\n              Claim\n            </Button>\n          )}\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default TokenVesting\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport Footer from 'components/Footer'\nimport FarmStakingCard from './components/FarmStakingCard'\n// import LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport TokenVesting from './components/TokenVesting'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('./images/leek/3.png');\n  background-size: 200px 200px;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  padding-top: 200px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('./images/leek/3.png'), url('./images/leek/3b.png');\n    background-position: left center, right center;\n    height: 230px;\n    padding-top: 0;\n  }\n`\n\nconst BannerImg = styled.img`\n  width: 100%;\n  margin-bottom:20px;\n  margin-top:20px;\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"20px\" color=\"primary\">\n          {TranslateString(576, 'LeekDAO')}\n        </Heading>\n        <Text fontSize=\"18px\">{TranslateString(578, 'Popular DEFI app on MATIC Mainnet.')}</Text>\n        <Text color=\"warning\">Project in Beta. Please use it at your own risk</Text>\n      </Hero>\n      <div>\n        <a href=\"./#/ido\">\n          <BannerImg src=\"./images/ido-banner.png\" alt=\"banner\" />\n        </a>\n      </div>\n      <div>\n        <Cards>\n          {/* <FarmStakingCard /> */}\n          <TwitterCard />\n          {/* <CakeStats /> */}\n          {/* <TotalValueLockedCard /> */}\n          <TokenVesting />\n        </Cards>\n        <Footer />\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}