{"version":3,"sources":["components/Input/Input.tsx","components/Input/index.ts","../node_modules/react-feather/dist/icons/arrow-up-circle.js","views/Lottery/Hero.tsx","views/Lottery/components/General/AddressInput.tsx","views/Lottery/components/General/Column.tsx","views/Lottery/store/reducer.tsx","views/Lottery/store/store.tsx","views/Lottery/api/index.ts","views/Lottery/components/General/LoadingContent.tsx","views/Lottery/components/General/ScoreDetails.tsx","views/Lottery/components/General/ErrorMessage.tsx","views/Lottery/components/Modal/DeGenScoreModal.tsx","views/Lottery/components/General/SuccessMessage.tsx","views/Lottery/components/Modal/ParticipationModal.tsx","views/Lottery/components/LotteryCard/LotteryCard.tsx","views/Lottery/components/General/Row.tsx","utils/truncateWalletAddress.ts","views/Lottery/components/General/ParticipantsListRow.tsx","views/Lottery/components/LotteryCard/ParticipationListCard.tsx","views/Lottery/components/General/TransactionMessage.tsx","views/Lottery/components/Modal/LuckyDrawTransactionModal.tsx","views/Lottery/components/Modal/ConfirmationPendingModal.tsx","views/Lottery/components/Modal/WinnerNumberInputModal.tsx","views/Lottery/components/Modal/ApproveTransactionModal.tsx","views/Lottery/components/Modal/ErrorMessageModal.tsx","views/Lottery/components/LotteryCard/LotteryResultCard.tsx","views/Lottery/components/HowToPlay.tsx","views/Lottery/components/General/HistoryTabMenu.tsx","views/Lottery/components/General/WinnersListRow.tsx","views/Lottery/components/LotteryCard/AllHistoryResultCard.tsx","views/Lottery/Lottery.tsx"],"names":["StyledInputWrapper","styled","div","props","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","ArrowUpCircle","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","points","x1","y1","x2","y2","propTypes","PropTypes","string","oneOfType","number","displayName","StyledHero","Box","Title","Heading","attrs","as","DesktopImage","Image","mediaQueries","lg","Hero","Container","alignItems","justifyContent","pr","mb","src","StyledSpacer","StyledTokenAdornmentWrapper","AddressInput","onSelectDefault","isAddressNull","address","style","marginBottom","onClick","disabled","Column","ColumnCenter","AutoColumn","gap","justify","defaultState","luckyDrawTx","error","addressTx","loadingState","isLoading","GET_LUCKY_DRAW_TRANSACTION_HASH","GET_ADDRESS_TRANSACTION_HASH","RESET_TO_DEFAULT_STATE","UPDATE_ERROR_MESSAGE","SET_LOADING_STATE_TRUE","SET_LOADING_STATE_FALSE","store","createStore","state","action","type","newState","JSON","parse","stringify","loadingStore","url","process","username","password","updateParticipationStatus","a","customUrl","axios","patch","auth","useGetCurrentRound","contract","useLottery","useState","round","setRound","fastRefresh","useRefresh","useEffect","mounted","methods","currentRound","console","response","fetchData","rotate","keyframes","Spinner","img","ConfirmedIcon","CustomLightSpinner","LoadingContent","alt","SubTitle","LevelIcon","LevelIconDetails","ScoreDetails","level","score","toLowerCase","bold","fontSize","mt","toUpperCase","mr","Icon","ErrorMessage","errorMessage","DeGenScoreModal","comp","onDismiss","data","deGenScore","setDeGenScore","get","params","useGetScore","title","SuccessMessage","ParticipationModal","successData","setSuccessData","post","usePostParticipation","StyledLotteryCard","Card","secondary","LotteryCard","setAddress","account","useWallet","trim","isAddressValid","startsWith","useModal","onPresentDeGenScoreModal","onPresentParticipationModal","e","currentTarget","variant","UnlockButton","fullWidth","AddressColumn","ChoiceColumn","VotingPowerColumn","Row","Grid","borderColor","sm","truncateWalletAddress","startLength","endLength","substring","ParticipantsListRow","href","getChainExplorerUrl","ParticipationListCard","participationList","setParticipationList","useGetParticipationList","showAll","setShowAll","displayList","slice","py","map","item","wallet_address","wallet_score","wallet_level","textTransform","px","endIcon","TransactionMessage","transactionHash","useContext","ThemeContext","getTranscationHash","LuckyDrawTransactionModal","getState","ConfirmationPendingContent","WinnerNumberInputModal","setNumber","onPresentLuckyDrawTransactionModal","onPresentConfrimationModal","isNumberValid","submitRequest","dispatch","luckyDraw","send","from","result","parseInt","min","ApproveTransactionModal","ErrorMessageModal","StyledResultCard","ResultContainer","LotteryResultCard","winners","setWinners","getWinners","roundWinners","useGetWinners","isOwner","notParticpatedList","useGetNotParticipatedList","onPresentWinnerNumberInputModal","onPresentApproveTransactionModal","onPresentErrorMessageModal","isAddressSentToContract1","isAddressSentToContract2","participate","padding","textAlign","lineHeight","Divider","StepContainer","Flex","md","StyledStepCard","card","InlineLink","Link","StepCardInner","background","StepCard","step","label","subtitle","HowToPlay","flexDirection","maxWidth","marginLeft","HistoryTabMenu","setActiveIndex","activeIndex","WinnersListRow","AllHistoryResultCard","winnersList","setWinnersList","promises","push","Promise","all","forEach","itemArray","index","useFetchWinnersAndRound","sort","itemA","itemB","LotteryRoundContainer","CurrentLayout","BaseLayout","HistoryLayout","Lottery","historyTabMenuIndex","setHistoryTabMenuIndex"],"mappings":"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","file":"static/js/15.b41c9cfb.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","export { default } from './Input'\nexport type { InputProps } from './Input'\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ArrowUpCircle = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"16 12 12 8 8 12\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"16\",\n    x2: \"12\",\n    y2: \"8\"\n  }));\n});\nArrowUpCircle.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nArrowUpCircle.displayName = 'ArrowUpCircle';\nexport default ArrowUpCircle;","import React from 'react'\nimport { Box, Flex, Heading, Image } from 'leek-uikit'\nimport styled from 'styled-components'\nimport Container from 'components/layout/Container'\n\nconst StyledHero = styled(Box)`\n background-image: linear-gradient(180deg, #c0f6fa 0%, #d9f8fa 100%);\n  padding-bottom: 32px;\n  padding-top: 32px;\n`\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\nconst DesktopImage = styled(Image)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n  }\n`\n\nconst Hero = () => {\n  return (\n    <StyledHero>\n      <Container>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Box pr=\"32px\">\n            <Title>\n              LeekDAO Lucky Draw\n            </Title>\n            <Heading mb=\"16px\">\n              Sometimes the Good Things in Life Do Come Easy\n            </Heading>\n          </Box>\n          <DesktopImage src=\"./images/lottery/luckyDraw.png\" width={250} height={250} />\n        </Flex>\n      </Container>\n    </StyledHero >\n  )\n}\n\nexport default Hero","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from 'leek-uikit'\nimport Input, { InputProps } from 'components/Input'\n\ninterface Props extends InputProps {\n    address?: string\n    onSelectDefault?: () => void\n}\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst AddressInput: React.FC<Props> = ({ onSelectDefault, onChange, value, address }) => {\n    const isAddressNull = address === null\n\n    return (\n        <div style={{ marginBottom: \"10px\" }}>\n            <Input\n                endAdornment={\n                    <StyledTokenAdornmentWrapper>\n                        <StyledSpacer />\n                        <div>\n                            <Button size=\"sm\" onClick={onSelectDefault} disabled={isAddressNull}>\n                                Default\n                            </Button>\n                        </div>\n                    </StyledTokenAdornmentWrapper>\n                }\n                placeholder=\"Enter your address here...\"\n                value={value}\n                onChange={onChange}\n            />\n        </div>\n    )\n}\n\nexport default AddressInput\n","import styled from 'styled-components'\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\nexport const ColumnCenter = styled(Column)`\n  width: 100%;\n  align-items: center;\n`\n\nexport const AutoColumn = styled.div<{\n    gap?: 'sm' | 'md' | 'lg' | string\n    justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\n}>`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\n  justify-items: ${({ justify }) => justify && justify};\n`\n\nexport default Column","const defaultState = {\n    luckyDrawTx: \"\",\n    error: \"\",\n    addressTx: \"\",\n}\n\nconst loadingState = {\n    isLoading: false\n}\n\nexport const GET_LUCKY_DRAW_TRANSACTION_HASH = 'GET_LUCKY_DRAW_TRANSACTION_HASH'\nexport const GET_ADDRESS_TRANSACTION_HASH = \"GET_ADDRESS_TRANSACTION_HASH\"\nexport const RESET_TO_DEFAULT_STATE = \"RESET_TO_DEFAULT_STATE\"\nexport const UPDATE_ERROR_MESSAGE = \"UPDATE_ERROR_MESSAGE\"\nexport const SET_LOADING_STATE_TRUE = \"SET_LOADING_STATE_TRUE\"\nexport const SET_LOADING_STATE_FALSE = \"SET_LOADING_STATE_FALSE\"\n\nexport const reducer = (state = defaultState, action) => {\n    if (action.type === GET_LUCKY_DRAW_TRANSACTION_HASH) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = action.luckyDrawTx\n        newState.addressTx = \"\"\n        newState.error = \"\"\n        return newState\n    }\n\n    if (action.type === UPDATE_ERROR_MESSAGE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = \"\"\n        newState.addressTx = \"\"\n        newState.error = action.error\n        return newState\n    }\n\n    if (action.type === GET_ADDRESS_TRANSACTION_HASH) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = \"\"\n        newState.addressTx = action.addressTx\n        newState.error = action.error\n        return newState\n    }\n\n    if (action.type === RESET_TO_DEFAULT_STATE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = \"\"\n        newState.addressTx = \"\"\n        newState.error = \"\"\n        return newState\n    }\n\n    return state\n}\n\nexport const loadingReducer = (state = loadingState, action) => {\n    if (action.type === SET_LOADING_STATE_TRUE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.isLoading = true\n        return newState\n    }\n\n    if (action.type === SET_LOADING_STATE_FALSE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.isLoading = false\n        return newState\n    }\n\n    return state;\n}\n\n","import { createStore } from 'redux'\nimport { reducer, loadingReducer } from './reducer'\n\nexport const store = createStore(reducer)\nexport const loadingStore = createStore(loadingReducer)","import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport useRefresh from 'hooks/useRefresh'\nimport { useLottery } from 'hooks/useContract'\nimport { loadingStore } from '../store/store'\nimport { SET_LOADING_STATE_FALSE, SET_LOADING_STATE_TRUE } from '../store/reducer'\n\nconst url = process.env.REACT_APP_API_URL;\nconst username = process.env.REACT_APP_API_USERNAME\nconst password = process.env.REACT_APP_API_PASSWORD\n\nexport interface ApiStatResponse {\n    score?: string\n    level?: string\n    error?: string\n}\n\nexport const useGetScore = (address) => {\n    const [deGenScore, setDeGenScore] = useState<ApiStatResponse | null>(null)\n    const customUrl = `${url}/luckyDraw`;\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl, {\n                    params: {\n                        address\n                    }\n                })\n\n                if (mounted) {\n                    setDeGenScore(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch DeGen Score data:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, address, setDeGenScore])\n\n    return deGenScore\n}\n\nexport const usePostParticipation = (address) => {\n    const [successData, setSuccessData] = useState(null);\n    const customUrl = `${url}/luckyDraw`;\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.post(customUrl, {\n                    address,\n                },\n                    {\n                        auth: {\n                            username,\n                            password\n                        }\n                    }\n                )\n\n                if (mounted) {\n                    setSuccessData(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch participation data:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, address, setSuccessData])\n\n    return successData\n}\n\nexport const useGetParticipationList = () => {\n    const [participationList, setParticipationList] = useState([])\n    const customUrl = `${url}/participationList`;\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl)\n                if (mounted) {\n                    setParticipationList(data)\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch participation list data:', error.response)\n            }\n\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, setParticipationList, fastRefresh])\n    return participationList\n}\n\nexport const useGetNotParticipatedList = () => {\n    const [participationList, setParticipationList] = useState(null)\n    const customUrl = `${url}/notParticipatedList`;\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl)\n\n                if (mounted) {\n                    setParticipationList(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch not particpated persons list:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, fastRefresh, setParticipationList])\n\n    return participationList\n}\n\nexport const updateParticipationStatus = async () => {\n    const customUrl = `${url}/participationStatus`;\n    await axios.patch(customUrl, {}, {\n        auth: {\n            username,\n            password\n        }\n    })\n}\n\nexport const useGetWinners = () => {\n    const contract = useLottery();\n    const [winners, setWinners] = useState([]);\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const currentRound = await contract.methods.currentRound().call()\n                const roundWinners = await contract.methods.getWinners(currentRound - 1).call()\n\n                if (mounted) {\n                    setWinners(roundWinners)\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch winners:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, fastRefresh])\n    return winners\n}\n\n\nexport const useGetCurrentRound = () => {\n    const contract = useLottery();\n    const [round, setRound] = useState(1);\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const currentRound = await contract.methods.currentRound().call()\n\n                if (mounted) {\n                    setRound(currentRound);\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch current round:', error.response)\n            }\n\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, fastRefresh])\n    return round\n}\n\nexport const useFetchWinnersAndRound = (round) => {\n    const contract = useLottery();\n    const [winnersList, setWinnersList] = useState([]);\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                loadingStore.dispatch({ type: SET_LOADING_STATE_TRUE })\n                const winners = []\n                const promises = [];\n\n                if (round === 1) {\n                    if (mounted) {\n                        setWinnersList(winners)\n                    }\n                } else {\n                    for (let i = 2; i <= round; i++) {\n                        promises.push(contract.methods.getWinners(i - 1).call())\n                    }\n                    const winnersArray = await Promise.all(promises)\n                    winnersArray.forEach((itemArray, index) => {\n                        itemArray.forEach(item => {\n                            winners.push({\n                                \"address\": item,\n                                \"round\": index + 1\n                            })\n                        })\n                    })\n\n                    if (mounted) {\n                        setWinnersList(winners)\n                    }\n                    loadingStore.dispatch({ type: SET_LOADING_STATE_FALSE })\n                }\n            } catch (error) {\n                console.error('Unable to fetch history winners:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, round])\n    return winnersList\n}\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { ColumnCenter } from \"./Column\"\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst Spinner = styled.img`\n  animation: 2s ${rotate} linear infinite;\n  width: 16px;\n  height: 16px;\n\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 40px 0;\n`\n\nconst CustomLightSpinner = styled(Spinner) <{ size: string }>`\n  height: ${({ size }) => size};\n  width: ${({ size }) => size};\n`\n\nconst LoadingContent = () => {\n  return (\n    <ConfirmedIcon>\n      <CustomLightSpinner src=\"./images/blue-loader.svg\" alt=\"loader\" size=\"90px\" />\n    </ConfirmedIcon>\n  )\n}\n\nexport default LoadingContent","import React from \"react\"\nimport { Heading, Flex, Text } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\nimport { ApiStatResponse } from \"../../api\"\n\nconst SubTitle = styled(Heading).attrs({ as: 'h4', size: 'md' })`\n  color: ${({ theme }) => theme.colors.primary};\n  marign: 20px;\n`\n\nconst LevelIcon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst LevelIconDetails = styled.img <{ width: string, height: string }>`\n  width: ${({ width }) => width};\n  height: ${({ height }) => height};\n`\n\nconst ScoreDetails: React.FC<ApiStatResponse> = ({ level, score }) => {\n  return (\n    <div>\n      <SubTitle>Your Score Level is:</SubTitle>\n      <LevelIcon>\n        <LevelIconDetails src={`./images/lottery/${level.toLowerCase()}.png`} alt=\"level\" width=\"100px\" height=\"70px\" />\n        <Text color=\"secondary\" bold fontSize=\"20px\" mt=\"5px\"> {level.toUpperCase()}</Text>\n      </LevelIcon>\n      <Flex alignItems=\"center\">\n        <SubTitle mr=\"20px\">Your Score is:</SubTitle>\n        <Text color=\"secondary\" bold fontSize=\"30px\"> {score}</Text>\n      </Flex>\n      <Flex alignItems=\"center\">\n        <SubTitle mr=\"20px\">Results:</SubTitle>\n        <Text color={level.toLowerCase() === \"bronze\" ? \"failure\" : \"success\"} bold fontSize=\"30px\">{level.toLowerCase() === \"bronze\" ? \"Unqualified\" : \"Qualified\"}</Text>\n      </Flex>\n    </div>\n  )\n}\n\nexport default ScoreDetails","import React from \"react\"\nimport { Text, ErrorIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\ntype ErrorMessageProps = {\n    errorMessage: string\n}\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ errorMessage }) => {\n    return (\n        <Icon>\n            <ErrorIcon color=\"failure\" width=\"60px\" />\n            <Text color=\"failure\" fontSize=\"20px\" mt=\"10px\">{errorMessage}</Text>\n        </Icon>\n    )\n}\n\nexport default ErrorMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport { useGetScore } from \"../../api\"\nimport LoadingContent from \"../General/LoadingContent\"\nimport ScoreDetails from \"../General/ScoreDetails\"\nimport ErrorMessage from \"../General/ErrorMessage\"\n\ntype DeGenScoreProps = {\n    address: string\n    onDismiss: () => void\n}\n\nconst DeGenScoreModal = ({ onDismiss, address }: DeGenScoreProps) => {\n    const data = useGetScore(address);\n    let comp;\n    if (data) {\n        if (data.error) {\n            comp = <ErrorMessage errorMessage={data.error} />\n        } else {\n            comp = <ScoreDetails score={data.score} level={data.level} />\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Modal title=\"DeGen Socre\" onDismiss={onDismiss}>\n            <div>{comp}</div>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default DeGenScoreModal","import React from \"react\"\nimport { Text, CheckmarkCircleIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst SuccessMessage: React.FC = () => {\n    return (\n        <Icon>\n            <CheckmarkCircleIcon color=\"success\" width=\"60px\" />\n            <Text color=\"success\" fontSize=\"20px\" mt=\"10px\">Thank you for your participation!</Text>\n        </Icon>\n    )\n}\n\nexport default SuccessMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport { usePostParticipation } from \"../../api\"\nimport LoadingContent from \"../General/LoadingContent\"\nimport ErrorMessage from \"../General/ErrorMessage\"\nimport SuccessMessage from \"../General/SuccessMessage\"\n\ntype ParticipationProps = {\n    address: string\n    onDismiss: () => void\n}\n\nconst ParticipationModal = ({ onDismiss, address }: ParticipationProps) => {\n    const data = usePostParticipation(address);\n\n    let comp;\n    if (data) {\n        if (data.error) {\n            comp = <ErrorMessage errorMessage={data.error} />\n        } else {\n            comp = <SuccessMessage />\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Modal title=\"Participation Submission\" onDismiss={onDismiss}>\n            <div>{comp}</div>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ParticipationModal","import React, { useState } from \"react\"\nimport { Card, Heading, Flex, Button, useModal, Text } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport styled from \"styled-components\"\nimport UnlockButton from \"components/UnlockButton\";\nimport AddressInput from \"../General/AddressInput\";\nimport DeGenScoreModal from \"../Modal/DeGenScoreModal\";\nimport ParticipationModal from \"../Modal/ParticipationModal\"\n\nconst StyledLotteryCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-size: contain;\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  width: 100%;\n  margin-top:30px;\n  margin-bottom:30px;\n`\n\nconst Title = styled(Heading).attrs({ as: 'h2', size: 'lg' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\nconst LotteryCard = () => {\n    const [address, setAddress] = useState(\"\");\n    const { account } = useWallet();\n    const isAddressNull = address.trim().length === 0\n    const isAddressValid = address.trim().length === 42 && address.startsWith(\"0x\")\n\n    const [onPresentDeGenScoreModal] = useModal(\n        <DeGenScoreModal onDismiss={() => { return null }} address={address} />,\n    )\n    const [onPresentParticipationModal] = useModal(\n        <ParticipationModal onDismiss={() => { return null }} address={address} />,\n    )\n\n    return (\n        <StyledLotteryCard>\n            <Title>Participate Form</Title>\n            <AddressInput\n                address={account}\n                value={address}\n                onChange={(e) => setAddress(e.currentTarget.value)}\n                onSelectDefault={() => setAddress(account)}\n            />\n            {!isAddressValid && !isAddressNull ? <Text color=\"failure\" mb=\"10px\">* Address Invalid. Please Provide a valid address</Text> : \"\"}\n            {\n                account ? <Flex justifyContent=\"space-between\">\n                    <Button variant=\"primary\" mr=\"8px\" disabled={!isAddressValid} onClick={onPresentDeGenScoreModal}>\n                        DeGen Score\n                    </Button>\n\n                    <Button variant=\"secondary\" mr=\"8px\" disabled={!isAddressValid} onClick={onPresentParticipationModal}>\n                        Participate\n                    </Button>\n                </Flex> :\n                    <UnlockButton fullWidth />\n            }\n        </StyledLotteryCard >\n    )\n\n}\n\nexport default LotteryCard\n\n","import styled from 'styled-components'\nimport { Grid, Box } from 'leek-uikit'\n\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\n  grid-area: address;\n`\n\nexport const ChoiceColumn = styled(Box)`\n  grid-area: choice;\n  overflow: hidden;\n`\n\nexport const VotingPowerColumn = styled(Box)`\n  justify-self: end;\n  grid-area: vote;\n`\n\nconst Row = styled(Grid)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.borderColor};\n  grid-gap: 8px;\n  grid-template-areas: 'address choice vote';\n  grid-template-columns: 2fr 1fr 1fr;\n  padding: 8px 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    padding: 16px 24px;\n  }\n`\n\nexport default Row","/**\n * Truncates a wallet's address\n */\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\n    return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateWalletAddress","import React from 'react'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { Flex, LinkExternal, Text } from 'leek-uikit'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\n\ninterface ListProps {\n    address: string,\n    level: string,\n    score: string\n}\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst ParticipantsListRow: React.FC<ListProps> = ({ address, level, score }) => {\n    return (\n        <Row>\n            <AddressColumn>\n                <Flex alignItems=\"center\">\n                    <LinkExternal href={getChainExplorerUrl(chainId, address)}>{truncateWalletAddress(address)}</LinkExternal>\n                </Flex>\n            </AddressColumn>\n            <ChoiceColumn>\n                <Text>{level}</Text>\n            </ChoiceColumn>\n            <VotingPowerColumn>\n                <Flex alignItems=\"center\" justifyContent=\"end\">\n                    {score}\n                </Flex>\n            </VotingPowerColumn>\n        </Row>\n    )\n}\n\nexport default ParticipantsListRow","import React, { useState } from 'react'\nimport {\n    Card,\n    CardHeader,\n    ChevronDownIcon,\n    Flex,\n    Heading,\n    Button,\n    ChevronUpIcon,\n    Text,\n} from 'leek-uikit'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../General/Row'\nimport { useGetParticipationList, useGetCurrentRound } from '../../api'\nimport ParticipantsListRow from \"../General/ParticipantsListRow\"\n\nconst LIST_PER_VIEW = 5\n\nconst ParticipationListCard: React.FC = () => {\n    const participationList = useGetParticipationList()\n    const [showAll, setShowAll] = useState(false)\n    const displayList = showAll ? participationList : participationList.slice(0, LIST_PER_VIEW)\n    const round = useGetCurrentRound();\n\n    const handleClick = () => {\n        setShowAll(!showAll)\n    }\n\n    let comp;\n    if (participationList.length === 0) {\n        comp = <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n            <Heading as=\"h5\">No Participants found</Heading>\n        </Flex>\n\n    } else {\n        comp = displayList.map((item) => (\n            <ParticipantsListRow key={item.wallet_address} address={item.wallet_address} score={item.wallet_score} level={item.wallet_level} />\n        ))\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Participation List ({participationList.length})</Heading>\n                    {\n                        round > 0 ? <Text>Current Round: #{round}</Text> : \"\"\n                    }\n                </Flex>\n            </CardHeader>\n\n            <Row>\n                <AddressColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Participator\n                    </Text>\n                </AddressColumn>\n                <ChoiceColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Level\n                    </Text>\n                </ChoiceColumn>\n                <VotingPowerColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        score\n                    </Text>\n                </VotingPowerColumn>\n            </Row>\n            {comp}\n            {\n                displayList.length > 0 && (<Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n                    <Button\n                        onClick={handleClick}\n                        variant=\"text\"\n                        endIcon={\n                            showAll ? (\n                                <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                            ) : (\n                                <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                            )\n                        }\n                    >\n                        {showAll ? \"Hide\" : \"See All\"}\n                    </Button>\n                </Flex>)\n            }\n        </Card>\n    )\n}\n\nexport default ParticipationListCard\n\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport { LinkExternal } from 'leek-uikit'\nimport { ArrowUpCircle } from 'react-feather'\nimport { getTranscationHash } from 'utils/chainExplorer'\nimport { AutoColumn, ColumnCenter } from './Column'\n\ntype TransactionMessageProps = {\n    transactionHash?: string\n}\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 40px 0;\n`\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst TransactionMessage: React.FC<TransactionMessageProps> = ({ transactionHash }) => {\n    const theme = useContext(ThemeContext)\n\n    return (\n        <div>\n            <ConfirmedIcon>\n                <ArrowUpCircle strokeWidth={0.5} size={97} color={theme.colors.primary} />\n            </ConfirmedIcon>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <LinkExternal href={getTranscationHash(chainId, transactionHash)}>View on PolygonScan</LinkExternal>\n            </AutoColumn>\n        </div>\n\n    )\n}\n\nexport default TransactionMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { store } from \"../../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst LuckyDrawTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { luckyDrawTx } = store.getState();\n\n    return (\n        <Modal title=\"Transaction Submitted\" onDismiss={onDismiss}>\n            <TransactionMessage transactionHash={luckyDrawTx} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default LuckyDrawTransactionModal","import React from 'react'\nimport { Modal } from 'leek-uikit'\nimport LoadingContent from '../General/LoadingContent'\n\ntype ConfirmationPendingContentProps = { onDismiss: () => void }\n\nconst ConfirmationPendingContent = ({ onDismiss }: ConfirmationPendingContentProps) => {\n    return (\n        <Modal title=\"Waiting for confirmation\" onDismiss={onDismiss}>\n            <LoadingContent />\n        </Modal>\n    )\n}\n\nexport default ConfirmationPendingContent","import React, { useState } from 'react'\nimport { Button, Modal, Flex, Input, Heading, useModal } from 'leek-uikit'\nimport { useLottery } from 'hooks/useContract'\nimport LuckyDrawTransactionModal from \"./LuckyDrawTransactionModal\"\nimport ConfirmationPendingContent from './ConfirmationPendingModal'\nimport { store } from \"../../store/store\"\nimport { GET_LUCKY_DRAW_TRANSACTION_HASH, RESET_TO_DEFAULT_STATE } from '../../store/reducer'\n\ntype WinnerNumberInputProps = {\n    onDismiss: () => void\n    account: string\n}\n\nconst WinnerNumberInputModal = ({ onDismiss, account }: WinnerNumberInputProps) => {\n    const [number, setNumber] = useState(0)\n    const [onPresentLuckyDrawTransactionModal] = useModal(<LuckyDrawTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentConfrimationModal] = useModal(<ConfirmationPendingContent onDismiss={() => { return null }} />)\n    const contract = useLottery();\n    const isNumberValid = number > 0\n\n    const submitRequest = async () => {\n        onPresentConfrimationModal();\n        store.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        const result = await contract.methods.luckyDraw(number).send({ from: account })\n        if (result) {\n            const action = {\n                type: GET_LUCKY_DRAW_TRANSACTION_HASH,\n                luckyDrawTx: result.transactionHash,\n            }\n            store.dispatch(action);\n            onPresentLuckyDrawTransactionModal();\n        }\n        return null;\n\n    }\n    return (\n        <Modal title=\"Set Winners Number\" onDismiss={onDismiss}>\n            <div>\n                <Heading color=\"primary\" size=\"md\" mb=\"10px\">Winners Number of this Round:</Heading>\n                <div>\n                    <Input\n                        placeholder=\"Enter Winners Number...\"\n                        type=\"number\"\n                        value={number}\n                        onChange={(e) => setNumber(parseInt(e.currentTarget.value) || 0)}\n                        min=\"0\" />\n                </div>\n            </div>\n\n\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                <Button onClick={submitRequest} mt=\"20px\" disabled={!isNumberValid}>\n                    Submit\n                </Button>\n                <Button variant=\"secondary\" onClick={onDismiss} mt=\"20px\" >\n                    Close\n                </Button>\n            </Flex>\n        </Modal>\n    )\n}\n\nexport default WinnerNumberInputModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { store } from \"../../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst ApproveTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { addressTx } = store.getState();\n\n    return (\n        <Modal title=\"Transaction Submitted\" onDismiss={onDismiss}>\n            <TransactionMessage transactionHash={addressTx} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ApproveTransactionModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport ErrorMessage from '../General/ErrorMessage'\nimport { store } from \"../../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst ErrorMessageModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { error } = store.getState();\n\n    return (\n        <Modal title=\"Error Message\" onDismiss={onDismiss}>\n            <ErrorMessage errorMessage={error} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ErrorMessageModal","import React from 'react'\nimport {\n    Card,\n    CardHeader,\n    Flex,\n    Heading,\n    LinkExternal,\n    Button,\n    useModal,\n    Text,\n} from 'leek-uikit'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery } from 'hooks/useContract'\nimport styled from \"styled-components\"\nimport WinnerNumberInputModal from '../Modal/WinnerNumberInputModal'\nimport { ColumnCenter } from \"../General/Column\"\nimport ApproveTransactionModal from '../Modal/ApproveTransactionModal'\nimport ConfirmationPendingContent from '../Modal/ConfirmationPendingModal'\nimport ErrorMessageModal from '../Modal/ErrorMessageModal'\nimport { useGetCurrentRound, useGetWinners, useGetNotParticipatedList, updateParticipationStatus } from '../../api'\nimport { store } from \"../../store/store\"\nimport { GET_ADDRESS_TRANSACTION_HASH, RESET_TO_DEFAULT_STATE, UPDATE_ERROR_MESSAGE } from \"../../store/reducer\"\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst StyledResultCard = styled(Card) <{ size: number }>`\n  background-repeat: no-repeat;\n  background-size: contain;\n  max-height: ${({ size }) => size}px;\n  width: 100%;\n`\n\nconst ResultContainer = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst LOTTERY_OWNER = process.env.REACT_APP_LOTTERY_OWNER\n\nconst LotteryResultCard: React.FC = () => {\n    const winners = useGetWinners()\n    const round = useGetCurrentRound();\n    const { account } = useWallet();\n    const isOwner = LOTTERY_OWNER === account\n    const notParticpatedList = useGetNotParticipatedList()\n    const [onPresentWinnerNumberInputModal] = useModal(<WinnerNumberInputModal onDismiss={() => { return null }} account={account} />)\n    const [onPresentApproveTransactionModal] = useModal(<ApproveTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentConfrimationModal] = useModal(<ConfirmationPendingContent onDismiss={() => { return null }} />)\n    const [onPresentErrorMessageModal] = useModal(<ErrorMessageModal onDismiss={() => { return null }} />)\n    const contract = useLottery();\n    const state = store.getState()\n    const isAddressSentToContract1 = state.error === \"There are no new participants\"\n    const isAddressSentToContract2 = state.addressTx && state.addressTx.length > 0\n\n    const submitRequest = async () => {\n        onPresentConfrimationModal();\n        store.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        if (notParticpatedList.error) {\n            const action = {\n                type: UPDATE_ERROR_MESSAGE,\n                error: notParticpatedList.error,\n            }\n            store.dispatch(action);\n            onPresentErrorMessageModal()\n        } else {\n            const result = await contract.methods.participate(notParticpatedList).send({ from: account })\n            if (result) {\n                const action = {\n                    type: GET_ADDRESS_TRANSACTION_HASH,\n                    addressTx: result.transactionHash,\n                    error: result.error,\n                }\n                store.dispatch(action);\n                onPresentApproveTransactionModal();\n                await updateParticipationStatus();\n            }\n        }\n\n        return null;\n\n\n    }\n\n    let comp;\n\n    if (winners && winners.length > 0) {\n        comp = <div>\n            <Heading color=\"primary\">Congratulations! {winners.length === 1 ? \"Winner is:\" : \"Winners are\"}</Heading>\n            <ResultContainer>\n                {\n                    winners.map((item) => (\n                        <LinkExternal key={item} href={getChainExplorerUrl(chainId, item)} fontSize=\"18px\"> 🏆 {truncateWalletAddress(item)}</LinkExternal>\n                    ))\n                }\n\n            </ResultContainer>\n        </div>\n    } else {\n        comp = <Flex alignItems=\"center\" justifyContent=\"center\" padding=\"20px\">\n            <Heading as=\"h5\" style={{ textAlign: \"center\", lineHeight: \"1.5\" }}>No winners Found. Let us expect who will be the winner.</Heading>\n        </Flex>\n\n    }\n\n    return (\n        <StyledResultCard size={250 + winners.length * 30}>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Last Round Winner(s)</Heading>\n                    {\n                        round > 0 ? <Text>Round: #{round - 1}</Text> : \"\"\n                    }\n\n                </Flex>\n            </CardHeader>\n\n            <div style={{ padding: \"20px\" }}>\n                {comp}\n                {\n                    isOwner && (\n\n                        <div>\n                            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                                <Button onClick={submitRequest} disabled={isAddressSentToContract1 || isAddressSentToContract2}>Approve</Button>\n                                <Button onClick={onPresentWinnerNumberInputModal} disabled={!isAddressSentToContract1 && !isAddressSentToContract2}>Lucky Draw</Button>\n                            </Flex>\n                        </div>\n                    )\n                }\n            </div>\n\n        </StyledResultCard>\n    )\n}\n\nexport default LotteryResultCard","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, Heading, Link } from 'leek-uikit'\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 40px 0;\n  width: 100%;\n`\n\nconst StepContainer = styled(Flex)`\n  gap: 24px;\n  width: 100%;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst StyledStepCard = styled(Box)`\n  display: flex;\n  align-self: baseline;\n  position: relative;\n  background: ${({ theme }) => theme.colors.borderColor};\n  padding: 1px 1px 3px 1px;\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nconst InlineLink = styled(Link)`\n  display: inline;\n`\n\nconst StepCardInner = styled(Box)`\n  width: 100%;\n  padding: 24px;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nconst Title = styled(Heading).attrs({ as: 'h2', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\ntype Step = { title: string; subtitle: string; label: string }\n\nconst StepCard: React.FC<{ step: Step }> = ({ step }) => {\n    return (\n        <StyledStepCard width=\"100%\">\n            <StepCardInner height={['200px', '180px', null, '200px']}>\n                <Text mb=\"16px\" fontSize=\"15px\" bold textTransform=\"uppercase\" style={{ textAlign: \"right\" }}>\n                    {step.label}\n                </Text>\n                <Heading mb=\"16px\" fontSize=\"20px\" color=\"secondary\">\n                    {step.title}\n                </Heading>\n                <Text color=\"textSubtle\">{step.subtitle}</Text>\n            </StepCardInner>\n        </StyledStepCard>\n    )\n}\n\nconst HowToPlay: React.FC = () => {\n    const steps: Step[] = [\n        {\n            label: \"Step 1\",\n            title: \"Fill in the Form\",\n            subtitle: 'Only the person whose DeGenScore is over 30 can have access to this game.',\n        },\n        {\n            label: \"Step 2\",\n            title: \"Wait for the Draw\",\n            subtitle: 'The lucky draw will be open in person and regularly.',\n        },\n        {\n            label: \"Step 3\",\n            title: \"Check for Prizes\",\n            subtitle: \"Each round winner(s) will be displayed in public.\",\n        },\n    ]\n    return (\n        <Box width=\"100%\" style={{ marginBottom: \"30px\" }}>\n            <Flex mt=\"30px\" mb=\"40px\" alignItems=\"center\" flexDirection=\"column\">\n                <Title mb=\"24px\" fontSize=\"30px\" color=\"secondary\">\n                    How to Play\n                </Title>\n                <Text>It is a very simple game! But you will receive satisified returns</Text>\n            </Flex>\n            <StepContainer>\n                {steps.map((step) => (\n                    <StepCard key={step.label} step={step} />\n                ))}\n            </StepContainer>\n            <Divider />\n            <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection={['column', 'column', 'row']}>\n                <Flex maxWidth=\"100px\" mr=\"8px\" mb=\"16px\">\n                    <img src=\"./images/lottery/question.png\" alt=\"question\" />\n                </Flex>\n                <Flex maxWidth=\"300px\" flexDirection=\"column\">\n                    <Heading mb=\"16px\">\n                        Still got questions?\n                    </Heading>\n                    <Text>\n                        Check our in-depth guide on\n                        <InlineLink href=\"https://docs.leekdao.xyz\" marginLeft=\"5px\" target=\"_blank\">\n                            how to play the LeekDAO Lucky Draw!\n                        </InlineLink>\n                    </Text>\n                </Flex>\n            </Flex>\n        </Box>\n    )\n}\n\nexport default HowToPlay","import React from 'react'\nimport { ButtonMenu, ButtonMenuItem } from 'leek-uikit'\n\nconst HistoryTabMenu = ({ setActiveIndex, activeIndex }) => {\n    return (\n        <ButtonMenu activeIndex={activeIndex} onClick={setActiveIndex} size=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>Round Info</ButtonMenuItem>\n            <ButtonMenuItem>History Winners</ButtonMenuItem>\n        </ButtonMenu>\n    )\n}\n\nexport default HistoryTabMenu","import React from 'react'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { Flex, LinkExternal, Text } from 'leek-uikit'\nimport Row, { AddressColumn, VotingPowerColumn } from './Row'\n\ninterface ListProps {\n    address: string,\n    round: number\n}\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst WinnersListRow: React.FC<ListProps> = ({ address, round }) => {\n    return (\n        <Row>\n            <AddressColumn>\n                <Flex alignItems=\"center\">\n                    <LinkExternal href={getChainExplorerUrl(chainId, address)}>{truncateWalletAddress(address)}</LinkExternal>\n                </Flex>\n            </AddressColumn>\n            <VotingPowerColumn>\n                <Flex alignItems=\"center\" justifyContent=\"end\">\n                    <Text>Round: #{round}</Text>\n                </Flex>\n            </VotingPowerColumn>\n        </Row>\n    )\n}\n\nexport default WinnersListRow","import React, { useState } from 'react'\nimport {\n    Card,\n    CardHeader,\n    ChevronDownIcon,\n    Flex,\n    Heading,\n    Button,\n    ChevronUpIcon,\n    Text,\n} from 'leek-uikit'\nimport Row, { AddressColumn, VotingPowerColumn } from '../General/Row'\nimport WinnersListRow from \"../General/WinnersListRow\"\nimport { useGetCurrentRound, useFetchWinnersAndRound } from '../../api'\nimport LoadingContent from '../General/LoadingContent'\nimport { loadingStore } from '../../store/store'\n\nconst LIST_PER_VIEW = 5\n\nconst AllHistoryResultCard: React.FC = () => {\n    const round = useGetCurrentRound()\n    const winnersList = useFetchWinnersAndRound(round).sort((itemA, itemB) => itemB.round - itemA.round);\n    const [showAll, setShowAll] = useState(false)\n    const displayList = showAll ? winnersList : winnersList.slice(0, LIST_PER_VIEW)\n    const { isLoading } = loadingStore.getState()\n\n    const handleClick = () => {\n        setShowAll(!showAll)\n    }\n    let comp;\n\n    if (!isLoading) {\n        if (displayList.length === 0) {\n            comp = <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n                <Heading as=\"h5\">No Winners found</Heading>\n            </Flex>\n        } else {\n            comp = displayList.map((item) => (\n                <WinnersListRow key={item.address} address={item.address} round={item.round} />\n            ))\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Lucky Draw Winners History Results</Heading>\n                    <Text>Total Winners: {winnersList.length}</Text>\n                </Flex>\n            </CardHeader>\n\n            <Row>\n                <AddressColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Lucky Draw Winner Address\n                    </Text>\n                </AddressColumn>\n                <VotingPowerColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Round No\n                    </Text>\n                </VotingPowerColumn>\n            </Row>\n            {comp}\n            {\n                !isLoading && displayList.length > 0 && (<Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n                    <Button\n                        onClick={handleClick}\n                        variant=\"text\"\n                        endIcon={\n                            showAll ? (\n                                <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                            ) : (\n                                <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                            )\n                        }\n                    >\n                        {showAll ? \"Hide\" : \"See All\"}\n                    </Button>\n                </Flex>)\n            }\n        </Card>\n    )\n}\n\nexport default AllHistoryResultCard","import React, { useState } from \"react\";\nimport { BaseLayout, Box, Flex, Heading } from \"leek-uikit\";\nimport Container from \"components/layout/Container\";\nimport styled from \"styled-components\";\nimport Hero from \"./Hero\";\nimport LotteryCard from \"./components/LotteryCard/LotteryCard\";\nimport ParticipationListCard from \"./components/LotteryCard/ParticipationListCard\"\nimport LotteryResultCard from \"./components/LotteryCard/LotteryResultCard\"\nimport HowToPlay from \"./components/HowToPlay\"\nimport HistoryTabMenu from \"./components/General/HistoryTabMenu\";\nimport AllHistoryResultCard from \"./components/LotteryCard/AllHistoryResultCard\"\n\nconst LotteryRoundContainer = styled.div`\n background-image:linear-gradient(180deg, #CBD7EF 0%, #9A9FD0 100%);\n`\n\nconst CurrentLayout = styled(BaseLayout)`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n  margin: 0 auto;\n  padding-left: 150px;\n  padding-right: 150px;\n  padding-top:50px;\n  padding-bottom:50px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1.3fr 1fr;\n  }\n\n  @media (max-width: 768px) {\n   padding:30px\n  }\n`\n\nconst HistoryLayout = styled(Container)`\n  margin: 0 auto;\n  padding-left: 150px;\n  padding-right: 150px;\n  padding-top:50px;\n  padding-bottom:50px;\n\n  @media (max-width: 768px) {\n   padding:30px\n  }\n`\n\nconst Lottery = () => {\n    const [historyTabMenuIndex, setHistoryTabMenuIndex] = useState(0)\n    return (\n        <div>\n            <Hero />\n            <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                <Heading size=\"xl\" color=\"secondary\" mt=\"40px\">\n                    Participate Lucky Draw Right now!\n                </Heading>\n            </Flex>\n            <LotteryCard />\n            <LotteryRoundContainer>\n                <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                    <Heading mt=\"24px\" size=\"xl\">\n                        Lucky Draw Results\n                    </Heading>\n                    <Box mt=\"30px\">\n                        <HistoryTabMenu\n                            activeIndex={historyTabMenuIndex}\n                            setActiveIndex={(index) => setHistoryTabMenuIndex(index)} />\n                    </Box>\n                </Flex>\n\n                {historyTabMenuIndex === 0 ? <CurrentLayout>\n                    <ParticipationListCard />\n                    <LotteryResultCard />\n                </CurrentLayout> :\n                    <HistoryLayout>\n                        <AllHistoryResultCard />\n                    </HistoryLayout>\n                }\n\n            </LotteryRoundContainer>\n\n            <Container>\n                <HowToPlay />\n            </Container>\n        </div>\n    )\n}\n\nexport default Lottery"],"sourceRoot":""}