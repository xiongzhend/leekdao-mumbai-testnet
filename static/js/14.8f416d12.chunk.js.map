{"version":3,"sources":["views/Home/components/CardValue.tsx","views/Home/components/CakeStats.tsx","hooks/useTokenBalance.ts","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/TokenVesting.tsx","views/Home/Home.tsx"],"names":["CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","StyledCakeStats","styled","Card","Row","div","CakeStats","TranslateString","useI18n","totalSupply","slowRefresh","useRefresh","useState","setTotalSupply","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useTotalSupply","burnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useBurnedBalance","farms","useFarms","leekPrice","usePriceCakeBusd","circSupply","minus","cakeSupply","getBalanceNumber","marketCap","times","leekPerBlock","pow","toNumber","size","mb","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","color","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","height","chrome","width","TokenVesting","cliff","releaseTime","finalTime","nextReleaseTime","linearReleaseInterval","releaseCount","releaseAmount","remainingTokens","state","setState","contract","useVestingContract","getVestingAddress","Promise","all","releaseTotalCount","fetchVestingInfo","moment","utc","Number","format","toString","numeral","href","Hero","theme","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as"],"mappings":"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","file":"static/js/14.8f416d12.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'leek-uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'leek-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const leekPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = leekPrice.times(circSupply)\n\n  let leekPerBlock = 0\n  if (farms && farms[0] && farms[0].leekPerBlock) {\n    leekPerBlock = new BigNumber(farms[0].leekPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Leek Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New LEEK/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {leekPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'leek-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'CryptoLeek',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, { useState, useEffect } from 'react'\nimport { Card, CardBody, Heading, Text, Link } from 'leek-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport numeral from 'numeral'\nimport { getVestingAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useVestingContract } from '../../../hooks/useContract'\nimport useRefresh from '../../../hooks/useRefresh'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TokenVesting = () => {\n  const [state, setState] = useState({\n    cliff: 0,\n    releaseTime: 0,\n    finalTime: 0,\n    nextReleaseTime: 0,\n    linearReleaseInterval: 0,\n    releaseCount: 0,\n    releaseAmount: 0,\n    remainingTokens: 0,\n  })\n  const { slowRefresh } = useRefresh()\n\n  const contract = useVestingContract(getVestingAddress())\n\n  useEffect(() => {\n    const fetchVestingInfo = async () => {\n      const [\n        cliff,\n        releaseTime,\n        finalTime,\n        nextReleaseTime,\n        linearReleaseInterval,\n        releaseCount,\n        releaseAmount,\n        remainingTokens,\n      ] = await Promise.all([\n        contract.methods.cliff().call(),\n        contract.methods.releaseTime().call(),\n        contract.methods.finalTime().call(),\n        contract.methods.nextReleaseTime().call(),\n        contract.methods.linearReleaseInterval().call(),\n        contract.methods.releaseTotalCount().call(),\n        contract.methods.releaseAmount().call(),\n        contract.methods.remainingTokens().call(),\n      ])\n\n      setState({\n        cliff,\n        releaseTime,\n        finalTime,\n        nextReleaseTime,\n        linearReleaseInterval,\n        releaseCount,\n        releaseAmount,\n        remainingTokens,\n      })\n    }\n    fetchVestingInfo()\n  }, [contract, setState, slowRefresh])\n\n  const releaseTime = moment.utc(Number(state.releaseTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const finalTime = moment(Number(state.finalTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const nextReleaseTime = moment(Number(state.nextReleaseTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const linearReleaseInterval = Number(state.cliff / 3600 / 24).toString()\n  const releaseAmount = numeral(getBalanceNumber(new BigNumber(state.releaseAmount))).format('0,0')\n  const remainingTokens = numeral(getBalanceNumber(new BigNumber(state.remainingTokens))).format('0,0')\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Leek Vesting Info\n        </Heading>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Start Time</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {releaseTime} UTC\n            </Text>\n          </Link>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release End Time</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {finalTime} UTC\n            </Text>\n          </Link>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Next LEEK Release Date</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {nextReleaseTime} UTC\n            </Text>\n          </Link>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Interval</Text>\n          <Text bold fontSize=\"14px\">\n            {linearReleaseInterval} Days\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Count </Text>\n          <Text bold fontSize=\"14px\">\n            {state.releaseCount}\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Every Time </Text>\n          <Text bold fontSize=\"14px\">\n            {releaseAmount} LEEK\n          </Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">LEEK Locked </Text>\n          <Text bold fontSize=\"14px\">\n            {remainingTokens} LEEK\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default TokenVesting\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport TokenVesting from './components/TokenVesting'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('./images/leek/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('./images/leek/3.png'), url('./images/leek/3b.png');\n    background-position: left center, right center;\n    height: 230px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"primary\">\n          {TranslateString(576, 'CryptoLeek Finance')}\n        </Heading>\n        <Text>{TranslateString(578, 'Top 3 best DEFI app on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          {/* <FarmStakingCard /> */}\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n          <TokenVesting />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}