{"version":3,"sources":["state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","contexts/ThemeContext.tsx","hooks/useRefresh.ts","state/actions.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","hooks/useTheme.ts","config/constants/contracts.ts","config/constants/types.ts","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/farms.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","components/Menu/UrlConfig.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts"],"names":["ZERO","BigNumber","useFetchPublicData","dispatch","useDispatch","slowRefresh","useRefresh","useEffect","fetchFarmsPublicDataAsync","useFarms","useSelector","state","farms","data","useFarmFromPid","pid","find","f","useFarmUser","farm","allowance","userData","tokenBalance","stakedBalance","earnings","usePriceBnbBusd","price","tokenPriceVsQuote","times","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","lpTotalInQuoteToken","val","quoteTokenSymbol","QuoteToken","BNB","CAKE","plus","nodes","process","REACT_APP_NODE_3","getNodeUrl","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","a","prev","clearInterval","Provider","CACHE_KEY","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","localStorage","getItem","JSON","parse","setIsDark","prevState","setItem","stringify","theme","dark","light","useContext","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","div","mediaQueries","sm","Page","lg","useTheme","StyledThemeCopntext","cake","137","80001","masterChef","wbnb","lottery","chairLottery","lotteryNFT","mulltiCall","busd","eth","usdt","vesting","airdrop","billboard","billboardCollection","spaceCatsNFT","PoolCategory","multicall","abi","calls","web3","getWeb3","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","chainId","getSpaceCatsNftAddress","getMasterChefAddress","getVestingAddress","getAirdropAddress","getBillboardAddress","getBillboardCollectionAddress","getWbnbAddress","getLotteryAddress","getChairLotteryAddress","getLotteryTicketAddress","pools","sliceNumber","risk","lpSymbol","lpAddresses","tokenSymbol","tokenAddresses","quoteTokenAdresses","contracts","BUSD","USDT","slice","nonBnbPools","poolsConfig","filter","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","account","stakingTokenAddress","contractAddress","CHAIN_ID","erc20ABI","allowances","reduce","acc","pool","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","_hex","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingLeek","pendingReward","initialState","PoolsSlice","createSlice","reducers","setPoolsPublicData","action","livePoolsData","payload","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","actions","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","storedLangCode","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","console","error","langObject","UrlConfig","config","label","icon","href","items","exchange","Menu","props","leekPrice","useWallet","connect","reset","cakePriceUsd","toNumber","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","Lottery","ChairLottery","Airdrop","Ifos","Proposals","NotFound","Billboard","BillboardCollections","SpaceCats","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","strict","path","exact","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","parseInt","store","connectors","walletconnect","ReactDOM","render","StrictMode","document","getElementById","urlProvider","NODE_URL","startsWith","Web3","providers","HttpProvider","timeout","WebsocketProvider","getContract","contractOptions","fetchFarms","Promise","all","farmsConfig","farmConfig","lpAdress","isTokenOnly","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","pow","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","leekPerBlock","allocPoint","poolWeight","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","masterChefAdress","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","fetchFarmUserEarnings","rawEarnings","parsedEarnings","farmsSlice","setFarmsPublicData","liveFarmsData","liveFarmData","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance"],"mappings":"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","file":"static/js/main.a0e1b999.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // USDC-MATIC LP\n  const farm = useFarmFromPid(pid)\n  const price = new BigNumber(1)\n  return farm.tokenPriceVsQuote ? (new BigNumber(farm.tokenPriceVsQuote)).times(price) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0 // LEEK-USDC LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","// import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  // const randomIndex = random(0, nodes.length - 1)\n  return nodes[0]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from 'leek-uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","export default {\n  cake: {\n    137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n  },\n  masterChef: {\n    137: '0xbACA38eCfE97Cc4D69a5Fc97456B5E034cA1CCA0',\n    80001: '0x141cca2cc6447Cd05c24D89b89F2351CA1B8D070',\n  },\n  wbnb: {\n    137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    80001: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n  },\n  lottery: {\n    137: '0xf5816E4607fFD115A9841901a0AA83439d16ca45',\n    80001: '0x6D4EB0268177151C3b24e83D46B61487d0397Dd9',\n  },\n  chairLottery: {\n    137: '',\n    80001: '0x4841d4866d7a1479a9aa4EDD01D8Fe7c4FEE42Fb',\n  },\n  lotteryNFT: {\n    137: '',\n    80001: '',\n  },\n  mulltiCall: {\n    137: '0x7b00f6e0bc0F90d938de02Eb9174735FfCe17E56',\n    80001: '0xf9d5cea631006DDaF5D18640351D43CebF1eF97d',\n  },\n  busd: {\n    137: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n    80001: '0x5e2C319e51c7481CBE281A62be983c727dE577De',\n  },\n  eth: {\n    137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    80001: '',\n  },\n  usdt: {\n    137: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n    80001: '',\n  },\n  vesting: {\n    137: '0x287554F2f0ef03811e1cDc3067b4C4Ae96f726A8',\n    80001: '0x7968E3B3029E4d4c8fAc2D85EfaeA476a362AB75',\n  },\n  airdrop: {\n    137: \"0x169EC54Fb9728D9777Fe33FA5cB1620848152245\",\n    80001: \"0xe5A06E441B11fBfae3CF6913d5FEfCf0d9D60069\",\n  },\n  billboard: {\n    137: \"0x4395f27ff8E3258e504d70A2B3C209Bb72F515C7\",\n    80001: \"0x83EBd65cd6ddCedF222cc51578f2c63ad10dEEbc\"\n  },\n  billboardCollection: {\n    137: \"0xD5fE2332EDe61892321E19018968AA467FefEEae\",\n    80001: \"0xBB442A24CB7D2f4F67Ed33Da3dDe9C9377b3EB4c\"\n  },\n  spaceCatsNFT: {\n    137: \"0xB2cbdc22D0fc9dA42954d9D06bb946e8D77Dbf70\",\n    80001: \"0xD85f30D87D09E76980155Bc388B5eC17D156847E\"\n  }\n\n}\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  idoAddress: Address\n  tokenAddress: Address\n  mainToken: string\n  name: string\n  subTitle?: string\n  description?: string\n  startTime: number\n  endTime: number\n  salesAmount: number\n  projectSiteUrl: string\n  tokenDecimals: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'MATIC',\n  'CAKE' = 'LEEK',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'USDC',\n  'TWT' = 'TWT',\n  'USDT' = 'USDT',\n  'ETH' = 'ETH'\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  80001?: string\n  137?: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n\nexport interface Airdrop {\n  id: string\n  isActive: boolean\n  tokenAddress: Address\n  name: string\n  description: string\n  projectSiteUrl: string\n  tokenDecimals: number\n  totalAmount: number\n}\n\nexport interface City {\n  id: number\n  city: string\n  latitude: number\n  longitude: number\n}\n\ninterface State {\n  name:string,\n  stateCode:string,\n}\n\nexport interface Country {\n  name: string,\n  dialCode: string,\n  countryCode: string,\n  state:State[]\n}","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\n\nexport const getSpaceCatsNftAddress = () => {\n  return addresses.spaceCatsNFT[chainId]\n}\n\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\n\nexport const getVestingAddress = () => {\n  return addresses.vesting[chainId]\n}\n\nexport const getAirdropAddress = () => {\n  return addresses.airdrop[chainId]\n}\n\nexport const getBillboardAddress = () => {\n  return addresses.billboard[chainId]\n}\n\nexport const getBillboardCollectionAddress = () => {\n  return addresses.billboardCollection[chainId]\n}\n\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\n\nexport const getChairLotteryAddress = () => {\n  return addresses.chairLottery[chainId]\n}\n\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\nlet sliceNumber;\nif (chainId === \"80001\") {\n  sliceNumber = 3;\n} else {\n  sliceNumber = 7;\n}\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'LEEK-MATIC LP',\n    lpAddresses: {\n      80001: '0x0c532aec168ec6b00c5cdf64d074563db46aa85c',\n      137: '0x422F43A620E795E139183947851Fd914a11dD023',\n    },\n    tokenSymbol: 'LEEK',\n    tokenAddresses: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'LEEK-USDC LP',\n    lpAddresses: {\n      80001: '0x8cfd7f8fa7c824b8619fa2d0af5a01315537192c',\n      137: '0x6f447ba529007943E05fc678FB04A777816C81c0',\n    },\n    tokenSymbol: 'LEEK',\n    tokenAddresses: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: chainId === \"80001\" ? 'MATIC-USDC LP' : 'MATIC-USDC SLP',\n    lpAddresses: {\n      80001: '0xa35f833d37a6d44c15ebea2c7eceb0808e1ffdc3',\n      137: '0xcd353F79d9FADe311fC3119B841e1f456b54e858',\n    },\n    tokenSymbol: 'MATIC',\n    tokenAddresses: {\n      80001: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 3,\n    risk: 3,\n    lpSymbol: 'MATIC-USDT SLP',\n    lpAddresses: {\n      80001: '',\n      137: '0x55FF76BFFC3Cdd9D5FdbBC2ece4528ECcE45047e',\n    },\n    tokenSymbol: 'MATIC',\n    tokenAddresses: {\n      80001: '',\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.USDT,\n    quoteTokenAdresses: contracts.usdt,\n  },\n  {\n    pid: 4,\n    risk: 3,\n    lpSymbol: 'WETH-MATIC SLP',\n    lpAddresses: {\n      80001: '',\n      137: '0xc4e595acDD7d12feC385E5dA5D43160e8A0bAC0E',\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      80001: '',\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 5,\n    risk: 3,\n    lpSymbol: 'WETH-USDC SLP',\n    lpAddresses: {\n      80001: '',\n      137: '0x34965ba0ac2451A34a0471F04CCa3F990b8dea27',\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      80001: '',\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n].slice(0, sliceNumber)\n\nexport default farms\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingLeek('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from 'leek-uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\n// import { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\n// const fileId = 8\n// const projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\n// const stringTranslationsApi = new StringTranslations({\n//   token: process.env.REACT_APP_CROWDIN_APIKEY,\n// })\n\n// const fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n//   return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n// }\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","const UrlConfig = {\n  \"137\": {\n    \"exchange\": \"https://exchange.leekdao.xyz/#/swap\",\n    \"pool\": \"https://exchange.leekdao.xyz/#/pool\",\n  },\n  \"80001\": {\n    \"exchange\": \"https://cryptoleek-team.github.io/leekdaoswap-mumbai-testnet/#/swap\",\n    \"pool\": \"https://cryptoleek-team.github.io/leekdaoswap-mumbai-testnet/#/pool\",\n  }\n}\n\nexport default UrlConfig","import { MenuEntry } from 'leek-uikit'\nimport UrlConfig from './UrlConfig'\n\nconst chainId: string = process.env.REACT_APP_CHAIN_ID || '80001'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: UrlConfig[chainId].exchange\n      },\n      {\n        label: 'Liquidity',\n        href: UrlConfig[chainId].pool\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'IDO',\n    icon: 'IfoIcon',\n    href: '/ido',\n  },\n  {\n    label: 'Vote',\n    icon: 'GroupsIcon',\n    href: '/vote',\n  },\n  {\n    label: 'Lucky Draw',\n    icon: 'TicketIcon',\n    items: [\n      {\n        label: 'LeekDAO',\n        href: '/luckyDraw',\n      },\n      {\n        label: 'Chair Finance',\n        href: '/chairFinanceLuckyDraw',\n      }\n    ],\n  },\n  {\n    label: 'AirDrop',\n    icon: 'VaultsIcon',\n    href: '/airdrop',\n  },\n  {\n    label: 'Games',\n    icon: 'GamesIcon',\n    items: [\n      {\n        label: 'World Map Billboard 🔥',\n        href: '/billboard',\n      }\n    ],\n  },\n  {\n    label: 'Collections',\n    icon: 'NftIcon',\n    items: [\n      {\n        label: 'Billboard Collections 🔥',\n        href: '/billboardCollections',\n      }\n    ],\n  },\n  {\n    label: 'MISC',\n    icon: 'OthersIcon',\n    items: [\n      {\n        label: 'SpaceCats',\n        href: '/spacecats',\n      }\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/cryptoleek-team',\n      },\n      {\n        label: 'Docs',\n        href: 'https://docs.leekdao.xyz/',\n      },\n      {\n        label: 'CryptoLeek Website',\n        href: 'https://www.bitcoinleek.com/',\n      },\n      {\n        label: 'LeekDAO Website',\n        href: 'https://leekdao.xyz/',\n      },\n    ],\n  },\n  // {\n  //   label: 'Partnerships/IFO',\n  //   icon: 'GooseIcon',\n  //   href: 'https://docs.google.com/forms/d/e/1FAIpQLSe7ycrw8Dq4C5Vjc9WNlRtTxEhFDB1Ny6jlAByZ2Y6qBo7SKg/viewform?usp=sf_link',\n  // },\n  // {\n  //   label: 'Audit by Hacken',\n  //   icon: 'AuditIcon',\n  //   href: 'https://www.goosedefi.com/files/hackenAudit.pdf',\n  // },\n  // {\n  //   label: 'Audit by CertiK',\n  //   icon: 'AuditIcon',\n  //   href: 'https://certik.org/projects/goose-finance',\n  // },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Menu as UikitMenu } from 'leek-uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset, error } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n  let leekPrice\n\n  if (cakePriceUsd.toNumber() === 0) {\n    leekPrice = new BigNumber(0)\n  } else {\n    leekPrice = cakePriceUsd.toNumber()\n  }\n\n  return (\n    <div>\n      <UikitMenu\n        account={account}\n        login={connect}\n        logout={reset}\n        isDark={isDark}\n        toggleTheme={toggleTheme}\n        currentLang={selectedLanguage && selectedLanguage.code}\n        langs={allLanguages}\n        setLang={setSelectedLanguage}\n        cakePriceUsd={leekPrice}\n        links={config}\n        priceLink=\"#\"\n        error={error}\n        {...props}\n      />\n\n    </div>\n\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from 'leek-uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from 'leek-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst Lottery = lazy(() => import('./views/Lottery'))\nconst ChairLottery = lazy(() => import('./views/ComingSoon'))\nconst Airdrop = lazy(() => import('./views/Airdrop'))\nconst Ifos = lazy(() => import('./views/Ifos'))\nconst Proposals = lazy(() => import('./views/Voting'))\nconst NotFound = lazy(() => import('./views/NotFound'))\nconst Billboard = lazy(() => import('./views/Billboard'))\nconst BillboardCollections = lazy(() => import('./views/BillBoardCollections'))\nconst SpaceCats = lazy(() => import('./views/SpaceCats'))\n// const Exchange = lazy(() => import('./views/ComingSoon'))\n// const Liquidity = lazy(() => import('./views/ComingSoon'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route strict path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route strict path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/ido\">\n              <Ifos />\n            </Route>\n            <Route path=\"/vote\">\n              <Proposals />\n            </Route>\n            <Route path=\"/luckyDraw\">\n              <Lottery />\n            </Route>\n            <Route path=\"/chairFinanceLuckyDraw\">\n              <ChairLottery />\n            </Route>\n            <Route path=\"/airdrop\">\n              <Airdrop />\n            </Route>\n            <Route path=\"/billboard\">\n              <Billboard />\n            </Route>\n            <Route path=\"/billboardCollections\">\n              <BillboardCollections />\n            </Route>\n            <Route path=\"/spacecats\">\n              <SpaceCats />\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from 'leek-uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getNodeUrl from 'utils/getRpcUrl'\n\nconst NODE_URL = getNodeUrl()\n\nlet urlProvider: any\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, { timeout: 10000 } as HttpProviderOptions)\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL)\n}\n\nconst constUrlProvider = urlProvider\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(urlProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, constUrlProvider }\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n\n\n      }\n\n      const [info, totalAllocPoint, leekPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'leekPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        leekPerBlock: new BigNumber(leekPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingLeek',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n"],"sourceRoot":""}