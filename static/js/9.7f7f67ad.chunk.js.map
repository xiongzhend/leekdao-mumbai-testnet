{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/formatBalance.ts","hooks/useWeb3.ts","hooks/useContract.ts","config/constants/ifo.ts","config/constants/index.ts","utils/callHelpers.ts","components/UnlockButton.tsx","hooks/useHarvest.ts","utils/erc20.ts","components/Footer/Footer.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/TokenVesting.tsx","views/Home/Home.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","getMainTokenBalance","multipliedBy","urlProvider","NODE_URL","getNodeUrl","startsWith","Web3","providers","HttpProvider","timeout","WebsocketProvider","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useIfoContract","ifo","useVestingContract","vesting","useCake","getCakeAddress","erc20","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","ifos","tokenAddress","80001","137","idoAddress","isActive","name","mainToken","subTitle","startTime","endTime","salesAmount","projectSiteUrl","tokenDecimals","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","UnlockButton","props","comp","TranslateString","connect","reset","error","useWalletModal","onPresentConnectModal","onPresentWrongNetworkModal","onClick","variant","useHarvest","farmPid","dispatch","useDispatch","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","getContract","provider","getTokenBalance","userAddress","balanceOf","call","Footer","color","fontSize","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","fastRefresh","useRefresh","calls","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","bold","CakeHarvestBalance","earningsSum","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","setBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","leekPrice","usePriceCakeBusd","earning","balancesWithValue","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","disabled","fullWidth","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","vestingContract","vestingABI","getVestingAddress","remainingTokens","bal","useLockBalance","reservedBalance","yieldFarmBalance","farms","useFarms","circSupply","minus","cakeSupply","leekPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","TokenVesting","cliff","releaseTime","finalTime","nextReleaseTime","linearReleaseInterval","releaseCount","releaseAmount","state","setState","releaseTotalCount","fetchVestingInfo","moment","utc","Number","format","numeral","claim","release","href","mt","Hero","mediaQueries","lg","BannerImg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/9.7f7f67ad.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const getMainTokenBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.multipliedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getNodeUrl from 'utils/getRpcUrl'\n\nconst NODE_URL = getNodeUrl()\n\nlet urlProvider: any\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, { timeout: 10000 } as HttpProviderOptions)\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL)\n}\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || urlProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || urlProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport vesting from 'config/abi/vesting.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useVestingContract = (address: string) => {\n  const vestingAbi = (vesting as unknown) as AbiItem\n  return useContract(vestingAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import { Ifo } from './types'\n\nconst ifos: Ifo[] = [\n  {\n    id: 'leek',\n    tokenAddress: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    idoAddress: {\n      80001: '0x8AaE8746bCFaAC6AC2927C1C9099943B4de5d7f3',\n      137: '0x0E9B41A5D64de6B4BF6e086417E813Df21707748',\n    },\n    isActive: false,\n    name: 'LEEK',\n    mainToken: 'MATIC',\n    subTitle: 'A community driven crypto and knowledge sharing DAO powered by $LEEK Social Token',\n    startTime: 1625625327,\n    endTime: 1626625327,\n    salesAmount: 500000,\n    projectSiteUrl: '#',\n    tokenDecimals: 18,\n  },\n]\n\nexport default ifos\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import React from 'react'\nimport { Button, useWalletModal } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset, error } = useWallet()\n  const { onPresentConnectModal, onPresentWrongNetworkModal } = useWalletModal(connect, reset, error)\n  let comp\n  if (error) {\n    comp = (\n      <Button onClick={onPresentWrongNetworkModal} {...props} variant=\"danger\">\n        Wrong Network\n      </Button>\n    )\n  } else {\n    comp = (\n      <Button onClick={onPresentConnectModal} {...props}>\n        {TranslateString(292, 'Unlock Wallet')}\n      </Button>\n    )\n  }\n\n  return <div>{comp}</div>\n}\n\nexport default UnlockButton\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React from 'react'\nimport { Text } from 'leek-uikit'\n\nconst Footer: React.FC = () => {\n    const chainId = process.env.REACT_APP_CHAIN_ID\n\n    return (\n        <div>\n            {\n                chainId === \"80001\" ? <Text color=\"failure\" fontSize=\"25px\">* Matic Testnet</Text> : \"\"\n            }\n        </div>\n    )\n}\n\nexport default Footer","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingLeek',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'leek-uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport vestingABI from \"config/abi/vesting.json\"\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress, getVestingAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\n\nexport const useLockBalance = () => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const vestingContract = getContract(vestingABI, getVestingAddress())\n      const bal = await vestingContract.methods.remainingTokens().call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [fastRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingLeek',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('./images/leek/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const leekPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"./images/leek/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'LEEK to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label>~${(leekPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'LEEK in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(leekPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting LEEK')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'leek-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useLockBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useLockBalance() || new BigNumber(0)\n  const reservedBalance = new BigNumber(2500000000000000000000000)\n  const yieldFarmBalance = new BigNumber(5000000000000000000000000)\n  const farms = useFarms()\n  const leekPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance).minus(reservedBalance).minus(yieldFarmBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n\n  let leekPerBlock = 0\n  if (farms && farms[0] && farms[0].leekPerBlock) {\n    leekPerBlock = new BigNumber(farms[0].leekPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Leek Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(leekPrice.times(totalSupply))} decimals={0} prefix=\"$\" />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Locked')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Community Reserved</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(reservedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Yield Farm Reserved</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(yieldFarmBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New LEEK/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {leekPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'leek-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'CryptoLeek',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, { useState, useEffect } from 'react'\nimport { Card, CardBody, Heading, Text, Link, Button } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport UnlockButton from 'components/UnlockButton'\n\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport numeral from 'numeral'\nimport { getVestingAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useVestingContract } from '../../../hooks/useContract'\nimport useRefresh from '../../../hooks/useRefresh'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TokenVesting = () => {\n  const [state, setState] = useState({\n    cliff: 0,\n    releaseTime: 0,\n    finalTime: 0,\n    nextReleaseTime: 0,\n    linearReleaseInterval: 0,\n    releaseCount: 0,\n    releaseAmount: 0,\n    remainingTokens: 0,\n  })\n  const { fastRefresh } = useRefresh()\n  const { account } = useWallet()\n\n  const contract = useVestingContract(getVestingAddress())\n\n  useEffect(() => {\n    const fetchVestingInfo = async () => {\n      const [\n        cliff,\n        releaseTime,\n        finalTime,\n        nextReleaseTime,\n        linearReleaseInterval,\n        releaseCount,\n        releaseAmount,\n        remainingTokens,\n      ] = await Promise.all([\n        contract.methods.cliff().call(),\n        contract.methods.releaseTime().call(),\n        contract.methods.finalTime().call(),\n        contract.methods.nextReleaseTime().call(),\n        contract.methods.linearReleaseInterval().call(),\n        contract.methods.releaseTotalCount().call(),\n        contract.methods.releaseAmount().call(),\n        contract.methods.remainingTokens().call(),\n      ])\n\n      setState({\n        cliff,\n        releaseTime,\n        finalTime,\n        nextReleaseTime,\n        linearReleaseInterval,\n        releaseCount,\n        releaseAmount,\n        remainingTokens,\n      })\n    }\n    fetchVestingInfo()\n  }, [contract, setState, fastRefresh])\n\n  const releaseTime = moment.utc(Number(state.releaseTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const finalTime = moment.utc(Number(state.finalTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const nextReleaseTime = moment.utc(Number(state.nextReleaseTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const linearReleaseInterval = Number(state.linearReleaseInterval / 3600 / 24 / 30).toFixed().toString()\n  const releaseAmount = numeral(getBalanceNumber(new BigNumber(state.releaseAmount))).format('0,0')\n  const remainingTokens = numeral(getBalanceNumber(new BigNumber(state.remainingTokens))).format('0,0')\n\n  const claim = async () => {\n    await contract.methods.release().send({ from: account })\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Leek Vesting Info\n        </Heading>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Start Time</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {releaseTime} UTC\n            </Text>\n          </Link>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release End Time</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {finalTime} UTC\n            </Text>\n          </Link>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Next LEEK Release Date</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {nextReleaseTime} UTC\n            </Text>\n          </Link>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Interval</Text>\n          <Text bold fontSize=\"14px\">\n            {linearReleaseInterval} Month\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Count </Text>\n          <Text bold fontSize=\"14px\">\n            {state.releaseCount}\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">LEEK Release Every Time </Text>\n          <Text bold fontSize=\"14px\">\n            {releaseAmount} LEEK\n          </Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">LEEK Locked </Text>\n          <Text bold fontSize=\"14px\">\n            {remainingTokens} LEEK\n          </Text>\n        </Row>\n\n        <div>\n          {!account ? (\n            <UnlockButton fullWidth mt=\"8px\" />\n          ) : (\n            <Button mt=\"8px\" onClick={claim} fullWidth>\n              Claim\n            </Button>\n          )}\n        </div>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default TokenVesting\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'leek-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport Footer from 'components/Footer'\nimport FarmStakingCard from './components/FarmStakingCard'\n// import LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport TokenVesting from './components/TokenVesting'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('./images/leek/3.png');\n  background-size: 200px 200px;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  padding-top: 200px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('./images/leek/3.png'), url('./images/leek/3b.png');\n    background-position: left center, right center;\n    height: 230px;\n    padding-top: 0;\n  }\n`\n\nconst BannerImg = styled.img`\n  width: 100%;\n  margin-bottom:20px;\n  margin-top:20px;\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"20px\" color=\"primary\">\n          {TranslateString(576, 'LeekDAO')}\n        </Heading>\n        <Text fontSize=\"18px\">{TranslateString(578, 'Popular DEFI app on MATIC Mainnet.')}</Text>\n        <Text color=\"warning\">Project in Beta. Please use it at your own risk</Text>\n      </Hero>\n      <div>\n        <a href=\"./#/farms\">\n          <BannerImg src=\"./images/banner.png\" alt=\"banner\" />\n        </a>\n      </div>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n          <TokenVesting />\n        </Cards>\n        <Footer />\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}