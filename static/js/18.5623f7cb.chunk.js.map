{"version":3,"sources":["views/ChairLottery/Hero.tsx","views/ChairLottery/components/General/AddressInput.tsx","views/ChairLottery/components/General/Column.tsx","views/ChairLottery/store/reducer.tsx","views/ChairLottery/store/store.tsx","views/ChairLottery/api/index.ts","views/ChairLottery/components/General/LoadingContent.tsx","views/ChairLottery/components/General/ScoreDetails.tsx","views/ChairLottery/components/General/ErrorMessage.tsx","views/ChairLottery/components/Modal/DeGenScoreModal.tsx","views/ChairLottery/components/General/SuccessMessage.tsx","views/ChairLottery/components/Modal/ParticipationModal.tsx","views/ChairLottery/components/LotteryCard/LotteryCard.tsx","views/ChairLottery/components/General/Row.tsx","views/ChairLottery/components/General/ParticipantsListRow.tsx","views/ChairLottery/components/LotteryCard/ParticipationListCard.tsx","views/ChairLottery/components/General/TransactionMessage.tsx","views/ChairLottery/components/Modal/LuckyDrawTransactionModal.tsx","views/ChairLottery/components/Modal/ConfirmationPendingModal.tsx","views/ChairLottery/components/Modal/WinnerNumberInputModal.tsx","views/ChairLottery/components/Modal/ApproveTransactionModal.tsx","views/ChairLottery/components/Modal/ErrorMessageModal.tsx","views/ChairLottery/components/LotteryCard/LotteryResultCard.tsx","views/ChairLottery/components/HowToPlay.tsx","views/ChairLottery/components/General/HistoryTabMenu.tsx","views/ChairLottery/components/General/WinnersListRow.tsx","views/ChairLottery/components/LotteryCard/AllHistoryResultCard.tsx","views/ChairLottery/Lottery.tsx","components/Input/Input.tsx","utils/truncateWalletAddress.ts","components/Input/index.ts","../node_modules/react-feather/dist/icons/arrow-up-circle.js"],"names":["StyledHero","styled","Box","Title","Heading","attrs","as","size","theme","colors","primary","DesktopImage","Image","mediaQueries","lg","Hero","Container","alignItems","justifyContent","pr","mb","src","width","height","StyledSpacer","div","props","spacing","StyledTokenAdornmentWrapper","AddressInput","onSelectDefault","value","address","isAddressNull","style","marginBottom","Input","endAdornment","onClick","disabled","placeholder","onChange","Column","ColumnCenter","AutoColumn","gap","justify","defaultState","luckyDrawTx","error","addressTx","loadingState","isLoading","GET_LUCKY_DRAW_TRANSACTION_HASH","GET_ADDRESS_TRANSACTION_HASH","RESET_TO_DEFAULT_STATE","UPDATE_ERROR_MESSAGE","SET_LOADING_STATE_TRUE","SET_LOADING_STATE_FALSE","store","createStore","state","action","type","newState","JSON","parse","stringify","loadingStore","url","process","username","password","useGetScore","useState","deGenScore","setDeGenScore","customUrl","useEffect","mounted","a","axios","get","params","data","console","response","fetchData","usePostParticipation","successData","setSuccessData","post","table","auth","useGetParticipationList","participationList","setParticipationList","fastRefresh","useRefresh","useGetNotParticipatedList","updateParticipationStatus","patch","useGetWinners","contract","useChairLottery","winners","setWinners","methods","currentRound","call","getWinners","roundWinners","useGetCurrentRound","round","setRound","useFetchWinnersAndRound","winnersList","setWinnersList","dispatch","promises","i","push","Promise","all","forEach","itemArray","index","item","rotate","keyframes","Spinner","img","ConfirmedIcon","CustomLightSpinner","LoadingContent","alt","SubTitle","LevelIcon","LevelIconDetails","ScoreDetails","level","score","toLowerCase","color","bold","fontSize","mt","toUpperCase","mr","Icon","ErrorMessage","errorMessage","DeGenScoreModal","onDismiss","comp","title","SuccessMessage","ParticipationModal","StyledLotteryCard","Card","secondary","LotteryCard","setAddress","account","useWallet","trim","length","isAddressValid","startsWith","useModal","onPresentDeGenScoreModal","onPresentParticipationModal","e","currentTarget","variant","UnlockButton","fullWidth","AddressColumn","ChoiceColumn","VotingPowerColumn","Row","Grid","borderColor","sm","ParticipantsListRow","href","getChainExplorerUrl","truncateWalletAddress","ParticipationListCard","showAll","setShowAll","displayList","slice","py","map","wallet_address","wallet_score","wallet_level","textTransform","px","endIcon","TransactionMessage","transactionHash","useContext","ThemeContext","strokeWidth","getTranscationHash","LuckyDrawTransactionModal","getState","ConfirmationPendingContent","WinnerNumberInputModal","number","setNumber","onPresentLuckyDrawTransactionModal","onPresentConfrimationModal","isNumberValid","submitRequest","luckyDraw","send","from","result","parseInt","min","ApproveTransactionModal","ErrorMessageModal","StyledResultCard","ResultContainer","LotteryResultCard","isOwner","notParticpatedList","onPresentWinnerNumberInputModal","onPresentApproveTransactionModal","onPresentErrorMessageModal","isAddressSentToContract1","isAddressSentToContract2","participate","padding","textAlign","lineHeight","Divider","StepContainer","Flex","md","StyledStepCard","radii","card","InlineLink","Link","StepCardInner","background","StepCard","step","label","subtitle","HowToPlay","flexDirection","maxWidth","marginLeft","target","HistoryTabMenu","setActiveIndex","activeIndex","WinnersListRow","AllHistoryResultCard","sort","itemA","itemB","LotteryRoundContainer","CurrentLayout","BaseLayout","HistoryLayout","Lottery","historyTabMenuIndex","setHistoryTabMenuIndex","StyledInputWrapper","input","default","StyledInput","startAdornment","startLength","endLength","substring","_extends","Object","assign","arguments","source","key","prototype","hasOwnProperty","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","ArrowUpCircle","forwardRef","_ref","ref","_ref$color","_ref$size","rest","React","createElement","xmlns","viewBox","fill","stroke","strokeLinecap","strokeLinejoin","cx","cy","r","points","x1","y1","x2","y2","propTypes","PropTypes","string","oneOfType","displayName"],"mappings":"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","file":"static/js/18.5623f7cb.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, Flex, Heading, Image } from 'leek-uikit'\nimport styled from 'styled-components'\nimport Container from 'components/layout/Container'\n\nconst StyledHero = styled(Box)`\n background-image: linear-gradient(180deg, #c0f6fa 0%, #d9f8fa 100%);\n  padding-bottom: 32px;\n  padding-top: 32px;\n`\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\nconst DesktopImage = styled(Image)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n  }\n`\n\nconst Hero = () => {\n  return (\n    <StyledHero>\n      <Container>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Box pr=\"32px\">\n            <Title>\n              Chair Finance Lucky Draw\n            </Title>\n            <Heading mb=\"16px\">\n              Sometimes the Good Things in Life Do Come Easy\n            </Heading>\n          </Box>\n          <DesktopImage src=\"./images/lottery/luckyDraw.png\" width={250} height={250} />\n        </Flex>\n      </Container>\n    </StyledHero >\n  )\n}\n\nexport default Hero","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from 'leek-uikit'\nimport Input, { InputProps } from 'components/Input'\n\ninterface Props extends InputProps {\n    address?: string\n    onSelectDefault?: () => void\n}\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst AddressInput: React.FC<Props> = ({ onSelectDefault, value, address }) => {\n    const isAddressNull = address === null\n\n    return (\n        <div style={{ marginBottom: \"10px\" }}>\n            <Input\n                endAdornment={\n                    <StyledTokenAdornmentWrapper>\n                        <StyledSpacer />\n                        <div>\n                            <Button size=\"sm\" onClick={onSelectDefault} disabled={isAddressNull}>\n                                Default\n                            </Button>\n                        </div>\n                    </StyledTokenAdornmentWrapper>\n                }\n                placeholder=\"Enter your address here...\"\n                value={value}\n                onChange={onSelectDefault}\n                disabled={isAddressNull}\n            />\n        </div>\n    )\n}\n\nexport default AddressInput\n","import styled from 'styled-components'\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\nexport const ColumnCenter = styled(Column)`\n  width: 100%;\n  align-items: center;\n`\n\nexport const AutoColumn = styled.div<{\n    gap?: 'sm' | 'md' | 'lg' | string\n    justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\n}>`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\n  justify-items: ${({ justify }) => justify && justify};\n`\n\nexport default Column","const defaultState = {\n    luckyDrawTx: \"\",\n    error: \"\",\n    addressTx: \"\",\n}\n\nconst loadingState = {\n    isLoading: false\n}\n\nexport const GET_LUCKY_DRAW_TRANSACTION_HASH = 'GET_LUCKY_DRAW_TRANSACTION_HASH'\nexport const GET_ADDRESS_TRANSACTION_HASH = \"GET_ADDRESS_TRANSACTION_HASH\"\nexport const RESET_TO_DEFAULT_STATE = \"RESET_TO_DEFAULT_STATE\"\nexport const UPDATE_ERROR_MESSAGE = \"UPDATE_ERROR_MESSAGE\"\nexport const SET_LOADING_STATE_TRUE = \"SET_LOADING_STATE_TRUE\"\nexport const SET_LOADING_STATE_FALSE = \"SET_LOADING_STATE_FALSE\"\n\nexport const reducer = (state = defaultState, action) => {\n    if (action.type === GET_LUCKY_DRAW_TRANSACTION_HASH) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = action.luckyDrawTx\n        newState.addressTx = \"\"\n        newState.error = \"\"\n        return newState\n    }\n\n    if (action.type === UPDATE_ERROR_MESSAGE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = \"\"\n        newState.addressTx = \"\"\n        newState.error = action.error\n        return newState\n    }\n\n    if (action.type === GET_ADDRESS_TRANSACTION_HASH) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = \"\"\n        newState.addressTx = action.addressTx\n        newState.error = action.error\n        return newState\n    }\n\n    if (action.type === RESET_TO_DEFAULT_STATE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.luckyDrawTx = \"\"\n        newState.addressTx = \"\"\n        newState.error = \"\"\n        return newState\n    }\n\n    return state\n}\n\nexport const loadingReducer = (state = loadingState, action) => {\n    if (action.type === SET_LOADING_STATE_TRUE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.isLoading = true\n        return newState\n    }\n\n    if (action.type === SET_LOADING_STATE_FALSE) {\n        const newState = JSON.parse(JSON.stringify(state))\n        newState.isLoading = false\n        return newState\n    }\n\n    return state;\n}\n\n","import { createStore } from 'redux'\nimport { reducer, loadingReducer } from './reducer'\n\nexport const store = createStore(reducer)\nexport const loadingStore = createStore(loadingReducer)","import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport useRefresh from 'hooks/useRefresh'\nimport { useChairLottery } from 'hooks/useContract'\nimport { loadingStore } from '../store/store'\nimport { SET_LOADING_STATE_FALSE, SET_LOADING_STATE_TRUE } from '../store/reducer'\n\nconst url = process.env.REACT_APP_API_URL;\nconst username = process.env.REACT_APP_API_USERNAME\nconst password = process.env.REACT_APP_API_PASSWORD\n\nexport interface ApiStatResponse {\n    score?: string\n    level?: string\n    error?: string\n}\n\nexport const useGetScore = (address) => {\n    const [deGenScore, setDeGenScore] = useState<ApiStatResponse | null>(null)\n    const customUrl = `${url}/luckyDraw`;\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl, {\n                    params: {\n                        address\n                    }\n                })\n\n                if (mounted) {\n                    setDeGenScore(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch DeGen Score data:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, address, setDeGenScore])\n\n    return deGenScore\n}\n\nexport const usePostParticipation = (address) => {\n    const [successData, setSuccessData] = useState(null);\n    const customUrl = `${url}/luckyDraw`;\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.post(customUrl, {\n                    address,\n                    table: \"chair_lucky_draw\"\n                },\n                    {\n                        auth: {\n                            username,\n                            password\n                        }\n                    }\n                )\n\n                if (mounted) {\n                    setSuccessData(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch participation data:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, address, setSuccessData])\n\n    return successData\n}\n\nexport const useGetParticipationList = () => {\n    const [participationList, setParticipationList] = useState([])\n    const customUrl = `${url}/participationList`;\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl, {\n                    params: {\n                        table: \"chair_lucky_draw\"\n                    }\n                })\n                if (mounted) {\n                    setParticipationList(data)\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch participation list data:', error.response)\n            }\n\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, setParticipationList, fastRefresh])\n    return participationList\n}\n\nexport const useGetNotParticipatedList = () => {\n    const [participationList, setParticipationList] = useState(null)\n    const customUrl = `${url}/notParticipatedList`;\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl, {\n                    params: {\n                        table: \"chair_lucky_draw\"\n                    }\n                })\n\n                if (mounted) {\n                    setParticipationList(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch not particpated persons list:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, fastRefresh, setParticipationList])\n\n    return participationList\n}\n\nexport const updateParticipationStatus = async () => {\n    const customUrl = `${url}/participationStatus`;\n    await axios.patch(customUrl, {\n        table: \"chair_lucky_draw\"\n    }, {\n        auth: {\n            username,\n            password\n        }\n    })\n}\n\nexport const useGetWinners = () => {\n    const contract = useChairLottery();\n    const [winners, setWinners] = useState([]);\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const currentRound = await contract.methods.currentRound().call()\n                const roundWinners = await contract.methods.getWinners(currentRound - 1).call()\n\n                if (mounted) {\n                    setWinners(roundWinners)\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch winners:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, fastRefresh])\n    return winners\n}\n\n\nexport const useGetCurrentRound = () => {\n    const contract = useChairLottery();\n    const [round, setRound] = useState(1);\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const currentRound = await contract.methods.currentRound().call()\n\n                if (mounted) {\n                    setRound(currentRound);\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch current round:', error.response)\n            }\n\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, fastRefresh])\n    return round\n}\n\nexport const useFetchWinnersAndRound = (round) => {\n    const contract = useChairLottery();\n    const [winnersList, setWinnersList] = useState([]);\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                loadingStore.dispatch({ type: SET_LOADING_STATE_TRUE })\n                const winners = []\n                const promises = [];\n\n                if (round === 1) {\n                    if (mounted) {\n                        setWinnersList(winners)\n                    }\n                } else {\n                    for (let i = 2; i <= round; i++) {\n                        promises.push(contract.methods.getWinners(i - 1).call())\n                    }\n                    const winnersArray = await Promise.all(promises)\n                    winnersArray.forEach((itemArray, index) => {\n                        itemArray.forEach(item => {\n                            winners.push({\n                                \"address\": item,\n                                \"round\": index + 1\n                            })\n                        })\n                    })\n\n                    if (mounted) {\n                        setWinnersList(winners)\n                    }\n                    loadingStore.dispatch({ type: SET_LOADING_STATE_FALSE })\n                }\n            } catch (error) {\n                console.error('Unable to fetch history winners:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, round])\n    return winnersList\n}\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { ColumnCenter } from \"./Column\"\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst Spinner = styled.img`\n  animation: 2s ${rotate} linear infinite;\n  width: 16px;\n  height: 16px;\n\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 40px 0;\n`\n\nconst CustomLightSpinner = styled(Spinner) <{ size: string }>`\n  height: ${({ size }) => size};\n  width: ${({ size }) => size};\n`\n\nconst LoadingContent = () => {\n  return (\n    <ConfirmedIcon>\n      <CustomLightSpinner src=\"./images/blue-loader.svg\" alt=\"loader\" size=\"90px\" />\n    </ConfirmedIcon>\n  )\n}\n\nexport default LoadingContent","import React from \"react\"\nimport { Heading, Flex, Text } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\nimport { ApiStatResponse } from \"../../api\"\n\nconst SubTitle = styled(Heading).attrs({ as: 'h4', size: 'md' })`\n  color: ${({ theme }) => theme.colors.primary};\n  marign: 20px;\n`\n\nconst LevelIcon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst LevelIconDetails = styled.img <{ width: string, height: string }>`\n  width: ${({ width }) => width};\n  height: ${({ height }) => height};\n`\n\nconst ScoreDetails: React.FC<ApiStatResponse> = ({ level, score }) => {\n  return (\n    <div>\n      <SubTitle>Your Score Level is:</SubTitle>\n      <LevelIcon>\n        <LevelIconDetails src={`./images/lottery/${level.toLowerCase()}.png`} alt=\"level\" width=\"100px\" height=\"70px\" />\n        <Text color=\"secondary\" bold fontSize=\"20px\" mt=\"5px\"> {level.toUpperCase()}</Text>\n      </LevelIcon>\n      <Flex alignItems=\"center\">\n        <SubTitle mr=\"20px\">Your Score is:</SubTitle>\n        <Text color=\"secondary\" bold fontSize=\"30px\"> {score}</Text>\n      </Flex>\n      <Flex alignItems=\"center\">\n        <SubTitle mr=\"20px\">Results:</SubTitle>\n        <Text color={level.toLowerCase() === \"bronze\" ? \"failure\" : \"success\"} bold fontSize=\"30px\">{level.toLowerCase() === \"bronze\" ? \"Unqualified\" : \"Qualified\"}</Text>\n      </Flex>\n    </div>\n  )\n}\n\nexport default ScoreDetails","import React from \"react\"\nimport { Text, ErrorIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\ntype ErrorMessageProps = {\n    errorMessage: string\n}\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ errorMessage }) => {\n    return (\n        <Icon>\n            <ErrorIcon color=\"failure\" width=\"60px\" />\n            <Text color=\"failure\" fontSize=\"20px\" mt=\"10px\">{errorMessage}</Text>\n        </Icon>\n    )\n}\n\nexport default ErrorMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport { useGetScore } from \"../../api\"\nimport LoadingContent from \"../General/LoadingContent\"\nimport ScoreDetails from \"../General/ScoreDetails\"\nimport ErrorMessage from \"../General/ErrorMessage\"\n\ntype DeGenScoreProps = {\n    address: string\n    onDismiss: () => void\n}\n\nconst DeGenScoreModal = ({ onDismiss, address }: DeGenScoreProps) => {\n    const data = useGetScore(address);\n    let comp;\n    if (data) {\n        if (data.error) {\n            comp = <ErrorMessage errorMessage={data.error} />\n        } else {\n            comp = <ScoreDetails score={data.score} level={data.level} />\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Modal title=\"DeGen Socre\" onDismiss={onDismiss}>\n            <div>{comp}</div>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default DeGenScoreModal","import React from \"react\"\nimport { Text, CheckmarkCircleIcon } from \"leek-uikit\"\nimport styled from \"styled-components\"\nimport { ColumnCenter } from \"./Column\"\n\nconst Icon = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst SuccessMessage: React.FC = () => {\n    return (\n        <Icon>\n            <CheckmarkCircleIcon color=\"success\" width=\"60px\" />\n            <Text color=\"success\" fontSize=\"20px\" mt=\"10px\">Thank you for your participation!</Text>\n        </Icon>\n    )\n}\n\nexport default SuccessMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport { usePostParticipation } from \"../../api\"\nimport LoadingContent from \"../General/LoadingContent\"\nimport ErrorMessage from \"../General/ErrorMessage\"\nimport SuccessMessage from \"../General/SuccessMessage\"\n\ntype ParticipationProps = {\n    address: string\n    onDismiss: () => void\n}\n\nconst ParticipationModal = ({ onDismiss, address }: ParticipationProps) => {\n    const data = usePostParticipation(address);\n\n    let comp;\n    if (data) {\n        if (data.error) {\n            comp = <ErrorMessage errorMessage={data.error} />\n        } else {\n            comp = <SuccessMessage />\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Modal title=\"Participation Submission\" onDismiss={onDismiss}>\n            <div>{comp}</div>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ParticipationModal","import React, { useState } from \"react\"\nimport { Card, Heading, Flex, Button, useModal, Text } from 'leek-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport styled from \"styled-components\"\nimport UnlockButton from \"components/UnlockButton\";\nimport AddressInput from \"../General/AddressInput\";\nimport DeGenScoreModal from \"../Modal/DeGenScoreModal\";\nimport ParticipationModal from \"../Modal/ParticipationModal\"\n\nconst StyledLotteryCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-size: contain;\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  width: 100%;\n  margin-top:30px;\n  margin-bottom:30px;\n`\n\nconst Title = styled(Heading).attrs({ as: 'h2', size: 'lg' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\nconst LotteryCard = () => {\n    const [address, setAddress] = useState(\"\");\n    const { account } = useWallet();\n    const isAddressNull = address.trim().length === 0\n    const isAddressValid = address.trim().length === 42 && address.startsWith(\"0x\")\n\n    const [onPresentDeGenScoreModal] = useModal(\n        <DeGenScoreModal onDismiss={() => { return null }} address={address} />,\n    )\n    const [onPresentParticipationModal] = useModal(\n        <ParticipationModal onDismiss={() => { return null }} address={address} />,\n    )\n\n    return (\n        <StyledLotteryCard>\n            <Title>Participate Form</Title>\n            <AddressInput\n                address={account}\n                value={address}\n                onChange={(e) => setAddress(e.currentTarget.value)}\n                onSelectDefault={() => setAddress(account)}\n            />\n            {!isAddressValid && !isAddressNull ? <Text color=\"failure\" mb=\"10px\">* Address Invalid. Please Provide a valid address</Text> : \"\"}\n            {\n                account ? <Flex justifyContent=\"space-between\">\n                    <Button variant=\"primary\" mr=\"8px\" disabled={!isAddressValid} onClick={onPresentDeGenScoreModal}>\n                        DeGen Score\n                    </Button>\n\n                    <Button variant=\"secondary\" mr=\"8px\" disabled={!isAddressValid} onClick={onPresentParticipationModal}>\n                        Participate\n                    </Button>\n                </Flex> :\n                    <UnlockButton fullWidth />\n            }\n        </StyledLotteryCard >\n    )\n\n}\n\nexport default LotteryCard\n\n","import styled from 'styled-components'\nimport { Grid, Box } from 'leek-uikit'\n\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\n  grid-area: address;\n`\n\nexport const ChoiceColumn = styled(Box)`\n  grid-area: choice;\n  overflow: hidden;\n`\n\nexport const VotingPowerColumn = styled(Box)`\n  justify-self: end;\n  grid-area: vote;\n`\n\nconst Row = styled(Grid)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.borderColor};\n  grid-gap: 8px;\n  grid-template-areas: 'address choice vote';\n  grid-template-columns: 2fr 1fr 1fr;\n  padding: 8px 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    padding: 16px 24px;\n  }\n`\n\nexport default Row","import React from 'react'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { Flex, LinkExternal, Text } from 'leek-uikit'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\n\ninterface ListProps {\n    address: string,\n    level: string,\n    score: string\n}\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst ParticipantsListRow: React.FC<ListProps> = ({ address, level, score }) => {\n    return (\n        <Row>\n            <AddressColumn>\n                <Flex alignItems=\"center\">\n                    <LinkExternal href={getChainExplorerUrl(chainId, address)}>{truncateWalletAddress(address)}</LinkExternal>\n                </Flex>\n            </AddressColumn>\n            <ChoiceColumn>\n                <Text>{level}</Text>\n            </ChoiceColumn>\n            <VotingPowerColumn>\n                <Flex alignItems=\"center\" justifyContent=\"end\">\n                    {score}\n                </Flex>\n            </VotingPowerColumn>\n        </Row>\n    )\n}\n\nexport default ParticipantsListRow","import React, { useState } from 'react'\nimport {\n    Card,\n    CardHeader,\n    ChevronDownIcon,\n    Flex,\n    Heading,\n    Button,\n    ChevronUpIcon,\n    Text,\n} from 'leek-uikit'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../General/Row'\nimport { useGetParticipationList, useGetCurrentRound } from '../../api'\nimport ParticipantsListRow from \"../General/ParticipantsListRow\"\n\nconst LIST_PER_VIEW = 5\n\nconst ParticipationListCard: React.FC = () => {\n    const participationList = useGetParticipationList()\n    const [showAll, setShowAll] = useState(false)\n    const displayList = showAll ? participationList : participationList.slice(0, LIST_PER_VIEW)\n    const round = useGetCurrentRound();\n\n    const handleClick = () => {\n        setShowAll(!showAll)\n    }\n\n    let comp;\n    if (participationList.length === 0) {\n        comp = <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n            <Heading as=\"h5\">No Participants found</Heading>\n        </Flex>\n\n    } else {\n        comp = displayList.map((item) => (\n            <ParticipantsListRow key={item.wallet_address} address={item.wallet_address} score={item.wallet_score} level={item.wallet_level} />\n        ))\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Participation List ({participationList.length})</Heading>\n                    {\n                        round > 0 ? <Text>Current Round: #{round}</Text> : \"\"\n                    }\n                </Flex>\n            </CardHeader>\n\n            <Row>\n                <AddressColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Participator\n                    </Text>\n                </AddressColumn>\n                <ChoiceColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Level\n                    </Text>\n                </ChoiceColumn>\n                <VotingPowerColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        score\n                    </Text>\n                </VotingPowerColumn>\n            </Row>\n            {comp}\n            {\n                displayList.length > 0 && (<Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n                    <Button\n                        onClick={handleClick}\n                        variant=\"text\"\n                        endIcon={\n                            showAll ? (\n                                <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                            ) : (\n                                <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                            )\n                        }\n                    >\n                        {showAll ? \"Hide\" : \"See All\"}\n                    </Button>\n                </Flex>)\n            }\n        </Card>\n    )\n}\n\nexport default ParticipationListCard\n\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport { LinkExternal } from 'leek-uikit'\nimport { ArrowUpCircle } from 'react-feather'\nimport { getTranscationHash } from 'utils/chainExplorer'\nimport { AutoColumn, ColumnCenter } from './Column'\n\ntype TransactionMessageProps = {\n    transactionHash?: string\n}\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 40px 0;\n`\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst TransactionMessage: React.FC<TransactionMessageProps> = ({ transactionHash }) => {\n    const theme = useContext(ThemeContext)\n\n    return (\n        <div>\n            <ConfirmedIcon>\n                <ArrowUpCircle strokeWidth={0.5} size={97} color={theme.colors.primary} />\n            </ConfirmedIcon>\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <LinkExternal href={getTranscationHash(chainId, transactionHash)}>View on PolygonScan</LinkExternal>\n            </AutoColumn>\n        </div>\n\n    )\n}\n\nexport default TransactionMessage","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { store } from \"../../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst LuckyDrawTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { luckyDrawTx } = store.getState();\n\n    return (\n        <Modal title=\"Transaction Submitted\" onDismiss={onDismiss}>\n            <TransactionMessage transactionHash={luckyDrawTx} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default LuckyDrawTransactionModal","import React from 'react'\nimport { Modal } from 'leek-uikit'\nimport LoadingContent from '../General/LoadingContent'\n\ntype ConfirmationPendingContentProps = { onDismiss: () => void }\n\nconst ConfirmationPendingContent = ({ onDismiss }: ConfirmationPendingContentProps) => {\n    return (\n        <Modal title=\"Waiting for confirmation\" onDismiss={onDismiss}>\n            <LoadingContent />\n        </Modal>\n    )\n}\n\nexport default ConfirmationPendingContent","import React, { useState } from 'react'\nimport { Button, Modal, Flex, Input, Heading, useModal } from 'leek-uikit'\nimport { useChairLottery } from 'hooks/useContract'\nimport LuckyDrawTransactionModal from \"./LuckyDrawTransactionModal\"\nimport ConfirmationPendingContent from './ConfirmationPendingModal'\nimport { store } from \"../../store/store\"\nimport { GET_LUCKY_DRAW_TRANSACTION_HASH, RESET_TO_DEFAULT_STATE } from '../../store/reducer'\n\ntype WinnerNumberInputProps = {\n    onDismiss: () => void\n    account: string\n}\n\nconst WinnerNumberInputModal = ({ onDismiss, account }: WinnerNumberInputProps) => {\n    const [number, setNumber] = useState(0)\n    const [onPresentLuckyDrawTransactionModal] = useModal(<LuckyDrawTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentConfrimationModal] = useModal(<ConfirmationPendingContent onDismiss={() => { return null }} />)\n    const contract = useChairLottery();\n    const isNumberValid = number > 0\n\n    const submitRequest = async () => {\n        onPresentConfrimationModal();\n        store.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        const result = await contract.methods.luckyDraw(number).send({ from: account })\n        if (result) {\n            const action = {\n                type: GET_LUCKY_DRAW_TRANSACTION_HASH,\n                luckyDrawTx: result.transactionHash,\n            }\n            store.dispatch(action);\n            onPresentLuckyDrawTransactionModal();\n        }\n        return null;\n\n    }\n    return (\n        <Modal title=\"Set Winners Number\" onDismiss={onDismiss}>\n            <div>\n                <Heading color=\"primary\" size=\"md\" mb=\"10px\">Winners Number of this Round:</Heading>\n                <div>\n                    <Input\n                        placeholder=\"Enter Winners Number...\"\n                        type=\"number\"\n                        value={number}\n                        onChange={(e) => setNumber(parseInt(e.currentTarget.value) || 0)}\n                        min=\"0\" />\n                </div>\n            </div>\n\n\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                <Button onClick={submitRequest} mt=\"20px\" disabled={!isNumberValid}>\n                    Submit\n                </Button>\n                <Button variant=\"secondary\" onClick={onDismiss} mt=\"20px\" >\n                    Close\n                </Button>\n            </Flex>\n        </Modal>\n    )\n}\n\nexport default WinnerNumberInputModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport TransactionMessage from '../General/TransactionMessage'\nimport { store } from \"../../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst ApproveTransactionModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { addressTx } = store.getState();\n\n    return (\n        <Modal title=\"Transaction Submitted\" onDismiss={onDismiss}>\n            <TransactionMessage transactionHash={addressTx} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ApproveTransactionModal","import React from 'react'\nimport { Button, Modal } from 'leek-uikit'\nimport { AutoColumn } from '../General/Column'\nimport ErrorMessage from '../General/ErrorMessage'\nimport { store } from \"../../store/store\"\n\ntype TransactionSubmittedContentProps = {\n    onDismiss: () => void\n}\n\nconst ErrorMessageModal = ({ onDismiss }: TransactionSubmittedContentProps) => {\n    const { error } = store.getState();\n\n    return (\n        <Modal title=\"Error Message\" onDismiss={onDismiss}>\n            <ErrorMessage errorMessage={error} />\n            <AutoColumn gap=\"8px\" justify=\"center\">\n                <Button onClick={onDismiss} mt=\"20px\">\n                    Close\n                </Button>\n            </AutoColumn>\n        </Modal>\n    )\n}\n\nexport default ErrorMessageModal","import React from 'react'\nimport {\n    Card,\n    CardHeader,\n    Flex,\n    Heading,\n    LinkExternal,\n    Button,\n    useModal,\n    Text,\n} from 'leek-uikit'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useChairLottery } from 'hooks/useContract'\nimport styled from \"styled-components\"\nimport WinnerNumberInputModal from '../Modal/WinnerNumberInputModal'\nimport { ColumnCenter } from \"../General/Column\"\nimport ApproveTransactionModal from '../Modal/ApproveTransactionModal'\nimport ConfirmationPendingContent from '../Modal/ConfirmationPendingModal'\nimport ErrorMessageModal from '../Modal/ErrorMessageModal'\nimport { useGetCurrentRound, useGetWinners, useGetNotParticipatedList, updateParticipationStatus } from '../../api'\nimport { store } from \"../../store/store\"\nimport { GET_ADDRESS_TRANSACTION_HASH, RESET_TO_DEFAULT_STATE, UPDATE_ERROR_MESSAGE } from \"../../store/reducer\"\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst StyledResultCard = styled(Card) <{ size: number }>`\n  background-repeat: no-repeat;\n  background-size: contain;\n  max-height: ${({ size }) => size}px;\n  width: 100%;\n`\n\nconst ResultContainer = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst LOTTERY_OWNER = process.env.REACT_APP_CHAIR_LOTTERY_OWNER\n\nconst LotteryResultCard: React.FC = () => {\n    const winners = useGetWinners()\n    const round = useGetCurrentRound();\n    const { account } = useWallet();\n    const isOwner = LOTTERY_OWNER === account\n    const notParticpatedList = useGetNotParticipatedList()\n    const [onPresentWinnerNumberInputModal] = useModal(<WinnerNumberInputModal onDismiss={() => { return null }} account={account} />)\n    const [onPresentApproveTransactionModal] = useModal(<ApproveTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentConfrimationModal] = useModal(<ConfirmationPendingContent onDismiss={() => { return null }} />)\n    const [onPresentErrorMessageModal] = useModal(<ErrorMessageModal onDismiss={() => { return null }} />)\n    const contract = useChairLottery();\n    const state = store.getState()\n    const isAddressSentToContract1 = state.error === \"There are no new participants\"\n    const isAddressSentToContract2 = state.addressTx && state.addressTx.length > 0\n\n    const submitRequest = async () => {\n        onPresentConfrimationModal();\n        store.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        if (notParticpatedList.error) {\n            const action = {\n                type: UPDATE_ERROR_MESSAGE,\n                error: notParticpatedList.error,\n            }\n            store.dispatch(action);\n            onPresentErrorMessageModal()\n        } else {\n            const result = await contract.methods.participate(notParticpatedList).send({ from: account })\n            if (result) {\n                const action = {\n                    type: GET_ADDRESS_TRANSACTION_HASH,\n                    addressTx: result.transactionHash,\n                    error: result.error,\n                }\n                store.dispatch(action);\n                onPresentApproveTransactionModal();\n                await updateParticipationStatus();\n            }\n        }\n\n        return null;\n\n\n    }\n\n    let comp;\n\n    if (winners && winners.length > 0) {\n        comp = <div>\n            <Heading color=\"primary\">Congratulations! {winners.length === 1 ? \"Winner is:\" : \"Winners are\"}</Heading>\n            <ResultContainer>\n                {\n                    winners.map((item) => (\n                        <LinkExternal key={item} href={getChainExplorerUrl(chainId, item)} fontSize=\"18px\"> 🏆 {truncateWalletAddress(item)}</LinkExternal>\n                    ))\n                }\n\n            </ResultContainer>\n        </div>\n    } else {\n        comp = <Flex alignItems=\"center\" justifyContent=\"center\" padding=\"20px\">\n            <Heading as=\"h5\" style={{ textAlign: \"center\", lineHeight: \"1.5\" }}>No winners Found. Let us expect who will be the winner.</Heading>\n        </Flex>\n\n    }\n\n    return (\n        <StyledResultCard size={250 + winners.length * 30}>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Last Round Winner(s)</Heading>\n                    {\n                        round > 0 ? <Text>Round: #{round - 1}</Text> : \"\"\n                    }\n\n                </Flex>\n            </CardHeader>\n\n            <div style={{ padding: \"20px\" }}>\n                {comp}\n                {\n                    isOwner && (\n\n                        <div>\n                            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                                <Button onClick={submitRequest} disabled={isAddressSentToContract1 || isAddressSentToContract2}>Approve</Button>\n                                <Button onClick={onPresentWinnerNumberInputModal} disabled={!isAddressSentToContract1 && !isAddressSentToContract2}>Lucky Draw</Button>\n                            </Flex>\n                        </div>\n                    )\n                }\n            </div>\n\n        </StyledResultCard>\n    )\n}\n\nexport default LotteryResultCard","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, Heading, Link } from 'leek-uikit'\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 40px 0;\n  width: 100%;\n`\n\nconst StepContainer = styled(Flex)`\n  gap: 24px;\n  width: 100%;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst StyledStepCard = styled(Box)`\n  display: flex;\n  align-self: baseline;\n  position: relative;\n  background: ${({ theme }) => theme.colors.borderColor};\n  padding: 1px 1px 3px 1px;\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nconst InlineLink = styled(Link)`\n  display: inline;\n`\n\nconst StepCardInner = styled(Box)`\n  width: 100%;\n  padding: 24px;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nconst Title = styled(Heading).attrs({ as: 'h2', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\ntype Step = { title: string; subtitle: string; label: string }\n\nconst StepCard: React.FC<{ step: Step }> = ({ step }) => {\n    return (\n        <StyledStepCard width=\"100%\">\n            <StepCardInner height={['200px', '180px', null, '200px']}>\n                <Text mb=\"16px\" fontSize=\"15px\" bold textTransform=\"uppercase\" style={{ textAlign: \"right\" }}>\n                    {step.label}\n                </Text>\n                <Heading mb=\"16px\" fontSize=\"20px\" color=\"secondary\">\n                    {step.title}\n                </Heading>\n                <Text color=\"textSubtle\">{step.subtitle}</Text>\n            </StepCardInner>\n        </StyledStepCard>\n    )\n}\n\nconst HowToPlay: React.FC = () => {\n    const steps: Step[] = [\n        {\n            label: \"Step 1\",\n            title: \"Fill in the Form\",\n            subtitle: 'Only the person whose DeGenScore is over 30 can have access to this game.',\n        },\n        {\n            label: \"Step 2\",\n            title: \"Wait for the Draw\",\n            subtitle: 'The lucky draw will be open in person and regularly.',\n        },\n        {\n            label: \"Step 3\",\n            title: \"Check for Prizes\",\n            subtitle: \"Each round winner(s) will be displayed in public.\",\n        },\n    ]\n    return (\n        <Box width=\"100%\" style={{ marginBottom: \"30px\" }}>\n            <Flex mt=\"30px\" mb=\"40px\" alignItems=\"center\" flexDirection=\"column\">\n                <Title mb=\"24px\" fontSize=\"30px\" color=\"secondary\">\n                    How to Play\n                </Title>\n                <Text>It is a very simple game! But you will receive satisified returns</Text>\n            </Flex>\n            <StepContainer>\n                {steps.map((step) => (\n                    <StepCard key={step.label} step={step} />\n                ))}\n            </StepContainer>\n            <Divider />\n            <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection={['column', 'column', 'row']}>\n                <Flex maxWidth=\"100px\" mr=\"8px\" mb=\"16px\">\n                    <img src=\"./images/lottery/question.png\" alt=\"question\" />\n                </Flex>\n                <Flex maxWidth=\"300px\" flexDirection=\"column\">\n                    <Heading mb=\"16px\">\n                        Still got questions?\n                    </Heading>\n                    <Text>\n                        Check our in-depth guide on\n                        <InlineLink href=\"https://docs.leekdao.xyz\" marginLeft=\"5px\" target=\"_blank\">\n                            how to play the Chair Finance Lucky Draw!\n                        </InlineLink>\n                    </Text>\n                </Flex>\n            </Flex>\n        </Box>\n    )\n}\n\nexport default HowToPlay","import React from 'react'\nimport { ButtonMenu, ButtonMenuItem } from 'leek-uikit'\n\nconst HistoryTabMenu = ({ setActiveIndex, activeIndex }) => {\n    return (\n        <ButtonMenu activeIndex={activeIndex} onClick={setActiveIndex} size=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>Round Info</ButtonMenuItem>\n            <ButtonMenuItem>History Winners</ButtonMenuItem>\n        </ButtonMenu>\n    )\n}\n\nexport default HistoryTabMenu","import React from 'react'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { Flex, LinkExternal, Text } from 'leek-uikit'\nimport Row, { AddressColumn, VotingPowerColumn } from './Row'\n\ninterface ListProps {\n    address: string,\n    round: number\n}\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst WinnersListRow: React.FC<ListProps> = ({ address, round }) => {\n    return (\n        <Row>\n            <AddressColumn>\n                <Flex alignItems=\"center\">\n                    <LinkExternal href={getChainExplorerUrl(chainId, address)}>{truncateWalletAddress(address)}</LinkExternal>\n                </Flex>\n            </AddressColumn>\n            <VotingPowerColumn>\n                <Flex alignItems=\"center\" justifyContent=\"end\">\n                    <Text>Round: #{round}</Text>\n                </Flex>\n            </VotingPowerColumn>\n        </Row>\n    )\n}\n\nexport default WinnersListRow","import React, { useState } from 'react'\nimport {\n    Card,\n    CardHeader,\n    ChevronDownIcon,\n    Flex,\n    Heading,\n    Button,\n    ChevronUpIcon,\n    Text,\n} from 'leek-uikit'\nimport Row, { AddressColumn, VotingPowerColumn } from '../General/Row'\nimport WinnersListRow from \"../General/WinnersListRow\"\nimport { useGetCurrentRound, useFetchWinnersAndRound } from '../../api'\nimport LoadingContent from '../General/LoadingContent'\nimport { loadingStore } from '../../store/store'\n\nconst LIST_PER_VIEW = 5\n\nconst AllHistoryResultCard: React.FC = () => {\n    const round = useGetCurrentRound()\n    const winnersList = useFetchWinnersAndRound(round).sort((itemA, itemB) => itemB.round - itemA.round);\n    const [showAll, setShowAll] = useState(false)\n    const displayList = showAll ? winnersList : winnersList.slice(0, LIST_PER_VIEW)\n    const { isLoading } = loadingStore.getState()\n\n    const handleClick = () => {\n        setShowAll(!showAll)\n    }\n    let comp;\n\n    if (!isLoading) {\n        if (displayList.length === 0) {\n            comp = <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n                <Heading as=\"h5\">No Winners found</Heading>\n            </Flex>\n        } else {\n            comp = displayList.map((item) => (\n                <WinnersListRow key={item.address} address={item.address} round={item.round} />\n            ))\n        }\n    } else {\n        comp = <LoadingContent />\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Lucky Draw Winners History Results</Heading>\n                    <Text>Total Winners: {winnersList.length}</Text>\n                </Flex>\n            </CardHeader>\n\n            <Row>\n                <AddressColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Lucky Draw Winner Address\n                    </Text>\n                </AddressColumn>\n                <VotingPowerColumn>\n                    <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                        Round No\n                    </Text>\n                </VotingPowerColumn>\n            </Row>\n            {comp}\n            {\n                !isLoading && displayList.length > 0 && (<Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n                    <Button\n                        onClick={handleClick}\n                        variant=\"text\"\n                        endIcon={\n                            showAll ? (\n                                <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                            ) : (\n                                <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                            )\n                        }\n                    >\n                        {showAll ? \"Hide\" : \"See All\"}\n                    </Button>\n                </Flex>)\n            }\n        </Card>\n    )\n}\n\nexport default AllHistoryResultCard","import React, { useState } from \"react\";\nimport { BaseLayout, Box, Flex, Heading } from \"leek-uikit\";\nimport Container from \"components/layout/Container\";\nimport styled from \"styled-components\";\nimport Hero from \"./Hero\";\nimport LotteryCard from \"./components/LotteryCard/LotteryCard\";\nimport ParticipationListCard from \"./components/LotteryCard/ParticipationListCard\"\nimport LotteryResultCard from \"./components/LotteryCard/LotteryResultCard\"\nimport HowToPlay from \"./components/HowToPlay\"\nimport HistoryTabMenu from \"./components/General/HistoryTabMenu\";\nimport AllHistoryResultCard from \"./components/LotteryCard/AllHistoryResultCard\"\n\nconst LotteryRoundContainer = styled.div`\n background-image:linear-gradient(180deg, #CBD7EF 0%, #9A9FD0 100%);\n`\n\nconst CurrentLayout = styled(BaseLayout)`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n  margin: 0 auto;\n  padding-left: 150px;\n  padding-right: 150px;\n  padding-top:50px;\n  padding-bottom:50px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1.3fr 1fr;\n  }\n\n  @media (max-width: 768px) {\n   padding:30px\n  }\n`\n\nconst HistoryLayout = styled(Container)`\n  margin: 0 auto;\n  padding-left: 150px;\n  padding-right: 150px;\n  padding-top:50px;\n  padding-bottom:50px;\n\n  @media (max-width: 768px) {\n   padding:30px\n  }\n`\n\nconst Lottery = () => {\n    const [historyTabMenuIndex, setHistoryTabMenuIndex] = useState(0)\n    return (\n        <div>\n            <Hero />\n            <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                <Heading size=\"xl\" color=\"secondary\" mt=\"40px\">\n                    Participate Lucky Draw Right now!\n                </Heading>\n            </Flex>\n            <LotteryCard />\n            <LotteryRoundContainer>\n                <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                    <Heading mt=\"24px\" size=\"xl\">\n                        Lucky Draw Results\n                    </Heading>\n                    <Box mt=\"30px\">\n                        <HistoryTabMenu\n                            activeIndex={historyTabMenuIndex}\n                            setActiveIndex={(index) => setHistoryTabMenuIndex(index)} />\n                    </Box>\n                </Flex>\n\n                {historyTabMenuIndex === 0 ? <CurrentLayout>\n                    <ParticipationListCard />\n                    <LotteryResultCard />\n                </CurrentLayout> :\n                    <HistoryLayout>\n                        <AllHistoryResultCard />\n                    </HistoryLayout>\n                }\n\n            </LotteryRoundContainer>\n\n            <Container>\n                <HowToPlay />\n            </Container>\n        </div>\n    )\n}\n\nexport default Lottery","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n  disabled?: boolean\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value, disabled }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} disabled={disabled} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","/**\n * Truncates a wallet's address\n */\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\n    return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateWalletAddress","export { default } from './Input'\nexport type { InputProps } from './Input'\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ArrowUpCircle = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"16 12 12 8 8 12\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"16\",\n    x2: \"12\",\n    y2: \"8\"\n  }));\n});\nArrowUpCircle.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nArrowUpCircle.displayName = 'ArrowUpCircle';\nexport default ArrowUpCircle;"],"sourceRoot":""}